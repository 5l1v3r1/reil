// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstdio>
#include <random>

#include "absl/types/span.h"
#include "gtest/gtest.h"

#include "reil/aarch64.h"

namespace reil {
namespace test {

// NOTE: This file is generated by aarch64_test_generator.py - please add new
// tests there and regenerate this file instead of modifying this file directly.

TEST(AArch64Translator, Adr) {
  std::vector<uint8_t> bytes = {
      0x00,
      0x00,
      0x00,
      0x10,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd3cabd1e8d72e952));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x128e34e627f25853));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe2f22e0ac123963f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xef4fed43d1e71229));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x128e34e627f25853));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe2f22e0ac123963f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xef4fed43d1e71229));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Adrp) {
  std::vector<uint8_t> bytes = {
      0x00,
      0x00,
      0x00,
      0x90,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf511419ce56b1641));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf2db4d6c45af53a1));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x48e6c6ff2f609816));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x43e8f31f5c56058e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2db4d6c45af53a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x48e6c6ff2f609816));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43e8f31f5c56058e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, AddImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0x91, 0x01, 0x48, 0x40, 0x91, 0x01, 0xfc, 0x3f, 0x11,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc2e8421f9efbd5ec));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x543e899dc0a0feee));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8b406456b8142194));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe1ad127284eccd15));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc2e8421f9efbd5ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc2e8421f9efbd5fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8b406456b8142194));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe1ad127284eccd15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc2e8421f9efbd5ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc2e8421f9efcf5ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8b406456b8142194));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe1ad127284eccd15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc2e8421f9efbd5ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000009efbe5eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8b406456b8142194));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe1ad127284eccd15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AddsImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0xb1, 0x01, 0x48, 0x40, 0xb1, 0x01, 0xfc, 0x7f, 0x31,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0b4b79ec184c98f7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x78645cfdee42fb26));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0452710f29753d1a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0cef40a93e88b9f9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0b4b79ec184c98f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b4b79ec184c9909));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0452710f29753d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0cef40a93e88b9f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0b4b79ec184c98f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b4b79ec184db8f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0452710f29753d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0cef40a93e88b9f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0b4b79ec184c98f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000194c88f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0452710f29753d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0cef40a93e88b9f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, CmnImmediate) {
  std::vector<uint8_t> bytes = {
      0x1f, 0xf8, 0x3d, 0xb1, 0x1f, 0xf8, 0x7d, 0x31,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x04f9d44e0a615e36));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2955ecd5d920b1f0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4017d7fca9e3c4f5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4c8897c59d12d2b2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x04f9d44e0a615e36));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2955ecd5d920b1f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4017d7fca9e3c4f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c8897c59d12d2b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x04f9d44e0a615e36));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2955ecd5d920b1f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4017d7fca9e3c4f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c8897c59d12d2b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CmpImmediate) {
  std::vector<uint8_t> bytes = {
      0x1f, 0xf8, 0x3d, 0xf1, 0x1f, 0xf8, 0x7d, 0x71,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf6eaf2d9474481d2));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6b8e55d4f42482ce));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x469fbe2dc1273718));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xab94e00f17731869));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf6eaf2d9474481d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6b8e55d4f42482ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x469fbe2dc1273718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xab94e00f17731869));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf6eaf2d9474481d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6b8e55d4f42482ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x469fbe2dc1273718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xab94e00f17731869));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, MovToFromSp) {
  std::vector<uint8_t> bytes = {
      0x1f, 0x00, 0x00, 0x91, 0xe1, 0x03, 0x00, 0x11,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x52ec79b8370fca92));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4aaca9dde9bd0cc5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x903629a6c154f30f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xada43aa92552bf20));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52ec79b8370fca92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4aaca9dde9bd0cc5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x903629a6c154f30f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xada43aa92552bf20));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52ec79b8370fca92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000370fca92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x903629a6c154f30f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xada43aa92552bf20));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, SubImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0xd1, 0x01, 0x48, 0x40, 0xd1, 0x01, 0xfc, 0x3f, 0x51,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3449a96ef8b50ef9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb431e30a6dc3b8da));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb3440320036b2abc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7b12b5569f7dcbd8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3449a96ef8b50ef9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3449a96ef8b50ee7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3440320036b2abc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7b12b5569f7dcbd8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3449a96ef8b50ef9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3449a96ef8b3eef9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3440320036b2abc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7b12b5569f7dcbd8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3449a96ef8b50ef9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f8b4fefa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3440320036b2abc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7b12b5569f7dcbd8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, SubsImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0xf1, 0x01, 0x48, 0x40, 0xf1, 0x01, 0xfc, 0x7f, 0x71,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd7b326f250635824));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa4bfb864e7482ec4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x62b563c68b9e4fe7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc4737b65c1581db9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd7b326f250635824));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd7b326f250635812));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x62b563c68b9e4fe7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc4737b65c1581db9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd7b326f250635824));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd7b326f250623824));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x62b563c68b9e4fe7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc4737b65c1581db9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd7b326f250635824));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004f636824));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x62b563c68b9e4fe7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc4737b65c1581db9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AndImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0x92, 0x01, 0x9c, 0x08, 0x92, 0x01, 0x24, 0x00, 0x12,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4f35104e3f759c15));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf14d3fbac9c1163c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9cc15d766b92f543));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1914bea29252d111));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4f35104e3f759c15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4000004000408000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9cc15d766b92f543));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1914bea29252d111));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4f35104e3f759c15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4f0010003f009c00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9cc15d766b92f543));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1914bea29252d111));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4f35104e3f759c15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000015));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9cc15d766b92f543));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1914bea29252d111));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, OrrImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0xb2, 0x01, 0x9c, 0x08, 0xb2, 0x01, 0x24, 0x00, 0x32,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8158f26b9b4ba687));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7b4bcb643544ac5d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb9e7e1fc1230cb98));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbab186e50a3329d5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8158f26b9b4ba687));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1d8f2ebdbcbe6c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb9e7e1fc1230cb98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbab186e50a3329d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8158f26b9b4ba687));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xff58ff6bff4bff87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb9e7e1fc1230cb98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbab186e50a3329d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8158f26b9b4ba687));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000009b4ba7ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb9e7e1fc1230cb98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbab186e50a3329d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, EorImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0xd2, 0x01, 0x9c, 0x08, 0xd2, 0x01, 0x24, 0x00, 0x52,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3107d1c6c7601fa3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbc1d20d77d08995c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4e876925d1b77257));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x26492e666b18a403));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3107d1c6c7601fa3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf1c7110607a0df63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4e876925d1b77257));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x26492e666b18a403));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3107d1c6c7601fa3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce072ec63860e0a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4e876925d1b77257));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x26492e666b18a403));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3107d1c6c7601fa3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000c7601c5c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4e876925d1b77257));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x26492e666b18a403));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AndsImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0xf2, 0x01, 0x9c, 0x08, 0xf2, 0x01, 0x24, 0x00, 0x72,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8180c81c1a7f4b75));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xba9a593873025a5e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb3f8c3e356a7bf5e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa9ea102672170639));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8180c81c1a7f4b75));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8080c00000404040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3f8c3e356a7bf5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa9ea102672170639));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8180c81c1a7f4b75));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8100c8001a004b00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3f8c3e356a7bf5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa9ea102672170639));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8180c81c1a7f4b75));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000375));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3f8c3e356a7bf5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa9ea102672170639));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, TstImmediate) {
  std::vector<uint8_t> bytes = {
      0x1f, 0x28, 0x40, 0xf2, 0x1f, 0x24, 0x00, 0x72,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1ed536f6c5e6e8d0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0c05ab3da1a4a63f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4279b3e34314763a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x78d7cda9732c4c8e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ed536f6c5e6e8d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0c05ab3da1a4a63f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4279b3e34314763a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78d7cda9732c4c8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ed536f6c5e6e8d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0c05ab3da1a4a63f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4279b3e34314763a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78d7cda9732c4c8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Movn) {
  std::vector<uint8_t> bytes = {
      0xe0, 0xff, 0x9f, 0x92, 0xe0, 0xff, 0xdf, 0x92, 0xe0, 0x1f, 0xa0, 0x12,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8b35598a893a4711));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd41168631d53358b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x101efdd727609dfd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe399cf10cacb1fdd));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffffffffffff0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd41168631d53358b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x101efdd727609dfd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe399cf10cacb1fdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffff0000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd41168631d53358b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x101efdd727609dfd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe399cf10cacb1fdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000ff00ffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd41168631d53358b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x101efdd727609dfd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe399cf10cacb1fdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Movz) {
  std::vector<uint8_t> bytes = {
      0x80, 0x46, 0x82, 0xd2, 0xa0, 0x79, 0xd5, 0xd2, 0x40, 0x02, 0xa0, 0x52,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x03f63fc0c59d120a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xab0a53f25e65c5c7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf8f91591be792763));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4190a4360d6c01f8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xab0a53f25e65c5c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf8f91591be792763));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4190a4360d6c01f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000abcd00000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xab0a53f25e65c5c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf8f91591be792763));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4190a4360d6c01f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000120000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xab0a53f25e65c5c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf8f91591be792763));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4190a4360d6c01f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Movk) {
  std::vector<uint8_t> bytes = {
      0x80, 0x46, 0xe2, 0xf2, 0xa0, 0x79, 0xd5, 0xf2, 0x40, 0x02, 0xa0, 0x72,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x541e850a5f5c872c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x442226d8080bf0ba));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0efbc049b9ed1b18));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x946888fe57dfcfdc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1234850a5f5c872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442226d8080bf0ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0efbc049b9ed1b18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x946888fe57dfcfdc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1234abcd5f5c872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442226d8080bf0ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0efbc049b9ed1b18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x946888fe57dfcfdc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000012872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442226d8080bf0ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0efbc049b9ed1b18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x946888fe57dfcfdc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AsrImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xfc, 0x4b, 0x93, 0x01, 0x7c, 0x06, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x08bc4b9905da76c0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1137d1db459981ab));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7dd6b3f388232dbe));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf7fc215130b5f4a1));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x08bc4b9905da76c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000117897320bb4e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7dd6b3f388232dbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf7fc215130b5f4a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x08bc4b9905da76c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000001769db));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7dd6b3f388232dbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf7fc215130b5f4a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbfiz) {
  std::vector<uint8_t> bytes = {
      0x01, 0x18, 0x4a, 0x93, 0x01, 0x04, 0x13, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x182005239878764b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa726cfd6b980b6b3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1be26d122ae6f05b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x78562b511ac57942));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x182005239878764b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2c0000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1be26d122ae6f05b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78562b511ac57942));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x182005239878764b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffffe000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1be26d122ae6f05b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78562b511ac57942));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbfx) {
  std::vector<uint8_t> bytes = {
      0x01, 0xb0, 0x4b, 0x93, 0x01, 0x08, 0x01, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd3e6f57ee3dad102));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3c1644b75d2cf489));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5c85aeeb945c64ab));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x07bbd32e44a190e2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd3e6f57ee3dad102));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfffffffeafdc7b5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5c85aeeb945c64ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x07bbd32e44a190e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd3e6f57ee3dad102));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5c85aeeb945c64ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x07bbd32e44a190e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sxtb) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x1c,
      0x00,
      0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4a16f7fc69d91452));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5832399c4a5519dc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe43cab64e24a21d7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf497923d677c8b75));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4a16f7fc69d91452));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000052));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe43cab64e24a21d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf497923d677c8b75));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Sxth) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x3c,
      0x00,
      0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1155e4c149c8eb70));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x21e99c6befd05f81));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe598108ae0a46ff6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa42895e3e6662d73));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1155e4c149c8eb70));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffffeb70));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe598108ae0a46ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa42895e3e6662d73));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Bfi) {
  std::vector<uint8_t> bytes = {
      0x01, 0x40, 0x79, 0xb3, 0x01, 0x00, 0x42, 0xb3, 0x01, 0x24, 0x0c, 0x33,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x161dc7a276eb8970));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3440bae0da923375));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf1346dd93c61aa41));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdced6ab50fb84dcf));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x161dc7a276eb8970));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3440bae0dac4b875));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf1346dd93c61aa41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdced6ab50fb84dcf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x161dc7a276eb8970));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3440bae0dac4b875));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf1346dd93c61aa41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdced6ab50fb84dcf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x161dc7a276eb8970));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d704b875));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf1346dd93c61aa41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdced6ab50fb84dcf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Bfxil) {
  std::vector<uint8_t> bytes = {
      0x01, 0x5c, 0x47, 0xb3, 0x01, 0xf8, 0x7e, 0xb3, 0x01, 0x74, 0x14, 0x33,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa95e286ee6a7ca8e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x99d49678ebbb76e4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfbedd76b444e0a37));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd28ed122aeb6edda));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa95e286ee6a7ca8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x99d49678ebbb4f95));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfbedd76b444e0a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd28ed122aeb6edda));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa95e286ee6a7ca8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x99d49678ebbb4f94));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfbedd76b444e0a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd28ed122aeb6edda));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa95e286ee6a7ca8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ebbb4e6a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfbedd76b444e0a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd28ed122aeb6edda));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LslImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xb8, 0x6f, 0xd3, 0x01, 0x70, 0x1d, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x15d89c159a4e4332));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x285f9d427f491d25));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd931dcd9207fa12f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x884c084eea3cb906));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15d89c159a4e4332));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x382b349c86640000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd931dcd9207fa12f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x884c084eea3cb906));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15d89c159a4e4332));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d2721990));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd931dcd9207fa12f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x884c084eea3cb906));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, LsrImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xfc, 0x4b, 0xd3, 0x01, 0x7c, 0x06, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x74c2a5c72c8172f2));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x53c2ef9311885dc3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x377f683cad4d2df4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb2b211d8dd03e863));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x74c2a5c72c8172f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000e9854b8e5902e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x377f683cad4d2df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2b211d8dd03e863));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x74c2a5c72c8172f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000b205cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x377f683cad4d2df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2b211d8dd03e863));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Ubfiz) {
  std::vector<uint8_t> bytes = {
      0x01, 0x18, 0x4a, 0xd3, 0x01, 0x04, 0x13, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x20c87afb46206e99));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x478d808f27aa6b25));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2ece2c3be72bc5e5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf5639a8529dee786));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20c87afb46206e99));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0640000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ece2c3be72bc5e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5639a8529dee786));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20c87afb46206e99));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000002000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ece2c3be72bc5e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5639a8529dee786));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Ubfx) {
  std::vector<uint8_t> bytes = {
      0x01, 0xb0, 0x4b, 0xd3, 0x01, 0x08, 0x01, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb194e891ab361106));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe21139e8f79d4d39));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1109862a14ef1146));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x34af0551d2916158));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb194e891ab361106));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000001123566c2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1109862a14ef1146));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x34af0551d2916158));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb194e891ab361106));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1109862a14ef1146));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x34af0551d2916158));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Uxtb) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x1c,
      0x00,
      0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x36cd2b56f54fa873));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xaa36a64404b97196));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9c5ecc54e701eb5c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xfa445b9127bdc91d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x36cd2b56f54fa873));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9c5ecc54e701eb5c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfa445b9127bdc91d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Uxth) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x3c,
      0x00,
      0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd4c13f36d8691faa));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd5732e2b9c944ca3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe62066905e5cb5a1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1ae6858edb997a8c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd4c13f36d8691faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe62066905e5cb5a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1ae6858edb997a8c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, RorImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x9c, 0xc0, 0x93, 0x01, 0x18, 0x80, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7a65a4315d392d72));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x87d5892b7c29fa80));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x92cd595d4b05e052));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8edc3756d4b5a42c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7a65a4315d392d72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x62ba725ae4f4cb48));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x92cd595d4b05e052));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8edc3756d4b5a42c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7a65a4315d392d72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000c974e4b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x92cd595d4b05e052));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8edc3756d4b5a42c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Extract) {
  std::vector<uint8_t> bytes = {
      0x22, 0xf4, 0xc0, 0x93, 0x22, 0x44, 0x80, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x441c7096ad4587b6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7a9ea855f305f25c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x10b79008cab50390));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe582b66ee6b6569d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x441c7096ad4587b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7a9ea855f305f25c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd4f542af982f92e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe582b66ee6b6569d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x441c7096ad4587b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7a9ea855f305f25c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f92e56a2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe582b66ee6b6569d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CompareAndBranch) {
  std::vector<uint8_t> bytes = {
      0x00, 0x00, 0x80, 0xd2, 0x81, 0x46, 0x82, 0xd2, 0xa0, 0x00, 0x00, 0xb5,
      0x40, 0x00, 0x00, 0xb4, 0x1f, 0x20, 0x03, 0xd5, 0x41, 0x00, 0x00, 0x34,
      0x41, 0x00, 0x00, 0x35, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x947f1da34f3d6012));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb56de986864f0ccb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2ee7a7470a2742b4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0632a05c03960efc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb56de986864f0ccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ee7a7470a2742b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0632a05c03960efc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ee7a7470a2742b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0632a05c03960efc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ee7a7470a2742b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0632a05c03960efc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ee7a7470a2742b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0632a05c03960efc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ee7a7470a2742b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0632a05c03960efc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ee7a7470a2742b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0632a05c03960efc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ee7a7470a2742b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0632a05c03960efc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));
}

TEST(AArch64Translator, ConditionalBranch) {
  std::vector<uint8_t> bytes = {
      0x00, 0x00, 0x80, 0xd2, 0x1f, 0x00, 0x00, 0xf1, 0x40, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x81, 0x02, 0x00, 0x54, 0x42, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x23, 0x02, 0x00, 0x54, 0x45, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0xc4, 0x01, 0x00, 0x54, 0x47, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x66, 0x01, 0x00, 0x54, 0x49, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x08, 0x01, 0x00, 0x54, 0x4a, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0xab, 0x00, 0x00, 0x54, 0x4d, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x4e, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5,
      0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9196bf1aa354b37a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x063b846578a0895a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x684c094015e3eaaf));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x89f108c923878bbf));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001044));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000104c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001050));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001058));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001060));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x063b846578a0895a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x684c094015e3eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89f108c923878bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001064));
}

TEST(AArch64Translator, TestAndBranchIfZero) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x88, 0x36, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc475181b3cd00650));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xfc97796e5e24b41d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4fc3218ed87a3ff6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf5f5cb91e9e354da));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc475181b3cd00650));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfc97796e5e24b41d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4fc3218ed87a3ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5f5cb91e9e354da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc475181b3cd00650));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfc97796e5e24b41d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4fc3218ed87a3ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5f5cb91e9e354da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, TestAndBranchIfNonzero) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0xf8, 0xb7, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x92aaa4f4866fc826));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x18a902268790e89b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd9019daab3f7ce12));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd4ca0c4b5e014e69));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x92aaa4f4866fc826));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x18a902268790e89b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd9019daab3f7ce12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4ca0c4b5e014e69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x92aaa4f4866fc826));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x18a902268790e89b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd9019daab3f7ce12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4ca0c4b5e014e69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, BranchRegister) {
  std::vector<uint8_t> bytes = {
      0xa0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x1f, 0xd6, 0x1f, 0x20, 0x03, 0xd5,
      0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5635ba84f4f93a3d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3b5d39fc97ab6c90));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd20c4031169ea4b1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xecb3756e8b908be1));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3b5d39fc97ab6c90));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd20c4031169ea4b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xecb3756e8b908be1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3b5d39fc97ab6c90));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd20c4031169ea4b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xecb3756e8b908be1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3b5d39fc97ab6c90));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd20c4031169ea4b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xecb3756e8b908be1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchAndLinkRegister) {
  std::vector<uint8_t> bytes = {
      0xa0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x3f, 0xd6, 0x1f, 0x20, 0x03, 0xd5,
      0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x307830a9388723f8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd7cdcf41bcde2bac));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x804f4a86645407e4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0d76d7544d5b5722));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd7cdcf41bcde2bac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x804f4a86645407e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d76d7544d5b5722));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd7cdcf41bcde2bac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x804f4a86645407e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d76d7544d5b5722));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd7cdcf41bcde2bac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x804f4a86645407e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d76d7544d5b5722));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchImmediateForward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20,
      0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5eb10f473edd0ef3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xfb4f462129abdf2b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfefe0618a41eb121));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3f60ef84ee5e699a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5eb10f473edd0ef3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfb4f462129abdf2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfefe0618a41eb121));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3f60ef84ee5e699a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5eb10f473edd0ef3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfb4f462129abdf2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfefe0618a41eb121));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3f60ef84ee5e699a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, BranchImmediateBackward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x03, 0x00, 0x00, 0x14,
      0x1f, 0x20, 0x03, 0xd5, 0xfd, 0xff, 0xff, 0x17, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb61809b5526dcf32));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4f7bc4823f01f32f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xbab44ea754d07711));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb2dea9813e0206e4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb61809b5526dcf32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4f7bc4823f01f32f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbab44ea754d07711));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2dea9813e0206e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb61809b5526dcf32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4f7bc4823f01f32f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbab44ea754d07711));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2dea9813e0206e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb61809b5526dcf32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4f7bc4823f01f32f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbab44ea754d07711));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2dea9813e0206e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb61809b5526dcf32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4f7bc4823f01f32f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbab44ea754d07711));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2dea9813e0206e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb61809b5526dcf32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4f7bc4823f01f32f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbab44ea754d07711));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2dea9813e0206e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchAndLinkImmediateForward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x94, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20,
      0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2a4a1f1e69d03116));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6cf489ddc8ea950c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1636dff4774dd2ff));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa6702ec610355af2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2a4a1f1e69d03116));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6cf489ddc8ea950c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1636dff4774dd2ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6702ec610355af2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2a4a1f1e69d03116));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6cf489ddc8ea950c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1636dff4774dd2ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6702ec610355af2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, BranchAndLinkImmediateBackward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x03, 0x00, 0x00, 0x14,
      0x1f, 0x20, 0x03, 0xd5, 0xfd, 0xff, 0xff, 0x97, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6673da310b59cbdc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2765f278cde0b724));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xea13af79eb027638));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x54631f6b603459ce));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6673da310b59cbdc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2765f278cde0b724));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xea13af79eb027638));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54631f6b603459ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6673da310b59cbdc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2765f278cde0b724));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xea13af79eb027638));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54631f6b603459ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6673da310b59cbdc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2765f278cde0b724));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xea13af79eb027638));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54631f6b603459ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6673da310b59cbdc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2765f278cde0b724));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xea13af79eb027638));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54631f6b603459ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6673da310b59cbdc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2765f278cde0b724));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xea13af79eb027638));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54631f6b603459ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, Stxrb) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x08, 0x41, 0x7c,
      0x00, 0x08, 0x40, 0x7c, 0x5f, 0x08, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcaeaea4e50168c14));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x57eb5c31a9c8a11d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x73e7fb54f8c48a6f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb5f007fe7b28073f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcaeaea4e50168c14));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57eb5c31a9c8a11d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5f007fe7b28073f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57eb5c31a9c8a11d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5f007fe7b28073f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57eb5c31a9c8a11d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5f007fe7b28073f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000001d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57eb5c31a9c8a11d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5f007fe7b28073f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000001d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57eb5c31a9c8a11d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5f007fe7b28073f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrb) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x08, 0x41, 0xfc,
      0x00, 0x08, 0x40, 0xfc, 0x5f, 0x08, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb7b0a26c7f494e0e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xefa4587cfe122b12));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x39091db823ad5b6e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf7a8d85972ac938d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb7b0a26c7f494e0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xefa4587cfe122b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf7a8d85972ac938d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xefa4587cfe122b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf7a8d85972ac938d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xefa4587cfe122b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf7a8d85972ac938d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000012));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xefa4587cfe122b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf7a8d85972ac938d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000012));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xefa4587cfe122b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf7a8d85972ac938d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrb) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x08, 0x41, 0xfc,
      0x9f, 0x08, 0x40, 0xfc, 0xdf, 0x08, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2ce1b2eb4914100b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa715897b92f76294));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf27db51e1ee61983));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe77bc0b9e412b43e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2ce1b2eb4914100b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa715897b92f76294));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe77bc0b9e412b43e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa715897b92f76294));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe77bc0b9e412b43e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa715897b92f76294));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe77bc0b9e412b43e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000094));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa715897b92f76294));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe77bc0b9e412b43e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000094));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa715897b92f76294));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe77bc0b9e412b43e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrh) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x48, 0x41, 0x7c,
      0x00, 0x48, 0x40, 0x7c, 0x5f, 0x48, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x40c427247ec67fc1));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x81433ba35b49bebb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0ff68babdf3a80fd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe0bb9334de641f5d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x40c427247ec67fc1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x81433ba35b49bebb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe0bb9334de641f5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x81433ba35b49bebb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe0bb9334de641f5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x81433ba35b49bebb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe0bb9334de641f5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000bebb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x81433ba35b49bebb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe0bb9334de641f5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000bebb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x81433ba35b49bebb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe0bb9334de641f5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrh) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x48, 0x41, 0xfc,
      0x00, 0x48, 0x40, 0xfc, 0x5f, 0x48, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf6205dfd17840706));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5986863a6c73e38b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf98ed5892332fb8f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbafa382101368e48));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf6205dfd17840706));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5986863a6c73e38b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbafa382101368e48));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5986863a6c73e38b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbafa382101368e48));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5986863a6c73e38b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbafa382101368e48));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000e38b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5986863a6c73e38b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbafa382101368e48));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000e38b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5986863a6c73e38b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbafa382101368e48));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrh) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x48, 0x41, 0xfc,
      0x9f, 0x48, 0x40, 0xfc, 0xdf, 0x48, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x586d626b02662640));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9acdd39259713781));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0fae989f83ae456e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x17da210e0b914e3d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x586d626b02662640));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9acdd39259713781));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17da210e0b914e3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9acdd39259713781));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17da210e0b914e3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9acdd39259713781));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17da210e0b914e3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000003781));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9acdd39259713781));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17da210e0b914e3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000003781));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9acdd39259713781));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17da210e0b914e3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x88, 0x41, 0x7c,
      0x00, 0x88, 0x40, 0x7c, 0x5f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9dc1fd9c6b4946f0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x163724be77e70caa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8e3d87f4c3a91e3d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1396f93c515e3dc7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9dc1fd9c6b4946f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x163724be77e70caa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1396f93c515e3dc7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x163724be77e70caa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1396f93c515e3dc7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x163724be77e70caa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1396f93c515e3dc7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000077e70caa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x163724be77e70caa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1396f93c515e3dc7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000077e70caa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x163724be77e70caa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1396f93c515e3dc7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxpw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x00, 0x7f, 0x88, 0x41, 0x0c,
      0x20, 0x88, 0x40, 0x04, 0x7f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc9ded9768981dac6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x77f91d07458556f1));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe033175ad3aa581e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc7deacc4ef150221));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc9ded9768981dac6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x77f91d07458556f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc7deacc4ef150221));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x77f91d07458556f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc7deacc4ef150221));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x77f91d07458556f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc7deacc4ef150221));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000458556f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ef150221));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc7deacc4ef150221));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000458556f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ef150221));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc7deacc4ef150221));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxpw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x80, 0x7f, 0x88, 0x41, 0x8c,
      0x20, 0x88, 0x40, 0x84, 0x7f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5e70829d880befea));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x509608a14bb8d4cc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0f02a25b256558ae));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x189b98eb5752b502));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e70829d880befea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x509608a14bb8d4cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x189b98eb5752b502));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x509608a14bb8d4cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x189b98eb5752b502));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x509608a14bb8d4cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x189b98eb5752b502));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000004bb8d4cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000005752b502));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x189b98eb5752b502));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000004bb8d4cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000005752b502));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x189b98eb5752b502));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x88, 0x41, 0xfc,
      0x00, 0x88, 0x40, 0xfc, 0x5f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x959ae8ba524f846c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa621122e56080718));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9e0dff41b6307cb3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7e212d99c44afc4c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x959ae8ba524f846c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa621122e56080718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7e212d99c44afc4c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa621122e56080718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7e212d99c44afc4c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa621122e56080718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7e212d99c44afc4c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000056080718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa621122e56080718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7e212d99c44afc4c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000056080718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa621122e56080718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7e212d99c44afc4c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x88, 0x41, 0xfc,
      0x9f, 0x88, 0x40, 0xfc, 0xdf, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6b5e291cabdc196f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x11ed5e62eb019f82));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xab64a1687a8ce219));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa918cfea89a0fff5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6b5e291cabdc196f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x11ed5e62eb019f82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa918cfea89a0fff5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x11ed5e62eb019f82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa918cfea89a0fff5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x11ed5e62eb019f82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa918cfea89a0fff5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000eb019f82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x11ed5e62eb019f82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa918cfea89a0fff5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000eb019f82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x11ed5e62eb019f82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa918cfea89a0fff5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrx) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0xc8, 0x41, 0x7c,
      0x00, 0xc8, 0x40, 0x7c, 0x5f, 0xc8, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0affad3aab648236));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf7d2403d277774a8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xec5bab512e8c9c10));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc1f7204e97d3e39b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0affad3aab648236));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf7d2403d277774a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc1f7204e97d3e39b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf7d2403d277774a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc1f7204e97d3e39b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf7d2403d277774a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc1f7204e97d3e39b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf7d2403d277774a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf7d2403d277774a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc1f7204e97d3e39b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf7d2403d277774a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf7d2403d277774a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc1f7204e97d3e39b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrx) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0xc8, 0x41, 0xfc,
      0x00, 0xc8, 0x40, 0xfc, 0x5f, 0xc8, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0ce48fd024c1b3bd));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x32ba9de1a458e38a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe0c56edf777a9165));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8450952de9cba1dc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0ce48fd024c1b3bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x32ba9de1a458e38a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8450952de9cba1dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x32ba9de1a458e38a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8450952de9cba1dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x32ba9de1a458e38a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8450952de9cba1dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ba9de1a458e38a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x32ba9de1a458e38a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8450952de9cba1dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ba9de1a458e38a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x32ba9de1a458e38a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8450952de9cba1dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrx) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0xc8, 0x41, 0xfc,
      0x9f, 0xc8, 0x40, 0xfc, 0xdf, 0xc8, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa4e4b81505d51c89));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xae7cbfe521f869ea));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x230fee6dbcf84b5b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x07e3230b28f4d054));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa4e4b81505d51c89));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xae7cbfe521f869ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x07e3230b28f4d054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xae7cbfe521f869ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x07e3230b28f4d054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xae7cbfe521f869ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x07e3230b28f4d054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xae7cbfe521f869ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xae7cbfe521f869ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x07e3230b28f4d054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xae7cbfe521f869ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xae7cbfe521f869ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x07e3230b28f4d054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, LdrwLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5a8ba83a3efc3a1a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc349dccf4d3038b5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2ad4ca02397d4c69));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8f32abc6faaa2511));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc349dccf4d3038b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ad4ca02397d4c69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8f32abc6faaa2511));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc349dccf4d3038b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2ad4ca02397d4c69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8f32abc6faaa2511));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrxLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xfe31655e304856c1));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4521687c40e2a1d8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7a226a14cdb898d0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x89e8692e2d794aa3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4521687c40e2a1d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7a226a14cdb898d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89e8692e2d794aa3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4521687c40e2a1d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7a226a14cdb898d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x89e8692e2d794aa3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrswLiteralPositive) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x87ff4d5b2284c16b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5ce49789e870b1a7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x02a136b19ea40a37));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc0a636129a7881fe));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ce49789e870b1a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x02a136b19ea40a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc0a636129a7881fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ce49789e870b1a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x02a136b19ea40a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc0a636129a7881fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrswLiteralNegative) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xea804400e9baff27));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe92d650e7e916cd8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9bfe2a37ae46c73a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4770816b89cd323b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe92d650e7e916cd8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9bfe2a37ae46c73a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4770816b89cd323b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe92d650e7e916cd8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9bfe2a37ae46c73a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4770816b89cd323b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrsLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x78d664cd3e2a40a3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2174aeb3f20ff4c2));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2dd12cddc1dff884));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3f98d9640ba6704f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));
}

TEST(AArch64Translator, LdrdLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x5c, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2b02c1ef788314b8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xeb8b215cb47adf89));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcd83e906dc371eb3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4979489ca7f252d8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));
}

TEST(AArch64Translator, LdrqLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x9c, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x50dbf6bc5d69bf8c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x797778b1cadb257c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcd9d83855004ef59));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe03b9309b625f6ad));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));
}

TEST(AArch64Translator, Ldstnpw) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x02, 0x28, 0x41, 0x00, 0x42,
      0x28, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe475e531386b6de2));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x16b675647a112528));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x446eca3f8c69007d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x618212dd96a4c04f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe475e531386b6de2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x16b675647a112528));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x618212dd96a4c04f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe475e531386b6de2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x16b675647a112528));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x618212dd96a4c04f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000007a112528));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000386b6de2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x618212dd96a4c04f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000007a112528));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000386b6de2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x618212dd96a4c04f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, Ldpsw) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x02, 0x29, 0x41, 0x00, 0x42,
      0x69, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf1c6dadc3c9f1939));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7eac84c8ce9f163f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5f6a5f011f101bd3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2b2761befa0815cf));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1c6dadc3c9f1939));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7eac84c8ce9f163f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2b2761befa0815cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1c6dadc3c9f1939));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7eac84c8ce9f163f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2b2761befa0815cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffffffffce9f163f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000003c9f1939));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2b2761befa0815cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffffffffce9f163f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000003c9f1939));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2b2761befa0815cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, Ldstnpx) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x01, 0xa8, 0x41, 0x00, 0x41,
      0xa8, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xad4677ffc6d558fb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc330391574b88807));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xef04c1780409a6e7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x65972dba62a6500b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xad4677ffc6d558fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc330391574b88807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65972dba62a6500b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xad4677ffc6d558fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc330391574b88807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65972dba62a6500b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc330391574b88807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xad4677ffc6d558fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65972dba62a6500b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc330391574b88807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xad4677ffc6d558fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65972dba62a6500b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, LdstpwPreindex) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x04, 0x81, 0x29, 0x62, 0x00, 0x00, 0x10,
      0x41, 0x00, 0xc1, 0x29, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xfc7897c413b1d813));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe8f2884c7011f01b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe4cea1b6a16a5f81));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf0073906b7063437));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfc7897c413b1d813));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe8f2884c7011f01b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf0073906b7063437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfc7897c413b1d813));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe8f2884c7011f01b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000101c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf0073906b7063437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfc7897c413b1d813));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe8f2884c7011f01b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf0073906b7063437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000007011f01b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000013b1d813));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000101c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf0073906b7063437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000007011f01b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000013b1d813));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000101c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf0073906b7063437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));
}

TEST(AArch64Translator, LdstpwOffset) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x00, 0x29, 0x41, 0x80, 0x7f,
      0x29, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb5b4ce0d3e828d68));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf76fa924d7c3dcf6));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa609365d9aebbc1d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcecddea34b1ef40c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb5b4ce0d3e828d68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf76fa924d7c3dcf6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcecddea34b1ef40c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb5b4ce0d3e828d68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf76fa924d7c3dcf6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcecddea34b1ef40c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000003e828d68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000014000005));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcecddea34b1ef40c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000003e828d68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000014000005));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcecddea34b1ef40c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, LdstpwPostindex) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x04, 0x82, 0x28, 0x62, 0x00, 0x00, 0x10,
      0x41, 0x00, 0xc2, 0x28, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xfa031597a29905c7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x14a359f060da53db));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf061f1299f8de0d2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc2311d605cfa0331));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfa031597a29905c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x14a359f060da53db));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2311d605cfa0331));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfa031597a29905c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x14a359f060da53db));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001024));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2311d605cfa0331));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfa031597a29905c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x14a359f060da53db));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2311d605cfa0331));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000060da53db));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000a29905c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001024));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2311d605cfa0331));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000060da53db));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000a29905c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001024));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2311d605cfa0331));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));
}

TEST(AArch64Translator, LdstpxPreindex) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x04, 0x81, 0xa9, 0x62, 0x00, 0x00, 0x10,
      0x41, 0x00, 0xc1, 0xa9, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc3dcb4ba78e892fa));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf5e73d351dc1947e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6d66275e028fe415));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x259d5e02c070d9ac));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc3dcb4ba78e892fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf5e73d351dc1947e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x259d5e02c070d9ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc3dcb4ba78e892fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf5e73d351dc1947e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001024));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x259d5e02c070d9ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc3dcb4ba78e892fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf5e73d351dc1947e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x259d5e02c070d9ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf5e73d351dc1947e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc3dcb4ba78e892fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001024));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x259d5e02c070d9ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf5e73d351dc1947e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc3dcb4ba78e892fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001024));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x259d5e02c070d9ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));
}

TEST(AArch64Translator, LdstpxOffset) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x84, 0x00, 0xa9, 0x41, 0x00, 0x41,
      0xa9, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbcb6a1aff47d0569));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x33d8805146c7b9e7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8975bfd759c18a1e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf8ac3bda7470017d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbcb6a1aff47d0569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x33d8805146c7b9e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8ac3bda7470017d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbcb6a1aff47d0569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x33d8805146c7b9e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8ac3bda7470017d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x33d8805146c7b9e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8ac3bda7470017d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x33d8805146c7b9e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8ac3bda7470017d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, LdstpxPostindex) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x84, 0x80, 0xa8, 0x62, 0x00, 0x00, 0x10,
      0x41, 0x80, 0xc0, 0xa8, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x197338374308c333));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe22e393dcdea581d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8600c94e18201e12));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb4300623a7fa7a37));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x197338374308c333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe22e393dcdea581d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb4300623a7fa7a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x197338374308c333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe22e393dcdea581d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000101c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb4300623a7fa7a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x197338374308c333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe22e393dcdea581d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb4300623a7fa7a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe22e393dcdea581d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x197338374308c333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000101c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb4300623a7fa7a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe22e393dcdea581d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x197338374308c333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000101c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb4300623a7fa7a37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));
}

TEST(AArch64Translator, Ldstnps) {
  std::vector<uint8_t> bytes = {
      0x80, 0x00, 0x00, 0x10, 0x00, 0x84, 0x02, 0x2c, 0x01, 0x80, 0x42,
      0x2c, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x919cf986f466d6e6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb9d4d42104bc6579));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd2942e563f133d3b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x108076c36285b462));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb9d4d42104bc6579));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd2942e563f133d3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x108076c36285b462));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Ldstnpd) {
  std::vector<uint8_t> bytes = {
      0x80, 0x00, 0x00, 0x10, 0x00, 0x84, 0x01, 0x6c, 0x01, 0x80, 0x41,
      0x6c, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4a48d94b4542b914));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x414c764194e93d7e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8f54faa54d4c78ac));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x63c52511cb93d444));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x414c764194e93d7e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8f54faa54d4c78ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x63c52511cb93d444));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Adc) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0x9a, 0x22, 0x00, 0x00, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x66b289879d150e2a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7bd01cfe5e2acd1d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x84a88d163f28d8a3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x44222fead985572e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66b289879d150e2a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7bd01cfe5e2acd1d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe282a685fb3fdb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x44222fead985572e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66b289879d150e2a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7bd01cfe5e2acd1d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fb3fdb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x44222fead985572e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Adcs) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0xba, 0x22, 0x00, 0x00, 0x3a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd69bfc62c6695839));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7d0bc18193c77f2e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc17ec19ceba80eb3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2626d8a4f813fbcb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd69bfc62c6695839));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7d0bc18193c77f2e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53a7bde45a30d768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2626d8a4f813fbcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd69bfc62c6695839));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7d0bc18193c77f2e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005a30d768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2626d8a4f813fbcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbc) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0xda, 0x22, 0x00, 0x00, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe9bf529a1f41fd0d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1700610fba524b80));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x84f8527459b30ee5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7189a685799766d4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe9bf529a1f41fd0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1700610fba524b80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2d410e759b104e72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7189a685799766d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe9bf529a1f41fd0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1700610fba524b80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000009b104e72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7189a685799766d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbcs) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0xfa, 0x22, 0x00, 0x00, 0x7a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa9ec1007a7814399));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb46177cbdf82092f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9ab97a6cf9cd3124));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xfb58328e405db99d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa9ec1007a7814399));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb46177cbdf82092f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0a7567c43800c596));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfb58328e405db99d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa9ec1007a7814399));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb46177cbdf82092f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003800c596));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfb58328e405db99d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CcmpRegister) {
  std::vector<uint8_t> bytes = {
      0x69, 0x00, 0x42, 0xfa, 0x68, 0x10, 0x42, 0x7a, 0x6b, 0x20, 0x42, 0xfa,
      0x6a, 0x30, 0x42, 0x7a, 0x6f, 0x40, 0x42, 0xfa, 0x6e, 0x50, 0x42, 0x7a,
      0x66, 0x60, 0x42, 0xfa, 0x6d, 0x70, 0x42, 0x7a, 0x6c, 0x80, 0x42, 0xfa,
      0x65, 0x90, 0x42, 0x7a, 0x60, 0xa0, 0x42, 0xfa, 0x61, 0xb0, 0x42, 0x7a,
      0x63, 0xc0, 0x42, 0xfa, 0x67, 0xd0, 0x42, 0x7a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x65dfd3cd0d592d05));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x65b2085195906e3f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcb4e6ada8e8d321e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6539fe25b762a003));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xf >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xf >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xf >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xf >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xe >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xe >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xe >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xe >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65dfd3cd0d592d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65b2085195906e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb4e6ada8e8d321e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6539fe25b762a003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmnRegister) {
  std::vector<uint8_t> bytes = {
      0x69, 0x00, 0x42, 0xba, 0x68, 0x10, 0x42, 0x3a, 0x6b, 0x20, 0x42, 0xba,
      0x6a, 0x30, 0x42, 0x3a, 0x6f, 0x40, 0x42, 0xba, 0x6e, 0x50, 0x42, 0x3a,
      0x66, 0x60, 0x42, 0xba, 0x6d, 0x70, 0x42, 0x3a, 0x6c, 0x80, 0x42, 0xba,
      0x65, 0x90, 0x42, 0x3a, 0x60, 0xa0, 0x42, 0xba, 0x61, 0xb0, 0x42, 0x3a,
      0x63, 0xc0, 0x42, 0xba, 0x67, 0xd0, 0x42, 0x3a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa448517dcc6427f2));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xcbac26f765a97aad));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x01d961ee22133df4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1c8e14584557c2bb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xb >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xb >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xb >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xb >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xc >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xc >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xc >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xc >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa448517dcc6427f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbac26f765a97aad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d961ee22133df4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c8e14584557c2bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmpImmediate) {
  std::vector<uint8_t> bytes = {
      0x09, 0x08, 0x5f, 0xfa, 0x08, 0x18, 0x5e, 0x7a, 0x0b, 0x28, 0x5d, 0xfa,
      0x0a, 0x38, 0x5c, 0x7a, 0x0f, 0x48, 0x5b, 0xfa, 0x0e, 0x58, 0x5a, 0x7a,
      0x06, 0x68, 0x59, 0xfa, 0x0d, 0x78, 0x57, 0x7a, 0x0c, 0x88, 0x55, 0xfa,
      0x05, 0x98, 0x54, 0x7a, 0x00, 0xa8, 0x53, 0xfa, 0x01, 0xb8, 0x52, 0x7a,
      0x03, 0xc8, 0x41, 0xfa, 0x07, 0xd8, 0x40, 0x7a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3e4579ab219eb310));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd2d392808be4b311));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc1a27f603b959877));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xfccc4384a5050610));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3e4579ab219eb310));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2d392808be4b311));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a27f603b959877));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfccc4384a5050610));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmnImmediate) {
  std::vector<uint8_t> bytes = {
      0x09, 0x08, 0x5f, 0xba, 0x08, 0x18, 0x5e, 0x3a, 0x0b, 0x28, 0x5d, 0xba,
      0x0a, 0x38, 0x5c, 0x3a, 0x0f, 0x48, 0x5b, 0xba, 0x0e, 0x58, 0x5a, 0x3a,
      0x06, 0x68, 0x59, 0xba, 0x0d, 0x78, 0x57, 0x3a, 0x0c, 0x88, 0x55, 0xba,
      0x05, 0x98, 0x54, 0x3a, 0x00, 0xa8, 0x53, 0xba, 0x01, 0xb8, 0x52, 0x3a,
      0x03, 0xc8, 0x41, 0xba, 0x07, 0xd8, 0x40, 0x3a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0457988949dea7c4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1cf3542762b3db2f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcb67eab47f142731));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf8c5cbf2926b6b8d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xb >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xb >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xb >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xb >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xc >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xc >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xc >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xc >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0457988949dea7c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cf3542762b3db2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb67eab47f142731));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf8c5cbf2926b6b8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Csel) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x80, 0x9a, 0x22, 0x10, 0x80, 0x1a, 0x22, 0x20, 0x80, 0x9a,
      0x22, 0x30, 0x80, 0x1a, 0x22, 0x40, 0x80, 0x9a, 0x22, 0x50, 0x80, 0x1a,
      0x22, 0x60, 0x80, 0x9a, 0x22, 0x70, 0x80, 0x1a, 0x22, 0x80, 0x80, 0x9a,
      0x22, 0x90, 0x80, 0x1a, 0x22, 0xa0, 0x80, 0x9a, 0x22, 0xb0, 0x80, 0x1a,
      0x22, 0xc0, 0x80, 0x9a, 0x22, 0xd0, 0x80, 0x1a, 0x22, 0xe0, 0x80, 0x9a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x840754bef6e846f8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x07d286a7850f156b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x12bf1f5421577b3d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9a7c32b2fba270dd));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x840754bef6e846f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x07d286a7850f156b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a7c32b2fba270dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csinc) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x80, 0x9a, 0x22, 0x14, 0x80, 0x1a, 0x22, 0x24, 0x80, 0x9a,
      0x22, 0x34, 0x80, 0x1a, 0x22, 0x44, 0x80, 0x9a, 0x22, 0x54, 0x80, 0x1a,
      0x22, 0x64, 0x80, 0x9a, 0x22, 0x74, 0x80, 0x1a, 0x22, 0x84, 0x80, 0x9a,
      0x22, 0x94, 0x80, 0x1a, 0x22, 0xa4, 0x80, 0x9a, 0x22, 0xb4, 0x80, 0x1a,
      0x22, 0xc4, 0x80, 0x9a, 0x22, 0xd4, 0x80, 0x1a, 0x22, 0xe4, 0x80, 0x9a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa824908e1b89dad7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5ec44b213ac1cf17));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf07c51c9ee3aab62));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4a1e0d9b5f493c76));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa824908e1b89dad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001b89dad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa824908e1b89dad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001b89dad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001b89dad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa824908e1b89dad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa824908e1b89dad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa824908e1b89dad7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5ec44b213ac1cf17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a1e0d9b5f493c76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csinv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x80, 0xda, 0x22, 0x10, 0x80, 0x5a, 0x22, 0x20, 0x80, 0xda,
      0x22, 0x30, 0x80, 0x5a, 0x22, 0x40, 0x80, 0xda, 0x22, 0x50, 0x80, 0x5a,
      0x22, 0x60, 0x80, 0xda, 0x22, 0x70, 0x80, 0x5a, 0x22, 0x80, 0x80, 0xda,
      0x22, 0x90, 0x80, 0x5a, 0x22, 0xa0, 0x80, 0xda, 0x22, 0xb0, 0x80, 0x5a,
      0x22, 0xc0, 0x80, 0xda, 0x22, 0xd0, 0x80, 0x5a, 0x22, 0xe0, 0x80, 0xda,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcc388dbf5fc6d9bb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x90f034052a310a6e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4f414e5f7ecdd6e0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4f9245e765718ca0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a0392644));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x33c77240a0392644));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x33c77240a0392644));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a0392644));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x33c77240a0392644));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x33c77240a0392644));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x33c77240a0392644));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcc388dbf5fc6d9bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x90f034052a310a6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f9245e765718ca0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csneg) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x80, 0xda, 0x22, 0x14, 0x80, 0x5a, 0x22, 0x24, 0x80, 0xda,
      0x22, 0x34, 0x80, 0x5a, 0x22, 0x44, 0x80, 0xda, 0x22, 0x54, 0x80, 0x5a,
      0x22, 0x64, 0x80, 0xda, 0x22, 0x74, 0x80, 0x5a, 0x22, 0x84, 0x80, 0xda,
      0x22, 0x94, 0x80, 0x5a, 0x22, 0xa4, 0x80, 0xda, 0x22, 0xb4, 0x80, 0x5a,
      0x22, 0xc4, 0x80, 0xda, 0x22, 0xd4, 0x80, 0x5a, 0x22, 0xe4, 0x80, 0xda,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa660625b668269af));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x25c0352dc97a6ac8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf4b1b0b78cc6d28b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x349c3b4902c63e55));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x599f9da4997d9651));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x599f9da4997d9651));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000997d9651));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x599f9da4997d9651));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x599f9da4997d9651));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x599f9da4997d9651));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x599f9da4997d9651));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa660625b668269af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x25c0352dc97a6ac8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x349c3b4902c63e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Cset) {
  std::vector<uint8_t> bytes = {
      0xe2, 0x17, 0x9f, 0x9a, 0xe2, 0x07, 0x9f, 0x1a, 0xe2, 0x37, 0x9f, 0x9a,
      0xe2, 0x27, 0x9f, 0x1a, 0xe2, 0x57, 0x9f, 0x9a, 0xe2, 0x47, 0x9f, 0x1a,
      0xe2, 0x77, 0x9f, 0x9a, 0xe2, 0x67, 0x9f, 0x1a, 0xe2, 0x97, 0x9f, 0x9a,
      0xe2, 0x87, 0x9f, 0x1a, 0xe2, 0xb7, 0x9f, 0x9a, 0xe2, 0xa7, 0x9f, 0x1a,
      0xe2, 0xd7, 0x9f, 0x9a, 0xe2, 0xc7, 0x9f, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x78738f8963930114));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x729e76a325187073));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x46d5c3dfc6d1b9ef));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2fc056694f485779));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78738f8963930114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x729e76a325187073));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fc056694f485779));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Csetm) {
  std::vector<uint8_t> bytes = {
      0xe2, 0x13, 0x9f, 0xda, 0xe2, 0x03, 0x9f, 0x5a, 0xe2, 0x33, 0x9f, 0xda,
      0xe2, 0x23, 0x9f, 0x5a, 0xe2, 0x53, 0x9f, 0xda, 0xe2, 0x43, 0x9f, 0x5a,
      0xe2, 0x73, 0x9f, 0xda, 0xe2, 0x63, 0x9f, 0x5a, 0xe2, 0x93, 0x9f, 0xda,
      0xe2, 0x83, 0x9f, 0x5a, 0xe2, 0xb3, 0x9f, 0xda, 0xe2, 0xa3, 0x9f, 0x5a,
      0xe2, 0xd3, 0x9f, 0xda, 0xe2, 0xc3, 0x9f, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe0971da0299cb8d6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xec5cbc12db150b86));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc594912b4302b797));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd914c5bd1065872c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe0971da0299cb8d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec5cbc12db150b86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd914c5bd1065872c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cinc) {
  std::vector<uint8_t> bytes = {
      0x01, 0x14, 0x80, 0x9a, 0x01, 0x04, 0x80, 0x1a, 0x01, 0x34, 0x80, 0x9a,
      0x01, 0x24, 0x80, 0x1a, 0x01, 0x54, 0x80, 0x9a, 0x01, 0x44, 0x80, 0x1a,
      0x01, 0x74, 0x80, 0x9a, 0x01, 0x64, 0x80, 0x1a, 0x01, 0x94, 0x80, 0x9a,
      0x01, 0x84, 0x80, 0x1a, 0x01, 0xb4, 0x80, 0x9a, 0x01, 0xa4, 0x80, 0x1a,
      0x01, 0xd4, 0x80, 0x9a, 0x01, 0xc4, 0x80, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4aa883c954578f85));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x328b6390c6130224));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf5825a882e9e2d1f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcaec28bbbf190bbf));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4aa883c954578f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000054578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000054578f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000054578f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000054578f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000054578f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4aa883c954578f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000054578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4aa883c954578f85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000054578f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5825a882e9e2d1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcaec28bbbf190bbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cinv) {
  std::vector<uint8_t> bytes = {
      0x01, 0x10, 0x80, 0xda, 0x01, 0x00, 0x80, 0x5a, 0x01, 0x30, 0x80, 0xda,
      0x01, 0x20, 0x80, 0x5a, 0x01, 0x50, 0x80, 0xda, 0x01, 0x40, 0x80, 0x5a,
      0x01, 0x70, 0x80, 0xda, 0x01, 0x60, 0x80, 0x5a, 0x01, 0x90, 0x80, 0xda,
      0x01, 0x80, 0x80, 0x5a, 0x01, 0xb0, 0x80, 0xda, 0x01, 0xa0, 0x80, 0x5a,
      0x01, 0xd0, 0x80, 0xda, 0x01, 0xc0, 0x80, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc8f321c342e105d4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe90c6acdaadee0d1));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xedcb223c56b71e0a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x78857adb3a6b9d76));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000bd1efa2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000bd1efa2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000bd1efa2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000bd1efa2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000bd1efa2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x370cde3cbd1efa2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000042e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x370cde3cbd1efa2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8f321c342e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000042e105d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xedcb223c56b71e0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x78857adb3a6b9d76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cneg) {
  std::vector<uint8_t> bytes = {
      0x01, 0x14, 0x80, 0xda, 0x01, 0x04, 0x80, 0x5a, 0x01, 0x34, 0x80, 0xda,
      0x01, 0x24, 0x80, 0x5a, 0x01, 0x54, 0x80, 0xda, 0x01, 0x44, 0x80, 0x5a,
      0x01, 0x74, 0x80, 0xda, 0x01, 0x64, 0x80, 0x5a, 0x01, 0x94, 0x80, 0xda,
      0x01, 0x84, 0x80, 0x5a, 0x01, 0xb4, 0x80, 0xda, 0x01, 0xa4, 0x80, 0x5a,
      0x01, 0xd4, 0x80, 0xda, 0x01, 0xc4, 0x80, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x02f51b88366ecbe5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0c2ef30a0206b7f9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1d10eea5cbcfbb47));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9ac64b017579f769));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000c991341b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfd0ae477c991341b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000c991341b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfd0ae477c991341b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfd0ae477c991341b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000c991341b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x02f51b88366ecbe5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000c991341b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d10eea5cbcfbb47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ac64b017579f769));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Sdiv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x0c, 0xc0, 0x9a, 0x22, 0x0c, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x927292e92665a1ad));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x97eb1143b663aeb7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x3aed99c50b7b09b7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcfb4dbc607d5ee50));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x927292e92665a1ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97eb1143b663aeb7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcfb4dbc607d5ee50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x927292e92665a1ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97eb1143b663aeb7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcfb4dbc607d5ee50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Udiv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x08, 0xc0, 0x9a, 0x22, 0x08, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x64150fbb9e1a6b0b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb8c846528b9e3b23));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xea66d981bf42b7aa));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x247bc9d3919c521b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x64150fbb9e1a6b0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8c846528b9e3b23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x247bc9d3919c521b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x64150fbb9e1a6b0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8c846528b9e3b23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x247bc9d3919c521b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Lslv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x20, 0xc0, 0x9a, 0x22, 0x20, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x74c40537cac7b521));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x89627e06fb29971d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6fcebddc3085b5f6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdb2cc4fb34a1ff7d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x74c40537cac7b521));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89627e06fb29971d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf6532e3a00000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb2cc4fb34a1ff7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x74c40537cac7b521));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89627e06fb29971d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f6532e3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb2cc4fb34a1ff7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Lsrv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x24, 0xc0, 0x9a, 0x22, 0x24, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xce07c76c5bc068a6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbaea3abbf82a3fe4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfb73d7dfa0bb6dcd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7ae09eb685ec4817));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xce07c76c5bc068a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbaea3abbf82a3fe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000002eba8ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ae09eb685ec4817));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xce07c76c5bc068a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbaea3abbf82a3fe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000003e0a8ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ae09eb685ec4817));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Asrv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x28, 0xc0, 0x9a, 0x22, 0x28, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x041cfb1ea7e68297));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xde45eb44e51ed924));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x180e8946b2e64886));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0421f7aafa2625a2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x041cfb1ea7e68297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xde45eb44e51ed924));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffbc8bd689ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0421f7aafa2625a2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x041cfb1ea7e68297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xde45eb44e51ed924));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0421f7aafa2625a2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rorv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x2c, 0xc0, 0x9a, 0x22, 0x2c, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb298c8b1e25c8a0c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x332bc94be53a8c19));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x920f613ea44501ff));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcd31dcaa2ee80e69));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb298c8b1e25c8a0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x332bc94be53a8c19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc19332bc94be53a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcd31dcaa2ee80e69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb298c8b1e25c8a0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x332bc94be53a8c19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c19e53a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcd31dcaa2ee80e69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rbit) {
  std::vector<uint8_t> bytes = {
      0x01, 0x00, 0xc0, 0xda, 0x01, 0x00, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x37ff7293bcae555b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7e04790a7ba420a5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5a171c3e7c41f654));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3c6cb273ab9bd77c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37ff7293bcae555b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdaaa753dc94effec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5a171c3e7c41f654));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3c6cb273ab9bd77c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37ff7293bcae555b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000daaa753d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5a171c3e7c41f654));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3c6cb273ab9bd77c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rev16) {
  std::vector<uint8_t> bytes = {
      0x01, 0x04, 0xc0, 0xda, 0x01, 0x04, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8d86b884e78f25e4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xfe04e44724433861));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa758f841347cbe79));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xfdb0105a68a8c218));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8d86b884e78f25e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x868d84b88fe7e425));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa758f841347cbe79));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfdb0105a68a8c218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8d86b884e78f25e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000008fe7e425));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa758f841347cbe79));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfdb0105a68a8c218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rev32) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x08,
      0xc0,
      0xda,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4fbddbdda429befc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2146373be6fd8768));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1c620093952510a3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x69c5f0fe78c3a913));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4fbddbdda429befc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdddbbd4ffcbe29a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1c620093952510a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69c5f0fe78c3a913));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Rev) {
  std::vector<uint8_t> bytes = {
      0x01, 0x0c, 0xc0, 0xda, 0x01, 0x08, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4d69232d934fbf77));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x788c0f25fb479ddc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1221a91a129c836a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd5666c68fb28b516));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4d69232d934fbf77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x77bf4f932d23694d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1221a91a129c836a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd5666c68fb28b516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4d69232d934fbf77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000077bf4f93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1221a91a129c836a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd5666c68fb28b516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Clz) {
  std::vector<uint8_t> bytes = {
      0x01, 0x10, 0xc0, 0xda, 0x01, 0x10, 0xc0, 0x5a, 0xe0, 0x03,
      0x1f, 0xaa, 0x01, 0x10, 0xc0, 0xda, 0x01, 0x10, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x05aa3d69efe8d8c1));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3fc798f720d7acaa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xac9697c7b0fedb55));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbdb2131430550dd0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x05aa3d69efe8d8c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000005));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xac9697c7b0fedb55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdb2131430550dd0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x05aa3d69efe8d8c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xac9697c7b0fedb55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdb2131430550dd0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xac9697c7b0fedb55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdb2131430550dd0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xac9697c7b0fedb55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdb2131430550dd0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xac9697c7b0fedb55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdb2131430550dd0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, Cls) {
  std::vector<uint8_t> bytes = {
      0x01, 0x14, 0xc0, 0xda, 0x01, 0x14, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6e6a186c253bc8ba));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1dbf9256de327f2f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa66f1e400bd89304));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb9bd2e09e048006b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6e6a186c253bc8ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa66f1e400bd89304));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb9bd2e09e048006b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6e6a186c253bc8ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa66f1e400bd89304));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb9bd2e09e048006b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Madd) {
  std::vector<uint8_t> bytes = {
      0x43, 0x00, 0x01, 0x9b, 0x43, 0x00, 0x01, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2bc51249a541c3b1));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x468eab4a7757bf80));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe1c1113f192b2dbb));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7015e21948bbcddf));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2bc51249a541c3b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x468eab4a7757bf80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1c1113f192b2dbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe7118699e9842631));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2bc51249a541c3b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x468eab4a7757bf80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1c1113f192b2dbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x00000000e9842631));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Mul) {
  std::vector<uint8_t> bytes = {
      0x22, 0x7c, 0x00, 0x9b, 0x22, 0x7c, 0x00, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x88515e343afbb3c5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2d4e2aeb419e8f24));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb99d2c7fb408eb94));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x788834f9f3f97d9d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x88515e343afbb3c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2d4e2aeb419e8f24));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xddd9141fdd6652b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x788834f9f3f97d9d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x88515e343afbb3c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2d4e2aeb419e8f24));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000dd6652b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x788834f9f3f97d9d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Msub) {
  std::vector<uint8_t> bytes = {
      0x43, 0x80, 0x01, 0x9b, 0x43, 0x80, 0x01, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xac3b06202bef5e64));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc0f6ee718c627e04));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1652f392e6987d5a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3100fe525da3ff80));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac3b06202bef5e64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0f6ee718c627e04));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1652f392e6987d5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x68603eae4f671cfc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac3b06202bef5e64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0f6ee718c627e04));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1652f392e6987d5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x000000004f671cfc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Mneg) {
  std::vector<uint8_t> bytes = {
      0x22, 0xfc, 0x00, 0x9b, 0x22, 0xfc, 0x00, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe23dd1fffd8a2288));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x931e7de4099989ef));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xed389b751469bc8a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe19dd0f3004ac9b2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23dd1fffd8a2288));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x931e7de4099989ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb2b676df446fb08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe19dd0f3004ac9b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23dd1fffd8a2288));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x931e7de4099989ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f446fb08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe19dd0f3004ac9b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Smaddl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x00,
      0x21,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9cedae8d7d30ab63));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xfc26aa486d4782fc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x84b0685a94bdee32));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xceaafe0ba560e5c3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9cedae8d7d30ab63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfc26aa486d4782fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x84b0685a94bdee32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f2496c4b4fa889b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smull) {
  std::vector<uint8_t> bytes = {
      0x22,
      0x7c,
      0x20,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5690d7282a44c5ba));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb840f91de9d7cddd));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x69bd13afb24a511c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9cfec66fab7eac67));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5690d7282a44c5ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb840f91de9d7cddd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfc5773fbe8eaa392));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9cfec66fab7eac67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smsubl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x80,
      0x21,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x478f8e3931af4e88));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x991056b642dc203d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4c43f51b67d29b41));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9d878d70524e4456));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x478f8e3931af4e88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x991056b642dc203d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4c43f51b67d29b41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2c71fc21f33c300b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smnegl) {
  std::vector<uint8_t> bytes = {
      0x22,
      0xfc,
      0x20,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x97c1fa5763ebbe33));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbc6f31568edef5da));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb4d7d7b14fc8cb19));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd447f9e506f05eda));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x97c1fa5763ebbe33));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc6f31568edef5da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2c27f44e11ff3992));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd447f9e506f05eda));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smulh) {
  std::vector<uint8_t> bytes = {
      0x22,
      0x7c,
      0x40,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x88e5a3ff0096975c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x592501f2bff4f6bb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xac117477c9e763f7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xec4645c1fb98fd87));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x88e5a3ff0096975c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x592501f2bff4f6bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd6869e4c5079d3e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xec4645c1fb98fd87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umaddl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x00,
      0xa1,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe95dc6e6c86e1806));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5866ca3768d440e8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcf3d8f1a0e9c811e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5dc6b1b144499537));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe95dc6e6c86e1806));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5866ca3768d440e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcf3d8f1a0e9c811e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xef5978aa43629b36));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umull) {
  std::vector<uint8_t> bytes = {
      0x22,
      0x7c,
      0xa0,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2491889bdf5c0eb3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x389dac561b3fe00b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe64f99aeada4e9f2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x59cc384585315a55));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2491889bdf5c0eb3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x389dac561b3fe00b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x17c670aea4de41b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x59cc384585315a55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umsubl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x80,
      0xa1,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcfa16d65e8003a99));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4494ea11f5788632));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x029b32f05abf73d2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x22c714aec1a91982));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcfa16d65e8003a99));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4494ea11f5788632));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x029b32f05abf73d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x789d7a3db38baf95));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umnegl) {
  std::vector<uint8_t> bytes = {
      0x22,
      0xfc,
      0xa0,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x40a1c71be5416b79));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb0c12873d333d80a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x41017414782aca0f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa7652cf0019f60cb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x40a1c71be5416b79));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb0c12873d333d80a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x42dca6eab4a8b546));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa7652cf0019f60cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, AndShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x0a, 0x22, 0x24, 0x40, 0x0a, 0x22, 0x04, 0x80,
      0x0a, 0x22, 0x30, 0xc0, 0x0a, 0x22, 0x44, 0x00, 0x8a, 0x22, 0x24,
      0x40, 0x8a, 0x22, 0x94, 0x80, 0x8a, 0x22, 0xd4, 0xc0, 0x8a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x231b0852e3bfee6e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2700f4c458f89f67));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x22ffe6ef04906afd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x85b467cacede6107));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x231b0852e3bfee6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2700f4c458f89f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000058d80000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x85b467cacede6107));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x231b0852e3bfee6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2700f4c458f89f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000709f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x85b467cacede6107));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x231b0852e3bfee6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2700f4c458f89f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000050d89727));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x85b467cacede6107));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x231b0852e3bfee6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2700f4c458f89f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000040e81b66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x85b467cacede6107));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x231b0852e3bfee6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2700f4c458f89f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000c44458d80000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x85b467cacede6107));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x231b0852e3bfee6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2700f4c458f89f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000848408709f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x85b467cacede6107));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x231b0852e3bfee6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2700f4c458f89f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000189842));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x85b467cacede6107));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x231b0852e3bfee6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2700f4c458f89f67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000940458701100));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x85b467cacede6107));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, BicShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x0a, 0x22, 0x24, 0x60, 0x0a, 0x22, 0x04, 0xa0,
      0x0a, 0x22, 0x30, 0xe0, 0x0a, 0x22, 0x44, 0x20, 0x8a, 0x22, 0x24,
      0x60, 0x8a, 0x22, 0x94, 0xa0, 0x8a, 0x22, 0xd4, 0xe0, 0x8a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x52c41e2f22ee7583));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x53bf3019af31530a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x594d709833d2ff9b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x61e4cb1d234aa620));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52c41e2f22ee7583));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53bf3019af31530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000431530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x61e4cb1d234aa620));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52c41e2f22ee7583));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53bf3019af31530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000af200000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x61e4cb1d234aa620));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52c41e2f22ee7583));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53bf3019af31530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ae00410a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x61e4cb1d234aa620));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52c41e2f22ee7583));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53bf3019af31530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a7015108));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x61e4cb1d234aa620));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52c41e2f22ee7583));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53bf3019af31530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x43a130010431530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x61e4cb1d234aa620));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52c41e2f22ee7583));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53bf3019af31530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53961010a8200000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x61e4cb1d234aa620));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52c41e2f22ee7583));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53bf3019af31530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53bf3019ad21530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x61e4cb1d234aa620));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52c41e2f22ee7583));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53bf3019af31530a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x530e00088c114108));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x61e4cb1d234aa620));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, OrrShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x2a, 0x22, 0x24, 0x40, 0x2a, 0x22, 0x04, 0x80,
      0x2a, 0x22, 0x30, 0xc0, 0x2a, 0x22, 0x44, 0x00, 0xaa, 0x22, 0x24,
      0x40, 0xaa, 0x22, 0x94, 0x80, 0xaa, 0x22, 0xd4, 0xc0, 0xaa,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2c41d23ca46aabbf));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa07dcda94bac52ec));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xbb3d508c48462861));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x71d3689969a54e3a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c41d23ca46aabbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa07dcda94bac52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005ffe52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71d3689969a54e3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c41d23ca46aabbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa07dcda94bac52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000004bfe77fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71d3689969a54e3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c41d23ca46aabbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa07dcda94bac52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000dbbd57ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71d3689969a54e3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c41d23ca46aabbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa07dcda94bac52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fbfe56ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71d3689969a54e3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c41d23ca46aabbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa07dcda94bac52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa47dcdfd5ffe52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71d3689969a54e3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c41d23ca46aabbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa07dcda94bac52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa07fede95ffe77fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71d3689969a54e3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c41d23ca46aabbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa07dcda94bac52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa07dcda94bee5efd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71d3689969a54e3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c41d23ca46aabbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa07dcda94bac52ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xaefdedab5ffdfbee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71d3689969a54e3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, MovShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x03, 0x00, 0xaa, 0xe1, 0x03, 0x00, 0x2a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x27a2902c9ece16c4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x04ae627dfe74919e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x935dff930cb7f42c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xac0119aae65ace17));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x27a2902c9ece16c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x27a2902c9ece16c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x935dff930cb7f42c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac0119aae65ace17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x27a2902c9ece16c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000009ece16c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x935dff930cb7f42c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac0119aae65ace17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, OrnShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x2a, 0x22, 0x24, 0x60, 0x2a, 0x22, 0x04, 0xa0,
      0x2a, 0x22, 0x30, 0xe0, 0x2a, 0x22, 0x44, 0x20, 0xaa, 0x22, 0x24,
      0x60, 0xaa, 0x22, 0x94, 0xa0, 0xaa, 0x22, 0xd4, 0xe0, 0xaa,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x37a0c5b2211b6f21));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xac24d8298e004e21));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4ab8b6bd78c3c0d6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdd63afe3df29792e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37a0c5b2211b6f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac24d8298e004e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000afbdffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd63afe3df29792e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37a0c5b2211b6f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac24d8298e004e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffef7e69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd63afe3df29792e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37a0c5b2211b6f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac24d8298e004e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ef724e6f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd63afe3df29792e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37a0c5b2211b6f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac24d8298e004e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008fedee69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd63afe3df29792e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37a0c5b2211b6f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac24d8298e004e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfcbffde9afbdffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd63afe3df29792e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37a0c5b2211b6f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac24d8298e004e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffe4ffbdaeef7e69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd63afe3df29792e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37a0c5b2211b6f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac24d8298e004e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfffffffffe42fff3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd63afe3df29792e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x37a0c5b2211b6f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac24d8298e004e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfdf6feffae86fe63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd63afe3df29792e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, MvnShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x03, 0x20, 0xaa, 0xe1, 0x03, 0x20, 0x2a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2df82ab115774f87));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5486fd6214b29627));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xebff86dcf4508a06));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x24a386f374c8b894));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2df82ab115774f87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd207d54eea88b078));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xebff86dcf4508a06));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x24a386f374c8b894));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2df82ab115774f87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ea88b078));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xebff86dcf4508a06));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x24a386f374c8b894));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, EorShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x4a, 0x22, 0x24, 0x40, 0x4a, 0x22, 0x04, 0x80,
      0x4a, 0x22, 0x30, 0xc0, 0x4a, 0x22, 0x44, 0x00, 0xca, 0x22, 0x24,
      0x40, 0xca, 0x22, 0x94, 0x80, 0xca, 0x22, 0xd4, 0xc0, 0xca,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x80a8ba18fc03561b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x89e66b3ee42f0ccc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4a0e83cac56927fe));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb46f1635f5959f2b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x80a8ba18fc03561b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89e66b3ee42f0ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000048190ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb46f1635f5959f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x80a8ba18fc03561b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89e66b3ee42f0ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e4510d67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb46f1635f5959f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x80a8ba18fc03561b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89e66b3ee42f0ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001a2ea7c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb46f1635f5959f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x80a8ba18fc03561b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89e66b3ee42f0ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008590ccf9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb46f1635f5959f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x80a8ba18fc03561b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89e66b3ee42f0ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfdd7933848190ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb46f1635f5959f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x80a8ba18fc03561b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89e66b3ee42f0ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89a63f63e8510d67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb46f1635f5959f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x80a8ba18fc03561b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89e66b3ee42f0ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x761994c1182a491c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb46f1635f5959f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x80a8ba18fc03561b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x89e66b3ee42f0ccc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcc36acdefe9fd0c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb46f1635f5959f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, EonShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x4a, 0x22, 0x24, 0x60, 0x4a, 0x22, 0x04, 0xa0,
      0x4a, 0x22, 0x30, 0xe0, 0x4a, 0x22, 0x44, 0x20, 0xca, 0x22, 0x24,
      0x60, 0xca, 0x22, 0x94, 0xa0, 0xca, 0x22, 0xd4, 0xe0, 0xca,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x19cc6a58dbf3e393));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdf4b38ddb4970e44));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf2bc9ac93faa8671));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7d787609d81cc8eb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19cc6a58dbf3e393));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdf4b38ddb4970e44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008c4ef1bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7d787609d81cc8eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19cc6a58dbf3e393));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdf4b38ddb4970e44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000004b05084a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7d787609d81cc8eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19cc6a58dbf3e393));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdf4b38ddb4970e44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a6910072));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7d787609d81cc8eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19cc6a58dbf3e393));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdf4b38ddb4970e44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000072554e85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7d787609d81cc8eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19cc6a58dbf3e393));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdf4b38ddb4970e44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf40570c58c4ef1bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7d787609d81cc8eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19cc6a58dbf3e393));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdf4b38ddb4970e44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x20b821176705084a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7d787609d81cc8eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19cc6a58dbf3e393));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdf4b38ddb4970e44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x20b4c7224ba692e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7d787609d81cc8eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19cc6a58dbf3e393));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdf4b38ddb4970e44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x43e601fdd4746975));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7d787609d81cc8eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, AndsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x6a, 0x22, 0x24, 0x40, 0x6a, 0x22, 0x04, 0x80,
      0x6a, 0x22, 0x30, 0xc0, 0x6a, 0x22, 0x44, 0x00, 0xea, 0x22, 0x24,
      0x40, 0xea, 0x22, 0x94, 0x80, 0xea, 0x22, 0xd4, 0xc0, 0xea,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x53163a0e5d466da4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x05da62ab3155df63));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x52fdb251392516ad));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7643d52170c8d6ce));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x53163a0e5d466da4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x05da62ab3155df63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000011400000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7643d52170c8d6ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x53163a0e5d466da4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x05da62ab3155df63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000048322));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7643d52170c8d6ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x53163a0e5d466da4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x05da62ab3155df63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000020011642));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7643d52170c8d6ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x53163a0e5d466da4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x05da62ab3155df63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001045d462));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7643d52170c8d6ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x53163a0e5d466da4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x05da62ab3155df63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0418228811400000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7643d52170c8d6ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x53163a0e5d466da4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x05da62ab3155df63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0008020901048322));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7643d52170c8d6ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x53163a0e5d466da4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x05da62ab3155df63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000109140));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7643d52170c8d6ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x53163a0e5d466da4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x05da62ab3155df63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x01d062aa31450200));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7643d52170c8d6ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, BicsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x6a, 0x22, 0x24, 0x60, 0x6a, 0x22, 0x04, 0xa0,
      0x6a, 0x22, 0x30, 0xe0, 0x6a, 0x22, 0x44, 0x20, 0xea, 0x22, 0x24,
      0x60, 0xea, 0x22, 0x94, 0xa0, 0xea, 0x22, 0xd4, 0xe0, 0xea,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x56e6cbe60a2a6c87));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xaadd4d7e6c6cfd1f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf2e8a305d0fecb0a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x183b033d2e47eac4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56e6cbe60a2a6c87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaadd4d7e6c6cfd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002460fd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x183b033d2e47eac4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56e6cbe60a2a6c87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaadd4d7e6c6cfd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006c68e809));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x183b033d2e47eac4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56e6cbe60a2a6c87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaadd4d7e6c6cfd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006868c91c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x183b033d2e47eac4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56e6cbe60a2a6c87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaadd4d7e6c6cfd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000240c5d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x183b033d2e47eac4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56e6cbe60a2a6c87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaadd4d7e6c6cfd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2811492a2460fd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x183b033d2e47eac4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56e6cbe60a2a6c87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaadd4d7e6c6cfd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xaad40c1a0c68e809));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x183b033d2e47eac4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56e6cbe60a2a6c87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaadd4d7e6c6cfd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xaadd4d7e6c48c900));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x183b033d2e47eac4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56e6cbe60a2a6c87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaadd4d7e6c6cfd1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x88804d2e2c08c508));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x183b033d2e47eac4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, AddShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x0b, 0x22, 0x24, 0x40, 0x0b, 0x22, 0x04, 0x80, 0x0b,
      0x22, 0x44, 0x00, 0x8b, 0x22, 0x24, 0x40, 0x8b, 0x22, 0x94, 0x80, 0x8b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x97b5b3a40dedd0eb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x96e2ce9199e8bb77));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9f9cca78fd43a7ed));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd2a31c02c8b94d53));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x97b5b3a40dedd0eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96e2ce9199e8bb77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003bbebb77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd2a31c02c8b94d53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x97b5b3a40dedd0eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96e2ce9199e8bb77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000099efb25f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd2a31c02c8b94d53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x97b5b3a40dedd0eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96e2ce9199e8bb77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a0dfa3ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd2a31c02c8b94d53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x97b5b3a40dedd0eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96e2ce9199e8bb77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe2aea6d3bbebb77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd2a31c02c8b94d53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x97b5b3a40dedd0eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96e2ce9199e8bb77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x972ea96b6befb25f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd2a31c02c8b94d53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x97b5b3a40dedd0eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96e2ce9199e8bb77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x96e2ce9196a66914));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd2a31c02c8b94d53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, AddsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x2b, 0x22, 0x24, 0x40, 0x2b, 0x22, 0x04, 0x80, 0x2b,
      0x22, 0x44, 0x00, 0xab, 0x22, 0x24, 0x40, 0xab, 0x22, 0x94, 0x80, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x83593c3f87339c88));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x69b32a2376568284));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9d8ec4b7fc5ebe0c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5ca4733705c4e128));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x83593c3f87339c88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x69b32a2376568284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000af668284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ca4733705c4e128));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x83593c3f87339c88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x69b32a2376568284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000769a1c52));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ca4733705c4e128));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x83593c3f87339c88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x69b32a2376568284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000039f050c8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ca4733705c4e128));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x83593c3f87339c88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x69b32a2376568284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe232388aaf668284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ca4733705c4e128));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x83593c3f87339c88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x69b32a2376568284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x69f4d6c1961a1c52));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ca4733705c4e128));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x83593c3f87339c88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x69b32a2376568284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x69b32a2372714c65));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ca4733705c4e128));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, CmnShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x44, 0x00, 0x2b, 0x3f, 0x24, 0x40, 0x2b, 0x3f, 0x04, 0x80, 0x2b,
      0x3f, 0x44, 0x00, 0xab, 0x3f, 0x24, 0x40, 0xab, 0x3f, 0x94, 0x80, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc40a3eaed13eeb66));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc1efcb0203c8b6e8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4eda4eb0791d068b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x90397bc0fe439ae3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc40a3eaed13eeb66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1efcb0203c8b6e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4eda4eb0791d068b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x90397bc0fe439ae3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc40a3eaed13eeb66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1efcb0203c8b6e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4eda4eb0791d068b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x90397bc0fe439ae3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc40a3eaed13eeb66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1efcb0203c8b6e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4eda4eb0791d068b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x90397bc0fe439ae3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc40a3eaed13eeb66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1efcb0203c8b6e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4eda4eb0791d068b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x90397bc0fe439ae3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc40a3eaed13eeb66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1efcb0203c8b6e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4eda4eb0791d068b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x90397bc0fe439ae3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc40a3eaed13eeb66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1efcb0203c8b6e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4eda4eb0791d068b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x90397bc0fe439ae3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, SubShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x4b, 0x22, 0x24, 0x40, 0x4b, 0x22, 0x04, 0x80, 0x4b,
      0x22, 0x44, 0x00, 0xcb, 0x22, 0x24, 0x40, 0xcb, 0x22, 0x94, 0x80, 0xcb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x182930029a04cc8b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc546189318766abe));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf1b46b5cfa0bf8df));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdcf67c639dfe7703));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x182930029a04cc8b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc546189318766abe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000007f606abe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdcf67c639dfe7703));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x182930029a04cc8b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc546189318766abe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000018296858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdcf67c639dfe7703));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x182930029a04cc8b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc546189318766abe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000004b740479));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdcf67c639dfe7703));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x182930029a04cc8b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc546189318766abe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6540e4897f606abe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdcf67c639dfe7703));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x182930029a04cc8b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc546189318766abe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc53a03fb17296858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdcf67c639dfe7703));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x182930029a04cc8b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc546189318766abe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc546189317b5213e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdcf67c639dfe7703));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, NegShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x47, 0x00, 0x4b, 0xe1, 0x27, 0x40, 0x4b, 0xe1, 0x07, 0x80, 0x4b,
      0xe1, 0x47, 0x00, 0xcb, 0xe1, 0x27, 0x40, 0xcb, 0xe1, 0x97, 0x80, 0xcb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6f23a176df56c771));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2cc8f36ef9d4477a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc452cdd37a34f7b4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc54655f3e9d11bc5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f23a176df56c771));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000711e0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc452cdd37a34f7b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc54655f3e9d11bc5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f23a176df56c771));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ff90549d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc452cdd37a34f7b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc54655f3e9d11bc5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f23a176df56c771));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000010549c48));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc452cdd37a34f7b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc54655f3e9d11bc5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f23a176df56c771));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbd124152711e0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc452cdd37a34f7b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc54655f3e9d11bc5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f23a176df56c771));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffc86e2f4490549d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc452cdd37a34f7b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc54655f3e9d11bc5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f23a176df56c771));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfffffffffc86e2f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc452cdd37a34f7b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc54655f3e9d11bc5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, SubsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x6b, 0x22, 0x24, 0x40, 0x6b, 0x22, 0x04, 0x80, 0x6b,
      0x22, 0x44, 0x00, 0xeb, 0x22, 0x24, 0x40, 0xeb, 0x22, 0x94, 0x80, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8526ff499cbb52cb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe4b46a7a40cb1faa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2d74e873c80084bc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x06219687b91c016c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8526ff499cbb52cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe4b46a7a40cb1faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000009b351faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x06219687b91c016c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8526ff499cbb52cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe4b46a7a40cb1faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000407cc201));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x06219687b91c016c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8526ff499cbb52cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe4b46a7a40cb1faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000726d7645));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x06219687b91c016c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8526ff499cbb52cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe4b46a7a40cb1faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe62131039b351faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x06219687b91c016c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8526ff499cbb52cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe4b46a7a40cb1faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe471d6fa9bfcc201));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x06219687b91c016c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8526ff499cbb52cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe4b46a7a40cb1faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b46a7a44a1e7b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x06219687b91c016c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, CmpShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x44, 0x00, 0x6b, 0x3f, 0x24, 0x40, 0x6b, 0x3f, 0x04, 0x80, 0x6b,
      0x3f, 0x44, 0x00, 0xeb, 0x3f, 0x24, 0x40, 0xeb, 0x3f, 0x94, 0x80, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7b973430df977229));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc0f544d0a12c7b68));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x65b3082fa1e48b88));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x061d0b266eae235c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7b973430df977229));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0f544d0a12c7b68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x65b3082fa1e48b88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x061d0b266eae235c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7b973430df977229));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0f544d0a12c7b68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x65b3082fa1e48b88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x061d0b266eae235c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7b973430df977229));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0f544d0a12c7b68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x65b3082fa1e48b88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x061d0b266eae235c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7b973430df977229));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0f544d0a12c7b68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x65b3082fa1e48b88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x061d0b266eae235c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7b973430df977229));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0f544d0a12c7b68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x65b3082fa1e48b88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x061d0b266eae235c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7b973430df977229));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0f544d0a12c7b68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x65b3082fa1e48b88));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x061d0b266eae235c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, NegsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x47, 0x00, 0x6b, 0xe1, 0x27, 0x40, 0x6b, 0xe1, 0x07, 0x80, 0x6b,
      0xe1, 0x47, 0x00, 0xeb, 0xe1, 0x27, 0x40, 0xeb, 0xe1, 0x97, 0x80, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x561345aab505b2b0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x62e5082e01fd56ea));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9b3c339f307c7204));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x73f8feefe4fef87f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x561345aab505b2b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000009aa00000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9b3c339f307c7204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x73f8feefe4fef87f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x561345aab505b2b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffa57d27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9b3c339f307c7204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x73f8feefe4fef87f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x561345aab505b2b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000257d26a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9b3c339f307c7204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x73f8feefe4fef87f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x561345aab505b2b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x74aa95f49aa00000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9b3c339f307c7204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x73f8feefe4fef87f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x561345aab505b2b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffd4f65d2aa57d27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9b3c339f307c7204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x73f8feefe4fef87f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x561345aab505b2b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfffffffffd4f65d3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9b3c339f307c7204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x73f8feefe4fef87f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, AddExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x0b, 0x22, 0x28, 0x20, 0x0b, 0x22, 0x4c, 0x20,
      0x0b, 0x22, 0x70, 0x20, 0x0b, 0x22, 0x84, 0x20, 0x0b, 0x22, 0xa8,
      0x20, 0x0b, 0x22, 0xcc, 0x20, 0x0b, 0x22, 0xec, 0x20, 0x0b, 0x22,
      0x04, 0x20, 0x8b, 0x22, 0x28, 0x20, 0x8b, 0x22, 0x4c, 0x20, 0x8b,
      0x22, 0x70, 0x20, 0x8b, 0x22, 0x84, 0x20, 0x8b, 0x22, 0xa8, 0x20,
      0x8b, 0x22, 0xcc, 0x20, 0x8b, 0x22, 0xec, 0x20, 0x8b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x19b65758900462f9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6ccf2b20d9fbb1cf));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfb63296bb9a827e5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0415653d36700761));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d9fbb3c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d9fd3db3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005a1ec997));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000da41e15f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d9fbb1c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d9fd3db3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005a1ec997));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005a1ec997));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6ccf2b20d9fbb3c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6ccf2b20d9fd3db3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6ccf2b255a1ec997));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0834a0a9da41e15f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6ccf2b20d9fbb1c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6ccf2b20d9fd3db3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6ccf2b1d5a1ec997));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x19b65758900462f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6ccf2b20d9fbb1cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x3a81e5e55a1ec997));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0415653d36700761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, AddsExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x2b, 0x22, 0x28, 0x20, 0x2b, 0x22, 0x4c, 0x20,
      0x2b, 0x22, 0x70, 0x20, 0x2b, 0x22, 0x84, 0x20, 0x2b, 0x22, 0xa8,
      0x20, 0x2b, 0x22, 0xcc, 0x20, 0x2b, 0x22, 0xec, 0x20, 0x2b, 0x22,
      0x04, 0x20, 0xab, 0x22, 0x28, 0x20, 0xab, 0x22, 0x4c, 0x20, 0xab,
      0x22, 0x70, 0x20, 0xab, 0x22, 0x84, 0x20, 0xab, 0x22, 0xa8, 0x20,
      0xab, 0x22, 0xcc, 0x20, 0xab, 0x22, 0xec, 0x20, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x32ea75e2cc31ad55));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x53e81e6876dbed9a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5374d99729c411fe));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x67ce7a0b61ac3937));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000076dbee44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000076dea2ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d8695842));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000039f6c2ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000076dbee44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000076daa2ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d8695842));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d8695842));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53e81e6876dbee44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53e81e6876dea2ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53e81e6ed8695842));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x828f7c9539f6c2ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53e81e6876dbee44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53e81e6876daa2ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53e81e66d8695842));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32ea75e2cc31ad55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53e81e6876dbed9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xeb3bcd7ed8695842));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x67ce7a0b61ac3937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, CmnExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x04, 0x20, 0x2b, 0x3f, 0x28, 0x20, 0x2b, 0x3f, 0x4c, 0x20,
      0x2b, 0x3f, 0x70, 0x20, 0x2b, 0x3f, 0x84, 0x20, 0x2b, 0x3f, 0xa8,
      0x20, 0x2b, 0x3f, 0xcc, 0x20, 0x2b, 0x3f, 0xec, 0x20, 0x2b, 0x3f,
      0x04, 0x20, 0xab, 0x3f, 0x28, 0x20, 0xab, 0x3f, 0x4c, 0x20, 0xab,
      0x3f, 0x70, 0x20, 0xab, 0x3f, 0x84, 0x20, 0xab, 0x3f, 0xa8, 0x20,
      0xab, 0x3f, 0xcc, 0x20, 0xab, 0x3f, 0xec, 0x20, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5494db0430787dd4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf342026e0bd5369b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2f298bda0eda4cd1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4d71131f399a1aae));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5494db0430787dd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf342026e0bd5369b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f298bda0eda4cd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d71131f399a1aae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, SubExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x4b, 0x22, 0x28, 0x20, 0x4b, 0x22, 0x4c, 0x20,
      0x4b, 0x22, 0x70, 0x20, 0x4b, 0x22, 0x84, 0x20, 0x4b, 0x22, 0xa8,
      0x20, 0x4b, 0x22, 0xcc, 0x20, 0x4b, 0x22, 0xec, 0x20, 0x4b, 0x22,
      0x04, 0x20, 0xcb, 0x22, 0x28, 0x20, 0xcb, 0x22, 0x4c, 0x20, 0xcb,
      0x22, 0x70, 0x20, 0xcb, 0x22, 0x84, 0x20, 0xcb, 0x22, 0xa8, 0x20,
      0xcb, 0x22, 0xcc, 0x20, 0xcb, 0x22, 0xec, 0x20, 0xcb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe427b644a2094e8f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x80f2ca456428a90f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb43a107121b9c1f7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x081861cd3800fa53));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006428a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000064276ed3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000053de3497));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000004393c01f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006428a9f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000064276ed3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000053de3497));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000053de3497));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80f2ca456428a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80f2ca4564276ed3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80f2ca4053de3497));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x3e7765fb4393c01f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80f2ca456428a9f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80f2ca4564276ed3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80f2ca4853de3497));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe427b644a2094e8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80f2ca456428a90f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5fb5182053de3497));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x081861cd3800fa53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, SubsExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x6b, 0x22, 0x28, 0x20, 0x6b, 0x22, 0x4c, 0x20,
      0x6b, 0x22, 0x70, 0x20, 0x6b, 0x22, 0x84, 0x20, 0x6b, 0x22, 0xa8,
      0x20, 0x6b, 0x22, 0xcc, 0x20, 0x6b, 0x22, 0xec, 0x20, 0x6b, 0x22,
      0x04, 0x20, 0xeb, 0x22, 0x28, 0x20, 0xeb, 0x22, 0x4c, 0x20, 0xeb,
      0x22, 0x70, 0x20, 0xeb, 0x22, 0x84, 0x20, 0xeb, 0x22, 0xa8, 0x20,
      0xeb, 0x22, 0xcc, 0x20, 0xeb, 0x22, 0xec, 0x20, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x625f1dfae124bccf));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf18dae161040cb39));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9276f046508a6947));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x56d88a497b07c4a4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001040c99b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000103dd7fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000071ae4c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fdf4fe49));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001040cb9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001041d7fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000071ae4c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000071ae4c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf18dae161040c99b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf18dae16103dd7fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf18dae0f071ae4c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb9bce67fdf4fe49));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf18dae161040cb9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf18dae161041d7fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf18dae17071ae4c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x625f1dfae124bccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf18dae161040cb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xde94be3f071ae4c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56d88a497b07c4a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, CmpExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x04, 0x20, 0x6b, 0x3f, 0x28, 0x20, 0x6b, 0x3f, 0x4c, 0x20,
      0x6b, 0x3f, 0x70, 0x20, 0x6b, 0x3f, 0x84, 0x20, 0x6b, 0x3f, 0xa8,
      0x20, 0x6b, 0x3f, 0xcc, 0x20, 0x6b, 0x3f, 0xec, 0x20, 0x6b, 0x3f,
      0x04, 0x20, 0xeb, 0x3f, 0x28, 0x20, 0xeb, 0x3f, 0x4c, 0x20, 0xeb,
      0x3f, 0x70, 0x20, 0xeb, 0x3f, 0x84, 0x20, 0xeb, 0x3f, 0xa8, 0x20,
      0xeb, 0x3f, 0xcc, 0x20, 0xeb, 0x3f, 0xec, 0x20, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, absl::Span<uint8_t>(bytes));
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4ed286fa3308cb2f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xec7ee2c5660af0e4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe1333977573e1af1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xce7650c43f8f8cbb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ed286fa3308cb2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xec7ee2c5660af0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1333977573e1af1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce7650c43f8f8cbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

}  // namespace test
}  // namespace reil

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

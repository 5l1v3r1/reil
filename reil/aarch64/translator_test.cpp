// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstdio>
#include <random>

#include "gtest/gtest.h"

#include "reil/aarch64.h"

namespace reil {
namespace aarch64 {

// NOTE: This file is generated by aarch64_test_generator.py - please add new
// tests there and regenerate this file instead of modifying this file directly.

TEST(AArch64Translator, Adr) {
  std::vector<uint8_t> bytes = {
      0x00,
      0x00,
      0x00,
      0x10,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0556158427bb420c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa5f664ddec3253c6));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x42b84a5b9a6aabee));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5ebd6d153561be5d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa5f664ddec3253c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x42b84a5b9a6aabee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ebd6d153561be5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Adrp) {
  std::vector<uint8_t> bytes = {
      0x00,
      0x00,
      0x00,
      0x90,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xac506c283e70fb97));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2660adab687d9d63));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc5d57cd6baec7ce0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1d7d9ccd0e46279d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2660adab687d9d63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc5d57cd6baec7ce0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1d7d9ccd0e46279d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, AddImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0x91, 0x01, 0x48, 0x40, 0x91, 0x01, 0xfc, 0x3f, 0x11,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9c2f93e962a4bf23));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xcb3ca84f75d86936));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x50416aee6f541a14));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x494f534ac5d7d727));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c2f93e962a4bf23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9c2f93e962a4bf35));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x50416aee6f541a14));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x494f534ac5d7d727));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c2f93e962a4bf23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9c2f93e962a5df23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x50416aee6f541a14));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x494f534ac5d7d727));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c2f93e962a4bf23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000062a4cf22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x50416aee6f541a14));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x494f534ac5d7d727));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AddsImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0xb1, 0x01, 0x48, 0x40, 0xb1, 0x01, 0xfc, 0x7f, 0x31,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4984e06789acff52));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc5ce21ef4b6e947d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x05dca95a103a51e3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x575bf0fb4577728e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4984e06789acff52));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4984e06789acff64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x05dca95a103a51e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x575bf0fb4577728e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4984e06789acff52));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4984e06789ae1f52));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x05dca95a103a51e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x575bf0fb4577728e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4984e06789acff52));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000008aacef52));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x05dca95a103a51e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x575bf0fb4577728e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, CmnImmediate) {
  std::vector<uint8_t> bytes = {
      0x1f, 0xf8, 0x3d, 0xb1, 0x1f, 0xf8, 0x7d, 0x31,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6e39dacd01a2d9f5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6b224a7959e6f774));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc54ef3294c3c272d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x853f18ba4ac670bf));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6e39dacd01a2d9f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6b224a7959e6f774));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc54ef3294c3c272d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x853f18ba4ac670bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6e39dacd01a2d9f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6b224a7959e6f774));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc54ef3294c3c272d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x853f18ba4ac670bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CmpImmediate) {
  std::vector<uint8_t> bytes = {
      0x1f, 0xf8, 0x3d, 0xf1, 0x1f, 0xf8, 0x7d, 0x71,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x099e80af4674576d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4ff70b80bb7e5dfc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5b196594337b4441));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf155d551d138a3d6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x099e80af4674576d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4ff70b80bb7e5dfc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5b196594337b4441));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf155d551d138a3d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x099e80af4674576d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4ff70b80bb7e5dfc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5b196594337b4441));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf155d551d138a3d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, MovToFromSp) {
  std::vector<uint8_t> bytes = {
      0x1f, 0x00, 0x00, 0x91, 0xe1, 0x03, 0x00, 0x11,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4970d133c6887ccf));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9eb8e59ad17b1cc7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xdf24710f2639d318));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x021bd8e6e79a7cb6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4970d133c6887ccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9eb8e59ad17b1cc7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdf24710f2639d318));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x021bd8e6e79a7cb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4970d133c6887ccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000c6887ccf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdf24710f2639d318));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x021bd8e6e79a7cb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, SubImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0xd1, 0x01, 0x48, 0x40, 0xd1, 0x01, 0xfc, 0x3f, 0x51,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x357b5b68d1ffafbc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe27b168b0794e413));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x080b89b0c4b784aa));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x581f0e8faecfce61));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x357b5b68d1ffafbc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x357b5b68d1ffafaa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x080b89b0c4b784aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x581f0e8faecfce61));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x357b5b68d1ffafbc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x357b5b68d1fe8fbc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x080b89b0c4b784aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x581f0e8faecfce61));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x357b5b68d1ffafbc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d1ff9fbd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x080b89b0c4b784aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x581f0e8faecfce61));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, SubsImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0xf1, 0x01, 0x48, 0x40, 0xf1, 0x01, 0xfc, 0x7f, 0x71,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0c4e39f16b019e20));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1a36a4b4c7e270a5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x20aabe9851de4911));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb40329f166377c56));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c4e39f16b019e20));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0c4e39f16b019e0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x20aabe9851de4911));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb40329f166377c56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c4e39f16b019e20));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0c4e39f16b007e20));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x20aabe9851de4911));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb40329f166377c56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c4e39f16b019e20));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000006a01ae20));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x20aabe9851de4911));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb40329f166377c56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AndImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0x92, 0x01, 0x9c, 0x08, 0x92, 0x01, 0x24, 0x00, 0x12,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe1de1791a05125bc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0f58d42ef867b898));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5be74af178684b46));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5f74bda31816c5a7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe1de1791a05125bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0c0008080400080));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5be74af178684b46));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5f74bda31816c5a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe1de1791a05125bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe1001700a0002500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5be74af178684b46));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5f74bda31816c5a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe1de1791a05125bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000000001bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5be74af178684b46));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5f74bda31816c5a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, OrrImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0xb2, 0x01, 0x9c, 0x08, 0xb2, 0x01, 0x24, 0x00, 0x32,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa793b7bc908abe71));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb6936c08c87f231e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0c9c87d9f9a927f8));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7639eea067c32375));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa793b7bc908abe71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7d3f7fcd0cafef1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0c9c87d9f9a927f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7639eea067c32375));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa793b7bc908abe71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xff93ffbcff8aff71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0c9c87d9f9a927f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7639eea067c32375));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa793b7bc908abe71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000908abfff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0c9c87d9f9a927f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7639eea067c32375));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, EorImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0xd2, 0x01, 0x9c, 0x08, 0xd2, 0x01, 0x24, 0x00, 0x52,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9383b9fdf476e2df));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0f832c7763e28e33));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd9bd9092f7877fd3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x71ad4541e3609662));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9383b9fdf476e2df));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5343793d34b6221f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd9bd9092f7877fd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71ad4541e3609662));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9383b9fdf476e2df));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c8346fd0b761ddf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd9bd9092f7877fd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71ad4541e3609662));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9383b9fdf476e2df));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f476e120));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd9bd9092f7877fd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x71ad4541e3609662));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AndsImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0xf2, 0x01, 0x9c, 0x08, 0xf2, 0x01, 0x24, 0x00, 0x72,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1ca375e8613495b0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x74921c551de42b21));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd5c9ebb60b9c2bb2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x889f12d12ab22c66));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ca375e8613495b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x008040c040008080));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd5c9ebb60b9c2bb2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x889f12d12ab22c66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ca375e8613495b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1c00750061009500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd5c9ebb60b9c2bb2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x889f12d12ab22c66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ca375e8613495b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000000001b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd5c9ebb60b9c2bb2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x889f12d12ab22c66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, TstImmediate) {
  std::vector<uint8_t> bytes = {
      0x1f, 0x28, 0x40, 0xf2, 0x1f, 0x24, 0x00, 0x72,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x90bbb3a34683e0f5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd3a2981ea081e255));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x91a1945771709b3a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x122c2e12ff0d753a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x90bbb3a34683e0f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd3a2981ea081e255));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x91a1945771709b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x122c2e12ff0d753a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x90bbb3a34683e0f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd3a2981ea081e255));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x91a1945771709b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x122c2e12ff0d753a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Movn) {
  std::vector<uint8_t> bytes = {
      0xe0, 0xff, 0x9f, 0x92, 0xe0, 0xff, 0xdf, 0x92, 0xe0, 0x1f, 0xa0, 0x12,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0a2a6d1e95a4724d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6eb347418cc8142a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf7332215865929d9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x70ea377be4d1b0fb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffffffffffff0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6eb347418cc8142a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf7332215865929d9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x70ea377be4d1b0fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffff0000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6eb347418cc8142a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf7332215865929d9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x70ea377be4d1b0fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000ff00ffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6eb347418cc8142a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf7332215865929d9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x70ea377be4d1b0fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Movz) {
  std::vector<uint8_t> bytes = {
      0x80, 0x46, 0x82, 0xd2, 0xa0, 0x79, 0xd5, 0xd2, 0x40, 0x02, 0xa0, 0x52,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa75bd6601836ca9f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbdb24ed41217cf87));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xafbbaef066ac5b6d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3ffbbdbddf571e22));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbdb24ed41217cf87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xafbbaef066ac5b6d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3ffbbdbddf571e22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000abcd00000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbdb24ed41217cf87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xafbbaef066ac5b6d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3ffbbdbddf571e22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000120000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbdb24ed41217cf87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xafbbaef066ac5b6d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3ffbbdbddf571e22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Movk) {
  std::vector<uint8_t> bytes = {
      0x80, 0x46, 0xe2, 0xf2, 0xa0, 0x79, 0xd5, 0xf2, 0x40, 0x02, 0xa0, 0x72,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4919577af8c3355d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7b3df759ebc68c2c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4b4cdfd0cbda7d2e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3ea2600c1545ed18));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1234577af8c3355d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7b3df759ebc68c2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4b4cdfd0cbda7d2e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3ea2600c1545ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1234abcdf8c3355d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7b3df759ebc68c2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4b4cdfd0cbda7d2e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3ea2600c1545ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000012355d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7b3df759ebc68c2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4b4cdfd0cbda7d2e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3ea2600c1545ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AsrImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xfc, 0x4b, 0x93, 0x01, 0x7c, 0x06, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x15327fe9e793bd75));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7c4201c1ed66b5f7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x40f7a0418b6c4f8a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6cfdba7d9ed13022));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15327fe9e793bd75));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0002a64ffd3cf277));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x40f7a0418b6c4f8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6cfdba7d9ed13022));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15327fe9e793bd75));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ff9e4ef5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x40f7a0418b6c4f8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6cfdba7d9ed13022));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbfiz) {
  std::vector<uint8_t> bytes = {
      0x01, 0x18, 0x4a, 0x93, 0x01, 0x04, 0x13, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xaa000946204b52f0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe7ba3e353e753c47));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcbda21ac9d0c290a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf6179b9c5a0641eb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaa000946204b52f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfc00000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcbda21ac9d0c290a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf6179b9c5a0641eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaa000946204b52f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcbda21ac9d0c290a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf6179b9c5a0641eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbfx) {
  std::vector<uint8_t> bytes = {
      0x01, 0xb0, 0x4b, 0x93, 0x01, 0x08, 0x01, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9de0e8d48e1222a4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x04cbd3f599e1a0a7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf6d0d6946ca67cd9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x23f5f1f8ea7ba058));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9de0e8d48e1222a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000011a91c244));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf6d0d6946ca67cd9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x23f5f1f8ea7ba058));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9de0e8d48e1222a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000fffffffe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf6d0d6946ca67cd9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x23f5f1f8ea7ba058));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sxtb) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x1c,
      0x00,
      0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc2648ff4a546abbe));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x043d531c56ef4756));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4bacd03960bf8958));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2ce8be778354d87e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc2648ff4a546abbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffffffbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4bacd03960bf8958));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2ce8be778354d87e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Sxth) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x3c,
      0x00,
      0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7d6aee38912411f3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x49958c8ba088160f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe95d29538c762838));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3b99ccee94387dcb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7d6aee38912411f3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000000011f3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe95d29538c762838));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3b99ccee94387dcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Bfi) {
  std::vector<uint8_t> bytes = {
      0x01, 0x40, 0x79, 0xb3, 0x01, 0x00, 0x42, 0xb3, 0x01, 0x24, 0x0c, 0x33,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa7904cb2b158ca54));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x38f77f7ca3cecec6));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcf9a6fa3ceec569f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x650ff3c04c39ed10));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa7904cb2b158ca54));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x38f77f7ca3652a46));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcf9a6fa3ceec569f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x650ff3c04c39ed10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa7904cb2b158ca54));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x38f77f7ca3652a46));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcf9a6fa3ceec569f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x650ff3c04c39ed10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa7904cb2b158ca54));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000a5452a46));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcf9a6fa3ceec569f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x650ff3c04c39ed10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Bfxil) {
  std::vector<uint8_t> bytes = {
      0x01, 0x5c, 0x47, 0xb3, 0x01, 0xf8, 0x7e, 0xb3, 0x01, 0x74, 0x14, 0x33,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc8e9370c9c4159ec));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7335ec19173fff50));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xac95275220324b71));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x38940fcc93834482));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8e9370c9c4159ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7335ec19173e82b3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xac95275220324b71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x38940fcc93834482));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8e9370c9c4159ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7335ec19173e82b3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xac95275220324b71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x38940fcc93834482));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8e9370c9c4159ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000173e81c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xac95275220324b71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x38940fcc93834482));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LslImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xb8, 0x6f, 0xd3, 0x01, 0x70, 0x1d, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x69a67abef3c4882a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xab39b918aaae7913));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa9a61890fbe96baf));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xae4cf7a50728c845));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x69a67abef3c4882a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf57de78910540000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa9a61890fbe96baf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xae4cf7a50728c845));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x69a67abef3c4882a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000009e244150));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa9a61890fbe96baf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xae4cf7a50728c845));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, LsrImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xfc, 0x4b, 0xd3, 0x01, 0x7c, 0x06, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0637b0b40c741d03));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x33a019dffa61b4aa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x675c23ff78d9b7d7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbd60ac6f29dba8fc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0637b0b40c741d03));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000c6f616818e83));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x675c23ff78d9b7d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbd60ac6f29dba8fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0637b0b40c741d03));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000000031d074));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x675c23ff78d9b7d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbd60ac6f29dba8fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Ubfiz) {
  std::vector<uint8_t> bytes = {
      0x01, 0x18, 0x4a, 0xd3, 0x01, 0x04, 0x13, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x01064811a54d01d1));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd66bbfdf3ca5f4ae));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x23cd8abdb79cb235));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x17f21114c08e20fe));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x01064811a54d01d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1440000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x23cd8abdb79cb235));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17f21114c08e20fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x01064811a54d01d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000002000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x23cd8abdb79cb235));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17f21114c08e20fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Ubfx) {
  std::vector<uint8_t> bytes = {
      0x01, 0xb0, 0x4b, 0xd3, 0x01, 0x08, 0x01, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x28ed240ac73ed661));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6e50b22e0d982ad5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe73978773f11053e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x80c36dfe7c47ea47));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x28ed240ac73ed661));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000008158e7da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe73978773f11053e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x80c36dfe7c47ea47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x28ed240ac73ed661));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe73978773f11053e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x80c36dfe7c47ea47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Uxtb) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x1c,
      0x00,
      0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8bc6090595ba0c9e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3c7e2070869e8e17));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x38e536d1c7614c95));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9abc2314a07f49bb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8bc6090595ba0c9e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000000000009e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x38e536d1c7614c95));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9abc2314a07f49bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Uxth) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x3c,
      0x00,
      0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe76f98aa12b2bae0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9d08fc02b79fbf17));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb4e8ad635a354eb1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x501ea82a30a26a29));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe76f98aa12b2bae0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000000000bae0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb4e8ad635a354eb1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x501ea82a30a26a29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, RorImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x9c, 0xc0, 0x93, 0x01, 0x18, 0x80, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6b32b73007d38de7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe9e65830e8c02fb3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf1124d8cadb92dc1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa12614a3a4634885));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6b32b73007d38de7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x600fa71bced6656e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf1124d8cadb92dc1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa12614a3a4634885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6b32b73007d38de7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000009c1f4e37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf1124d8cadb92dc1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa12614a3a4634885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Extract) {
  std::vector<uint8_t> bytes = {
      0x22, 0xf4, 0xc0, 0x93, 0x22, 0x44, 0x80, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb3b02722195d5930));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7eb34938fc15b4b7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe10485a07465becf));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1fc07a4a4b4ded30));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb3b02722195d5930));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7eb34938fc15b4b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf59a49c7e0ada5bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1fc07a4a4b4ded30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb3b02722195d5930));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7eb34938fc15b4b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000da5b8cae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1fc07a4a4b4ded30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CompareAndBranch) {
  std::vector<uint8_t> bytes = {
      0x00, 0x00, 0x80, 0xd2, 0x81, 0x46, 0x82, 0xd2, 0xa0, 0x00, 0x00, 0xb5,
      0x40, 0x00, 0x00, 0xb4, 0x1f, 0x20, 0x03, 0xd5, 0x41, 0x00, 0x00, 0x34,
      0x41, 0x00, 0x00, 0x35, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf769ad8ffd3e04bb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xba1f797f9b899c7a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x03474d9129981f2c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdd7c87e50175268e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xba1f797f9b899c7a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x03474d9129981f2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd7c87e50175268e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x03474d9129981f2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd7c87e50175268e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x03474d9129981f2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd7c87e50175268e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x03474d9129981f2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd7c87e50175268e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x03474d9129981f2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd7c87e50175268e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x03474d9129981f2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd7c87e50175268e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x03474d9129981f2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdd7c87e50175268e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));
}

TEST(AArch64Translator, ConditionalBranch) {
  std::vector<uint8_t> bytes = {
      0x00, 0x00, 0x80, 0xd2, 0x1f, 0x00, 0x00, 0xf1, 0x40, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x81, 0x02, 0x00, 0x54, 0x42, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x23, 0x02, 0x00, 0x54, 0x45, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0xc4, 0x01, 0x00, 0x54, 0x47, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x66, 0x01, 0x00, 0x54, 0x49, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x08, 0x01, 0x00, 0x54, 0x4a, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0xab, 0x00, 0x00, 0x54, 0x4d, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x4e, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5,
      0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x079e4aaacb2b6ea3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8ba91a75415979ae));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8c057bc0db4399a1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb69eefea34714c80));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001044));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000104c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001050));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001058));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001060));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ba91a75415979ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8c057bc0db4399a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb69eefea34714c80));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001064));
}

TEST(AArch64Translator, TestAndBranchIfZero) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x88, 0x36, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x76fa1014a5d2b269));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc5b21980e62b51af));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0090fd3e2a8331eb));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2504eca70b8eda77));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x76fa1014a5d2b269));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc5b21980e62b51af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0090fd3e2a8331eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2504eca70b8eda77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x76fa1014a5d2b269));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc5b21980e62b51af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0090fd3e2a8331eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2504eca70b8eda77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x76fa1014a5d2b269));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc5b21980e62b51af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0090fd3e2a8331eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2504eca70b8eda77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, TestAndBranchIfNonzero) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0xf8, 0xb7, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc313a262291be28d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6c78246a8fbf2121));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf096efe5fdc76af9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc9f8c8402a3296ba));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc313a262291be28d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c78246a8fbf2121));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf096efe5fdc76af9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc9f8c8402a3296ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc313a262291be28d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c78246a8fbf2121));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf096efe5fdc76af9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc9f8c8402a3296ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, BranchRegister) {
  std::vector<uint8_t> bytes = {
      0xa0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x1f, 0xd6, 0x1f, 0x20, 0x03, 0xd5,
      0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x918b498943081127));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdb85a44e5baf2ae6));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x00ad096fdd349d25));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd5e7492f1495a37c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdb85a44e5baf2ae6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00ad096fdd349d25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd5e7492f1495a37c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdb85a44e5baf2ae6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00ad096fdd349d25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd5e7492f1495a37c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdb85a44e5baf2ae6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00ad096fdd349d25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd5e7492f1495a37c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchAndLinkRegister) {
  std::vector<uint8_t> bytes = {
      0xa0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x3f, 0xd6, 0x1f, 0x20, 0x03, 0xd5,
      0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xfbd46be6c3c5c833));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x95994c23c4198c92));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa28731af56b26a96));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc9a83ff1130f42b9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x95994c23c4198c92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa28731af56b26a96));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc9a83ff1130f42b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x95994c23c4198c92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa28731af56b26a96));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc9a83ff1130f42b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x95994c23c4198c92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa28731af56b26a96));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc9a83ff1130f42b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchImmediateForward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20,
      0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x09994e9c79d9dd52));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbd42db2aea96cc1f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6ac42ceb524bee97));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xfa29a12dd83458a4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x09994e9c79d9dd52));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbd42db2aea96cc1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6ac42ceb524bee97));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfa29a12dd83458a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x09994e9c79d9dd52));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbd42db2aea96cc1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6ac42ceb524bee97));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfa29a12dd83458a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, BranchImmediateBackward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x03, 0x00, 0x00, 0x14,
      0x1f, 0x20, 0x03, 0xd5, 0xfd, 0xff, 0xff, 0x17, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbacfc29f025ea9b3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6eac035fa265de63));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2023d2542e7f8a27));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd4ee7cc318e45909));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbacfc29f025ea9b3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6eac035fa265de63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2023d2542e7f8a27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4ee7cc318e45909));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbacfc29f025ea9b3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6eac035fa265de63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2023d2542e7f8a27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4ee7cc318e45909));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbacfc29f025ea9b3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6eac035fa265de63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2023d2542e7f8a27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4ee7cc318e45909));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbacfc29f025ea9b3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6eac035fa265de63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2023d2542e7f8a27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4ee7cc318e45909));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbacfc29f025ea9b3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6eac035fa265de63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2023d2542e7f8a27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4ee7cc318e45909));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchAndLinkImmediateForward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x94, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20,
      0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x72cd4cbe594e0962));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3699b302b1f58524));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x02a66392ad65f3e0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x827c1bf21f14b028));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x72cd4cbe594e0962));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3699b302b1f58524));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x02a66392ad65f3e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x827c1bf21f14b028));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x72cd4cbe594e0962));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3699b302b1f58524));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x02a66392ad65f3e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x827c1bf21f14b028));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, BranchAndLinkImmediateBackward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x03, 0x00, 0x00, 0x14,
      0x1f, 0x20, 0x03, 0xd5, 0xfd, 0xff, 0xff, 0x97, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x59feca8a34d27d7d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2d5c6d0d05ab215e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xbcfcca9d33a2399a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3c70dfb7467a6fd9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x59feca8a34d27d7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2d5c6d0d05ab215e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbcfcca9d33a2399a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3c70dfb7467a6fd9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x59feca8a34d27d7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2d5c6d0d05ab215e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbcfcca9d33a2399a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3c70dfb7467a6fd9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x59feca8a34d27d7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2d5c6d0d05ab215e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbcfcca9d33a2399a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3c70dfb7467a6fd9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x59feca8a34d27d7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2d5c6d0d05ab215e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbcfcca9d33a2399a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3c70dfb7467a6fd9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x59feca8a34d27d7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2d5c6d0d05ab215e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbcfcca9d33a2399a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3c70dfb7467a6fd9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, Stxrb) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x08, 0x41, 0x7c,
      0x00, 0x08, 0x40, 0x7c, 0x5f, 0x08, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x63e7841eeb9a9fb4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xab99e19537b4c539));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x89fcf64118e0fd7b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe51bf2e56ae4e42e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x63e7841eeb9a9fb4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xab99e19537b4c539));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe51bf2e56ae4e42e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xab99e19537b4c539));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe51bf2e56ae4e42e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xab99e19537b4c539));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe51bf2e56ae4e42e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000039));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xab99e19537b4c539));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe51bf2e56ae4e42e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000039));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xab99e19537b4c539));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe51bf2e56ae4e42e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrb) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x08, 0x41, 0xfc,
      0x00, 0x08, 0x40, 0xfc, 0x5f, 0x08, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7e10bf404d5bb033));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xce2b7fe25262e2c6));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcf3bcd7aa5a7e690));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xed455c8f1617248b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7e10bf404d5bb033));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce2b7fe25262e2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xed455c8f1617248b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce2b7fe25262e2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xed455c8f1617248b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce2b7fe25262e2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xed455c8f1617248b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000000c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce2b7fe25262e2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xed455c8f1617248b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000000c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce2b7fe25262e2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xed455c8f1617248b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrb) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x08, 0x41, 0xfc,
      0x9f, 0x08, 0x40, 0xfc, 0xdf, 0x08, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf96dbf13efbbd85e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0ca3c09339052467));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4e0282e9f625fea6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2af9d0f8a7bffcde));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf96dbf13efbbd85e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0ca3c09339052467));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2af9d0f8a7bffcde));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0ca3c09339052467));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2af9d0f8a7bffcde));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0ca3c09339052467));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2af9d0f8a7bffcde));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000067));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0ca3c09339052467));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2af9d0f8a7bffcde));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000067));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0ca3c09339052467));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2af9d0f8a7bffcde));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrh) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x48, 0x41, 0x7c,
      0x00, 0x48, 0x40, 0x7c, 0x5f, 0x48, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3378ed0b441327f6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0df6742a2512b777));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9c30db1544558a80));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9023ef2b95bfc736));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3378ed0b441327f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0df6742a2512b777));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9023ef2b95bfc736));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0df6742a2512b777));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9023ef2b95bfc736));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0df6742a2512b777));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9023ef2b95bfc736));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000b777));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0df6742a2512b777));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9023ef2b95bfc736));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000b777));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0df6742a2512b777));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9023ef2b95bfc736));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrh) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x48, 0x41, 0xfc,
      0x00, 0x48, 0x40, 0xfc, 0x5f, 0x48, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7696786250df35f9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8ca40655427080d5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe5298efbbec2da20));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1a2596b71f0ac314));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7696786250df35f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ca40655427080d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a2596b71f0ac314));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ca40655427080d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a2596b71f0ac314));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ca40655427080d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a2596b71f0ac314));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000080d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ca40655427080d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a2596b71f0ac314));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000080d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ca40655427080d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a2596b71f0ac314));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrh) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x48, 0x41, 0xfc,
      0x9f, 0x48, 0x40, 0xfc, 0xdf, 0x48, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xadd362f61eae1599));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8f30ea1530b3a163));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6300d9d636012ada));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3af1941ed410ac59));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xadd362f61eae1599));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8f30ea1530b3a163));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3af1941ed410ac59));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8f30ea1530b3a163));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3af1941ed410ac59));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8f30ea1530b3a163));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3af1941ed410ac59));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000a163));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8f30ea1530b3a163));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3af1941ed410ac59));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000a163));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8f30ea1530b3a163));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3af1941ed410ac59));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x88, 0x41, 0x7c,
      0x00, 0x88, 0x40, 0x7c, 0x5f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf3b3554568a278aa));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x57861e1bbd0c6b98));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9e319ea538e5afe1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x334dd24b88097142));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf3b3554568a278aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57861e1bbd0c6b98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x334dd24b88097142));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57861e1bbd0c6b98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x334dd24b88097142));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57861e1bbd0c6b98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x334dd24b88097142));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000bd0c6b98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57861e1bbd0c6b98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x334dd24b88097142));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000bd0c6b98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x57861e1bbd0c6b98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x334dd24b88097142));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxpw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x00, 0x7f, 0x88, 0x41, 0x0c,
      0x20, 0x88, 0x40, 0x04, 0x7f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd0c64ab301d10996));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0b11311138df4d17));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x145bfe65abba9df8));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0eee4aadddbf654b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd0c64ab301d10996));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b11311138df4d17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0eee4aadddbf654b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b11311138df4d17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0eee4aadddbf654b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b11311138df4d17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0eee4aadddbf654b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000038df4d17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ddbf654b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0eee4aadddbf654b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000038df4d17));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ddbf654b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0eee4aadddbf654b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxpw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x80, 0x7f, 0x88, 0x41, 0x8c,
      0x20, 0x88, 0x40, 0x84, 0x7f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8bd0b8226b469f51));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbc4ed311820d3f3d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa61b7f3e90f4ea11));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x66a6b86107478003));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8bd0b8226b469f51));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc4ed311820d3f3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x66a6b86107478003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc4ed311820d3f3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x66a6b86107478003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc4ed311820d3f3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x66a6b86107478003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000820d3f3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000007478003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x66a6b86107478003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000820d3f3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000007478003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x66a6b86107478003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x88, 0x41, 0xfc,
      0x00, 0x88, 0x40, 0xfc, 0x5f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x58061624c3ca5f53));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf529a5e1b942a4cb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfbc3f52f7854dc6e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8b4bff720ec2b2c6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x58061624c3ca5f53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf529a5e1b942a4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8b4bff720ec2b2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf529a5e1b942a4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8b4bff720ec2b2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf529a5e1b942a4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8b4bff720ec2b2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000b942a4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf529a5e1b942a4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8b4bff720ec2b2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000b942a4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf529a5e1b942a4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8b4bff720ec2b2c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x88, 0x41, 0xfc,
      0x9f, 0x88, 0x40, 0xfc, 0xdf, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x850d6d1f7b67cb51));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8c12b4d681e29828));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe826959d60a3dea9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9f603c4f99c8debc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x850d6d1f7b67cb51));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8c12b4d681e29828));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9f603c4f99c8debc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8c12b4d681e29828));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9f603c4f99c8debc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8c12b4d681e29828));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9f603c4f99c8debc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000081e29828));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8c12b4d681e29828));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9f603c4f99c8debc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000081e29828));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8c12b4d681e29828));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9f603c4f99c8debc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrx) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0xc8, 0x41, 0x7c,
      0x00, 0xc8, 0x40, 0x7c, 0x5f, 0xc8, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x51cf51a2957b3114));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3003e884cc92c297));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe4e6484e147e9ff8));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5cf184cd88a9cbec));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x51cf51a2957b3114));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3003e884cc92c297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cf184cd88a9cbec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3003e884cc92c297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cf184cd88a9cbec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3003e884cc92c297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cf184cd88a9cbec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3003e884cc92c297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3003e884cc92c297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cf184cd88a9cbec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3003e884cc92c297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3003e884cc92c297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cf184cd88a9cbec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrx) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0xc8, 0x41, 0xfc,
      0x00, 0xc8, 0x40, 0xfc, 0x5f, 0xc8, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x34bce0c6a48aac33));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x15fa655cd073095d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1f7860169e30de2b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdf7fa5864ba3f568));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x34bce0c6a48aac33));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x15fa655cd073095d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf7fa5864ba3f568));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x15fa655cd073095d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf7fa5864ba3f568));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x15fa655cd073095d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf7fa5864ba3f568));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15fa655cd073095d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x15fa655cd073095d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf7fa5864ba3f568));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15fa655cd073095d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x15fa655cd073095d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf7fa5864ba3f568));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrx) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0xc8, 0x41, 0xfc,
      0x9f, 0xc8, 0x40, 0xfc, 0xdf, 0xc8, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcafa09f70bc06870));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x634656ba6966e54f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd0154269ebd10af1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc6e4b6339dcd1be1));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcafa09f70bc06870));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x634656ba6966e54f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6e4b6339dcd1be1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x634656ba6966e54f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6e4b6339dcd1be1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x634656ba6966e54f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6e4b6339dcd1be1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x634656ba6966e54f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x634656ba6966e54f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6e4b6339dcd1be1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x634656ba6966e54f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x634656ba6966e54f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6e4b6339dcd1be1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, LdrwLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1e25709416190df6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb4a2c03cba52ccd7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb5eecc9a155830fc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x18171edd9245c8fb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb4a2c03cba52ccd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb5eecc9a155830fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x18171edd9245c8fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb4a2c03cba52ccd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb5eecc9a155830fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x18171edd9245c8fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrxLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x847ed1fc32a5a878));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x944bb63022370bc2));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x91cc9a0f1ec426ca));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb4ebb3b7b9be2bac));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x944bb63022370bc2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x91cc9a0f1ec426ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb4ebb3b7b9be2bac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x944bb63022370bc2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x91cc9a0f1ec426ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb4ebb3b7b9be2bac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrswLiteralPositive) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xadb411efed1650aa));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2f48c0b93afd4bbd));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7133ed018f7be049));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0f17ef659b6c0733));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2f48c0b93afd4bbd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7133ed018f7be049));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0f17ef659b6c0733));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2f48c0b93afd4bbd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7133ed018f7be049));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0f17ef659b6c0733));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrswLiteralNegative) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x76b3ee21461c1ac1));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x86a613174da014b4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x301e65a994df9cf2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe90b45efd313b7ab));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86a613174da014b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x301e65a994df9cf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe90b45efd313b7ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86a613174da014b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x301e65a994df9cf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe90b45efd313b7ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, Ldstnpw) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x02, 0x28, 0x41, 0x00, 0x42, 0x28,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2e96ae563bfd6f26));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb9e5b828ebab8040));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfd3988b0eae12d83));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x31e687f3a90ae754));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2e96ae563bfd6f26));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb9e5b828ebab8040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x31e687f3a90ae754));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2e96ae563bfd6f26));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb9e5b828ebab8040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x31e687f3a90ae754));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000ebab8040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000003bfd6f26));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x31e687f3a90ae754));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Ldpsw) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x02, 0x29, 0x41, 0x00, 0x42, 0x69,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9c0a40e03b589b1c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd955871984e5e9a5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf18f5938f1342096));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0d7150a18aa5c2d2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c0a40e03b589b1c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd955871984e5e9a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d7150a18aa5c2d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c0a40e03b589b1c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd955871984e5e9a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d7150a18aa5c2d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffffffff84e5e9a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000003b589b1c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d7150a18aa5c2d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Ldstnpx) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x01, 0xa8, 0x41, 0x00, 0x41, 0xa8,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xace21696c00934e0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2c6abde73ff72c03));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf43ac020649ab4ed));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7664c9e4af74a74d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xace21696c00934e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2c6abde73ff72c03));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7664c9e4af74a74d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xace21696c00934e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2c6abde73ff72c03));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7664c9e4af74a74d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c6abde73ff72c03));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xace21696c00934e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7664c9e4af74a74d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LdstpwPreindex) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x81, 0x29,
      0x42, 0x00, 0x00, 0x10, 0x41, 0x00, 0xc1, 0x29,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x42f8e3baae187109));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8e490e09cc1b5b40));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb8b7cf683cc29075));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x56b84898a76ba0a5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x42f8e3baae187109));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8e490e09cc1b5b40));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56b84898a76ba0a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x42f8e3baae187109));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8e490e09cc1b5b40));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56b84898a76ba0a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x42f8e3baae187109));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8e490e09cc1b5b40));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56b84898a76ba0a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000cc1b5b40));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ae187109));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x56b84898a76ba0a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdstpwOffset) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x00, 0x29, 0x41, 0x80, 0x7f, 0x29,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xdf01064933b9fe07));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8199a719eee87463));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xca3c0ff721f22fc9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa07c2605b6c3bbf3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdf01064933b9fe07));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8199a719eee87463));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa07c2605b6c3bbf3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdf01064933b9fe07));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8199a719eee87463));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa07c2605b6c3bbf3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000033b9fe07));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000297f8041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa07c2605b6c3bbf3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LdstpwPostindex) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x82, 0x28,
      0x42, 0x00, 0x00, 0x10, 0x41, 0x00, 0xc2, 0x28,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3bddb8fd20a7b9a9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x25b5fdc0697feea3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x3d9627d9c408d416));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc9819f244c2aeb74));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3bddb8fd20a7b9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25b5fdc0697feea3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc9819f244c2aeb74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3bddb8fd20a7b9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25b5fdc0697feea3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc9819f244c2aeb74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3bddb8fd20a7b9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x25b5fdc0697feea3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc9819f244c2aeb74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000697feea3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000020a7b9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc9819f244c2aeb74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdstpxPreindex) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x81, 0xa9,
      0x42, 0x00, 0x00, 0x10, 0x41, 0x00, 0xc1, 0xa9,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x189627a893d46935));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xced1086ca8209331));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x194c47a8cd28dea7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe5c040e3d9ad934c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x189627a893d46935));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xced1086ca8209331));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5c040e3d9ad934c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x189627a893d46935));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xced1086ca8209331));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5c040e3d9ad934c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x189627a893d46935));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xced1086ca8209331));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5c040e3d9ad934c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xced1086ca8209331));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x189627a893d46935));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5c040e3d9ad934c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdstpxOffset) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x84, 0x00, 0xa9, 0x41, 0x00, 0x41, 0xa9,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0cda9aa6fd6901a7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x888275933f74a974));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf8c4b74e52e54694));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc1504c66919f8f0e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0cda9aa6fd6901a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x888275933f74a974));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc1504c66919f8f0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0cda9aa6fd6901a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x888275933f74a974));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc1504c66919f8f0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x888275933f74a974));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc1504c66919f8f0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LdstpxPostindex) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x84, 0x80, 0xa8,
      0x42, 0x00, 0x00, 0x10, 0x41, 0x80, 0xc0, 0xa8,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x879da38063886884));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd57183c9622b2479));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5c7841b74af6cb4e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x926f39e3469ddf3d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x879da38063886884));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd57183c9622b2479));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x926f39e3469ddf3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x879da38063886884));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd57183c9622b2479));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x926f39e3469ddf3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x879da38063886884));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd57183c9622b2479));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x926f39e3469ddf3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd57183c9622b2479));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x879da38063886884));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x926f39e3469ddf3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, Adc) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0x9a, 0x22, 0x00, 0x00, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbe55028df44d03f9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x303f6bd2257dce93));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8e950890430d66c9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbd120f69d8fd0f9b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbe55028df44d03f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x303f6bd2257dce93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xee946e6019cad28d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbd120f69d8fd0f9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbe55028df44d03f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x303f6bd2257dce93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000019cad28d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbd120f69d8fd0f9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Adcs) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0xba, 0x22, 0x00, 0x00, 0x3a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x969a4224b3a18d3b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xad84eddfccbfe8be));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x10052c65910446e0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x98ddb11deee8e50e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x969a4224b3a18d3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xad84eddfccbfe8be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x441f3004806175fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x98ddb11deee8e50e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x969a4224b3a18d3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xad84eddfccbfe8be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000806175fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x98ddb11deee8e50e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbc) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0xda, 0x22, 0x00, 0x00, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x035f34edcdf6f96d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5ea5f71174981970));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf6890795ccfcba8c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb4ef5375e322186c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x035f34edcdf6f96d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ea5f71174981970));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5b46c223a6a12002));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb4ef5375e322186c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x035f34edcdf6f96d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5ea5f71174981970));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a6a12002));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb4ef5375e322186c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbcs) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0xfa, 0x22, 0x00, 0x00, 0x7a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x94fcddbd4dbe4658));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1cb4808a8b2e6f8e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa6a8dbe916aedb14));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb02e214ac329fc37));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x94fcddbd4dbe4658));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cb4808a8b2e6f8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x87b7a2cd3d702936));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb02e214ac329fc37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x94fcddbd4dbe4658));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1cb4808a8b2e6f8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003d702935));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb02e214ac329fc37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CcmpRegister) {
  std::vector<uint8_t> bytes = {
      0x69, 0x00, 0x42, 0xfa, 0x68, 0x10, 0x42, 0x7a, 0x6b, 0x20, 0x42, 0xfa,
      0x6a, 0x30, 0x42, 0x7a, 0x6f, 0x40, 0x42, 0xfa, 0x6e, 0x50, 0x42, 0x7a,
      0x66, 0x60, 0x42, 0xfa, 0x6d, 0x70, 0x42, 0x7a, 0x6c, 0x80, 0x42, 0xfa,
      0x65, 0x90, 0x42, 0x7a, 0x60, 0xa0, 0x42, 0xfa, 0x61, 0xb0, 0x42, 0x7a,
      0x63, 0xc0, 0x42, 0xfa, 0x67, 0xd0, 0x42, 0x7a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x45c46900342a85e9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd6fcc1147bf39918));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd406810bddb6066b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcb860ad2815ee557));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xb >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xb >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xb >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xb >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xe >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xe >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xe >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xe >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xc >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xc >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xc >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xc >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x45c46900342a85e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6fcc1147bf39918));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd406810bddb6066b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb860ad2815ee557));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmnRegister) {
  std::vector<uint8_t> bytes = {
      0x69, 0x00, 0x42, 0xba, 0x68, 0x10, 0x42, 0x3a, 0x6b, 0x20, 0x42, 0xba,
      0x6a, 0x30, 0x42, 0x3a, 0x6f, 0x40, 0x42, 0xba, 0x6e, 0x50, 0x42, 0x3a,
      0x66, 0x60, 0x42, 0xba, 0x6d, 0x70, 0x42, 0x3a, 0x6c, 0x80, 0x42, 0xba,
      0x65, 0x90, 0x42, 0x3a, 0x60, 0xa0, 0x42, 0xba, 0x61, 0xb0, 0x42, 0x3a,
      0x63, 0xc0, 0x42, 0xba, 0x67, 0xd0, 0x42, 0x3a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1ba5c0171e5c9554));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd8e31f6a8197dbf2));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc81f04ec241e5964));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf4f42f1e7f99a7d1));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xb >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xb >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xb >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xb >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xe >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xe >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xe >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xe >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xc >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xc >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xc >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xc >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ba5c0171e5c9554));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd8e31f6a8197dbf2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc81f04ec241e5964));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf4f42f1e7f99a7d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmpImmediate) {
  std::vector<uint8_t> bytes = {
      0x09, 0x08, 0x5f, 0xfa, 0x08, 0x18, 0x5e, 0x7a, 0x0b, 0x28, 0x5d, 0xfa,
      0x0a, 0x38, 0x5c, 0x7a, 0x0f, 0x48, 0x5b, 0xfa, 0x0e, 0x58, 0x5a, 0x7a,
      0x06, 0x68, 0x59, 0xfa, 0x0d, 0x78, 0x57, 0x7a, 0x0c, 0x88, 0x55, 0xfa,
      0x05, 0x98, 0x54, 0x7a, 0x00, 0xa8, 0x53, 0xfa, 0x01, 0xb8, 0x52, 0x7a,
      0x03, 0xc8, 0x41, 0xfa, 0x07, 0xd8, 0x40, 0x7a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6db53efe631d730a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8fe23d7d903cb9a9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc7b22be978c79d93));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc6156ee1a7653811));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6db53efe631d730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8fe23d7d903cb9a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7b22be978c79d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6156ee1a7653811));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmnImmediate) {
  std::vector<uint8_t> bytes = {
      0x09, 0x08, 0x5f, 0xba, 0x08, 0x18, 0x5e, 0x3a, 0x0b, 0x28, 0x5d, 0xba,
      0x0a, 0x38, 0x5c, 0x3a, 0x0f, 0x48, 0x5b, 0xba, 0x0e, 0x58, 0x5a, 0x3a,
      0x06, 0x68, 0x59, 0xba, 0x0d, 0x78, 0x57, 0x3a, 0x0c, 0x88, 0x55, 0xba,
      0x05, 0x98, 0x54, 0x3a, 0x00, 0xa8, 0x53, 0xba, 0x01, 0xb8, 0x52, 0x3a,
      0x03, 0xc8, 0x41, 0xba, 0x07, 0xd8, 0x40, 0x3a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbb75565fc64336ec));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0342147707c76f7d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xbf30a9b756ae429d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0e511e827d61e3eb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xb >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xb >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xb >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xb >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xe >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xe >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xe >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xe >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xc >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xc >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xc >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xc >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbb75565fc64336ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0342147707c76f7d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf30a9b756ae429d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e511e827d61e3eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Csel) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x80, 0x9a, 0x22, 0x10, 0x80, 0x1a, 0x22, 0x20, 0x80, 0x9a,
      0x22, 0x30, 0x80, 0x1a, 0x22, 0x40, 0x80, 0x9a, 0x22, 0x50, 0x80, 0x1a,
      0x22, 0x60, 0x80, 0x9a, 0x22, 0x70, 0x80, 0x1a, 0x22, 0x80, 0x80, 0x9a,
      0x22, 0x90, 0x80, 0x1a, 0x22, 0xa0, 0x80, 0x9a, 0x22, 0xb0, 0x80, 0x1a,
      0x22, 0xc0, 0x80, 0x9a, 0x22, 0xd0, 0x80, 0x1a, 0x22, 0xe0, 0x80, 0x9a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x79e2c157d1fc55a5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x80cb7af4a55618e9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0a4e75bfbf738014));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x459e6784af72ec91));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x79e2c157d1fc55a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80cb7af4a55618e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x459e6784af72ec91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csinc) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x80, 0x9a, 0x22, 0x14, 0x80, 0x1a, 0x22, 0x24, 0x80, 0x9a,
      0x22, 0x34, 0x80, 0x1a, 0x22, 0x44, 0x80, 0x9a, 0x22, 0x54, 0x80, 0x1a,
      0x22, 0x64, 0x80, 0x9a, 0x22, 0x74, 0x80, 0x1a, 0x22, 0x84, 0x80, 0x9a,
      0x22, 0x94, 0x80, 0x1a, 0x22, 0xa4, 0x80, 0x9a, 0x22, 0xb4, 0x80, 0x1a,
      0x22, 0xc4, 0x80, 0x9a, 0x22, 0xd4, 0x80, 0x1a, 0x22, 0xe4, 0x80, 0x9a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x81f49e6e5bc3e551));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x41dc160c6d515ee3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x768e8dd1d761766b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x933cf0b10920814d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x81f49e6e5bc3e552));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x81f49e6e5bc3e552));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x81f49e6e5bc3e552));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005bc3e552));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x81f49e6e5bc3e552));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x81f49e6e5bc3e552));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x81f49e6e5bc3e552));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81f49e6e5bc3e551));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x41dc160c6d515ee3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x933cf0b10920814d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csinv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x80, 0xda, 0x22, 0x10, 0x80, 0x5a, 0x22, 0x20, 0x80, 0xda,
      0x22, 0x30, 0x80, 0x5a, 0x22, 0x40, 0x80, 0xda, 0x22, 0x50, 0x80, 0x5a,
      0x22, 0x60, 0x80, 0xda, 0x22, 0x70, 0x80, 0x5a, 0x22, 0x80, 0x80, 0xda,
      0x22, 0x90, 0x80, 0x5a, 0x22, 0xa0, 0x80, 0xda, 0x22, 0xb0, 0x80, 0x5a,
      0x22, 0xc0, 0x80, 0xda, 0x22, 0xd0, 0x80, 0x5a, 0x22, 0xe0, 0x80, 0xda,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x768387c874deab8d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb3c4ac12d1efa603));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x256180106928f8a4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x55b813456171172c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008b215472));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008b215472));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x897c78378b215472));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008b215472));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x897c78378b215472));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x897c78378b215472));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x897c78378b215472));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x768387c874deab8d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb3c4ac12d1efa603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55b813456171172c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csneg) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x80, 0xda, 0x22, 0x14, 0x80, 0x5a, 0x22, 0x24, 0x80, 0xda,
      0x22, 0x34, 0x80, 0x5a, 0x22, 0x44, 0x80, 0xda, 0x22, 0x54, 0x80, 0x5a,
      0x22, 0x64, 0x80, 0xda, 0x22, 0x74, 0x80, 0x5a, 0x22, 0x84, 0x80, 0xda,
      0x22, 0x94, 0x80, 0x5a, 0x22, 0xa4, 0x80, 0xda, 0x22, 0xb4, 0x80, 0x5a,
      0x22, 0xc4, 0x80, 0xda, 0x22, 0xd4, 0x80, 0x5a, 0x22, 0xe4, 0x80, 0xda,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x61809625d9605fa7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x80edf42f02a9fdf4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5bb82a4ecbc92759));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0e20112514d4e907));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e7f69da269fa059));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000002a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e7f69da269fa059));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000002a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e7f69da269fa059));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000002a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000269fa059));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e7f69da269fa059));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000002a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e7f69da269fa059));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000002a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e7f69da269fa059));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000002a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x61809625d9605fa7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80edf42f02a9fdf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e20112514d4e907));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Cset) {
  std::vector<uint8_t> bytes = {
      0xe2, 0x17, 0x9f, 0x9a, 0xe2, 0x07, 0x9f, 0x1a, 0xe2, 0x37, 0x9f, 0x9a,
      0xe2, 0x27, 0x9f, 0x1a, 0xe2, 0x57, 0x9f, 0x9a, 0xe2, 0x47, 0x9f, 0x1a,
      0xe2, 0x77, 0x9f, 0x9a, 0xe2, 0x67, 0x9f, 0x1a, 0xe2, 0x97, 0x9f, 0x9a,
      0xe2, 0x87, 0x9f, 0x1a, 0xe2, 0xb7, 0x9f, 0x9a, 0xe2, 0xa7, 0x9f, 0x1a,
      0xe2, 0xd7, 0x9f, 0x9a, 0xe2, 0xc7, 0x9f, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2443da400c0be218));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4e17c93657dfa95c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x3e72aaed8b0df6b6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd11639c343b37d4d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2443da400c0be218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e17c93657dfa95c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd11639c343b37d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Csetm) {
  std::vector<uint8_t> bytes = {
      0xe2, 0x13, 0x9f, 0xda, 0xe2, 0x03, 0x9f, 0x5a, 0xe2, 0x33, 0x9f, 0xda,
      0xe2, 0x23, 0x9f, 0x5a, 0xe2, 0x53, 0x9f, 0xda, 0xe2, 0x43, 0x9f, 0x5a,
      0xe2, 0x73, 0x9f, 0xda, 0xe2, 0x63, 0x9f, 0x5a, 0xe2, 0x93, 0x9f, 0xda,
      0xe2, 0x83, 0x9f, 0x5a, 0xe2, 0xb3, 0x9f, 0xda, 0xe2, 0xa3, 0x9f, 0x5a,
      0xe2, 0xd3, 0x9f, 0xda, 0xe2, 0xc3, 0x9f, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x82917efeb51ca57a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x08b3b2fe043aed92));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x00249231e081fd94));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9c5283610b9af17d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82917efeb51ca57a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x08b3b2fe043aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c5283610b9af17d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cinc) {
  std::vector<uint8_t> bytes = {
      0x01, 0x14, 0x80, 0x9a, 0x01, 0x04, 0x80, 0x1a, 0x01, 0x34, 0x80, 0x9a,
      0x01, 0x24, 0x80, 0x1a, 0x01, 0x54, 0x80, 0x9a, 0x01, 0x44, 0x80, 0x1a,
      0x01, 0x74, 0x80, 0x9a, 0x01, 0x64, 0x80, 0x1a, 0x01, 0x94, 0x80, 0x9a,
      0x01, 0x84, 0x80, 0x1a, 0x01, 0xb4, 0x80, 0x9a, 0x01, 0xa4, 0x80, 0x1a,
      0x01, 0xd4, 0x80, 0x9a, 0x01, 0xc4, 0x80, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x56cb111c53646381));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x747192d7fe14e973));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0f37ee7a88839902));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc8166d965f0865e9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x56cb111c53646382));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000053646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x56cb111c53646382));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000053646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000053646382));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x56cb111c53646382));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000053646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000053646382));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000053646382));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cb111c53646381));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000053646382));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0f37ee7a88839902));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc8166d965f0865e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cinv) {
  std::vector<uint8_t> bytes = {
      0x01, 0x10, 0x80, 0xda, 0x01, 0x00, 0x80, 0x5a, 0x01, 0x30, 0x80, 0xda,
      0x01, 0x20, 0x80, 0x5a, 0x01, 0x50, 0x80, 0xda, 0x01, 0x40, 0x80, 0x5a,
      0x01, 0x70, 0x80, 0xda, 0x01, 0x60, 0x80, 0x5a, 0x01, 0x90, 0x80, 0xda,
      0x01, 0x80, 0x80, 0x5a, 0x01, 0xb0, 0x80, 0xda, 0x01, 0xa0, 0x80, 0x5a,
      0x01, 0xd0, 0x80, 0xda, 0x01, 0xc0, 0x80, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xeb73a030886f7bee));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x50d20a066b41540d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd380d80162f01de9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0d922540ad855896));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x148c5fcf77908411));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000077908411));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000077908411));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000077908411));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000077908411));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x148c5fcf77908411));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeb73a030886f7bee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000077908411));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd380d80162f01de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0d922540ad855896));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cneg) {
  std::vector<uint8_t> bytes = {
      0x01, 0x14, 0x80, 0xda, 0x01, 0x04, 0x80, 0x5a, 0x01, 0x34, 0x80, 0xda,
      0x01, 0x24, 0x80, 0x5a, 0x01, 0x54, 0x80, 0xda, 0x01, 0x44, 0x80, 0x5a,
      0x01, 0x74, 0x80, 0xda, 0x01, 0x64, 0x80, 0x5a, 0x01, 0x94, 0x80, 0xda,
      0x01, 0x84, 0x80, 0x5a, 0x01, 0xb4, 0x80, 0xda, 0x01, 0xa4, 0x80, 0x5a,
      0x01, 0xd4, 0x80, 0xda, 0x01, 0xc4, 0x80, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe421298cb1a1fd8a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9a71484009aeb241));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xdec1e59aa58bb414));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2805715078daefa2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1bded6734e5e0276));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000b1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004e5e0276));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004e5e0276));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004e5e0276));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004e5e0276));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1bded6734e5e0276));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000b1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe421298cb1a1fd8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004e5e0276));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdec1e59aa58bb414));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2805715078daefa2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Sdiv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x0c, 0xc0, 0x9a, 0x22, 0x0c, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc073da34da9f8e04));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xfcc26f5133d42ff5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x26e7fbde64d8b113));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x29271496b55754b5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc073da34da9f8e04));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfcc26f5133d42ff5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x29271496b55754b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc073da34da9f8e04));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfcc26f5133d42ff5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x29271496b55754b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Udiv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x08, 0xc0, 0x9a, 0x22, 0x08, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x56dfaf9f1d2e98e5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x66cd072a1fed360a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb8dddd13a7deac0f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xfe433a1ad65af3a7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56dfaf9f1d2e98e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x66cd072a1fed360a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe433a1ad65af3a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56dfaf9f1d2e98e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x66cd072a1fed360a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe433a1ad65af3a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Lslv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x20, 0xc0, 0x9a, 0x22, 0x20, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3826ccb4e8789f21));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x495bec38d4eb1f55));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe985c30668479a45));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9d12947fd82c6f38));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3826ccb4e8789f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x495bec38d4eb1f55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa9d63eaa00000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9d12947fd82c6f38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3826ccb4e8789f21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x495bec38d4eb1f55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a9d63eaa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9d12947fd82c6f38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Lsrv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x24, 0xc0, 0x9a, 0x22, 0x24, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x09f5931a3052bfbd));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8793459da0118494));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x296c7e6e54b474bb));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x125e827ff6a7435c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x09f5931a3052bfbd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8793459da0118494));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000004));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x125e827ff6a7435c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x09f5931a3052bfbd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8793459da0118494));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000005));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x125e827ff6a7435c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Asrv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x28, 0xc0, 0x9a, 0x22, 0x28, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x90d8e917cc0ace99));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1e020a0187147800));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcbcc36bf2e70dc80));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x58450d8d1e21cdec));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x90d8e917cc0ace99));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1e020a0187147800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000f010500c3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x58450d8d1e21cdec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x90d8e917cc0ace99));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1e020a0187147800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffc3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x58450d8d1e21cdec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rorv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x2c, 0xc0, 0x9a, 0x22, 0x2c, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7c729098f63d95a5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4b7318861152fb26));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb5069e3a40b05dad));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc5c5f490076c587d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7c729098f63d95a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4b7318861152fb26));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x308a97d9325b98c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc5c5f490076c587d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7c729098f63d95a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4b7318861152fb26));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000308a97d9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc5c5f490076c587d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rbit) {
  std::vector<uint8_t> bytes = {
      0x01, 0x00, 0xc0, 0xda, 0x01, 0x00, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x52704ffbe0a351b6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa9853661a1613706));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa7c6850c0141689a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4a7e35485941a482));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52704ffbe0a351b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6d8ac507dff20e4a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7c6850c0141689a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a7e35485941a482));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52704ffbe0a351b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000006d8ac507));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7c6850c0141689a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4a7e35485941a482));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rev16) {
  std::vector<uint8_t> bytes = {
      0x01, 0x04, 0xc0, 0xda, 0x01, 0x04, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x23d0a2db3b933f6b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe6cb6851fedc5cee));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0ea0f8dd9ca686d3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3bbd0e1eff4e95e1));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x23d0a2db3b933f6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd023dba2933b6b3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0ea0f8dd9ca686d3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3bbd0e1eff4e95e1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x23d0a2db3b933f6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000933b6b3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0ea0f8dd9ca686d3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3bbd0e1eff4e95e1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rev32) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x08,
      0xc0,
      0xda,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x21e32d7c557c170e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9efffa88ed0a90eb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x54d59a8955d95750));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x46324f63e6273156));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x21e32d7c557c170e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c2de3210e177c55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x54d59a8955d95750));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46324f63e6273156));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Rev) {
  std::vector<uint8_t> bytes = {
      0x01, 0x0c, 0xc0, 0xda, 0x01, 0x08, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x022e6bac3be8c152));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe931123448710442));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x90b9c848aedc6b66));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0a09a4b4a8afabba));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x022e6bac3be8c152));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x52c1e83bac6b2e02));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x90b9c848aedc6b66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0a09a4b4a8afabba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x022e6bac3be8c152));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000052c1e83b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x90b9c848aedc6b66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0a09a4b4a8afabba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Clz) {
  std::vector<uint8_t> bytes = {
      0x01, 0x10, 0xc0, 0xda, 0x01, 0x10, 0xc0, 0x5a, 0xe0, 0x03,
      0x1f, 0xaa, 0x01, 0x10, 0xc0, 0xda, 0x01, 0x10, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x71370e54f8141fda));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6bb153a3b7d105f3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x889a8c1246a5b690));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7592071f32ff1424));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71370e54f8141fda));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x889a8c1246a5b690));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7592071f32ff1424));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71370e54f8141fda));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x889a8c1246a5b690));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7592071f32ff1424));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x889a8c1246a5b690));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7592071f32ff1424));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x889a8c1246a5b690));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7592071f32ff1424));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x889a8c1246a5b690));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7592071f32ff1424));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, Cls) {
  std::vector<uint8_t> bytes = {
      0x01, 0x14, 0xc0, 0xda, 0x01, 0x14, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb39fa66f5214fc31));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd3d2ba43696e33de));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x82e99ee3ba2c57f5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdb864cc687e99588));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb39fa66f5214fc31));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x82e99ee3ba2c57f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb864cc687e99588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb39fa66f5214fc31));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x82e99ee3ba2c57f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb864cc687e99588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Madd) {
  std::vector<uint8_t> bytes = {
      0x43, 0x00, 0x01, 0x9b, 0x43, 0x00, 0x01, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x118483dcad6d4ead));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc814cd2daccfb13e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcef1675f7395701b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc76d8c148d34af25));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x118483dcad6d4ead));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc814cd2daccfb13e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcef1675f7395701b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa671bccbc7f62037));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x118483dcad6d4ead));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc814cd2daccfb13e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcef1675f7395701b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x00000000c7f62037));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Mul) {
  std::vector<uint8_t> bytes = {
      0x22, 0x7c, 0x00, 0x9b, 0x22, 0x7c, 0x00, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1e72479b29b50963));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x22616ab8e40f900f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4cfe1dfb9a58d827));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x875efcf384ade7d2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1e72479b29b50963));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x22616ab8e40f900f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x18bae4acffb03ccd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x875efcf384ade7d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1e72479b29b50963));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x22616ab8e40f900f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffb03ccd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x875efcf384ade7d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Msub) {
  std::vector<uint8_t> bytes = {
      0x43, 0x80, 0x01, 0x9b, 0x43, 0x80, 0x01, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x297a82a5ffb20191));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa51f9ff799fea173));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe8a178cf5890ecc7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6f433ca738b1eddf));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x297a82a5ffb20191));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa51f9ff799fea173));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe8a178cf5890ecc7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xec514c7f353c7d2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x297a82a5ffb20191));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa51f9ff799fea173));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe8a178cf5890ecc7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x00000000353c7d2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Mneg) {
  std::vector<uint8_t> bytes = {
      0x22, 0xfc, 0x00, 0x9b, 0x22, 0xfc, 0x00, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9a6d6ad9286f4361));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x168fa7d0706e63ee));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5cc88264c2f1bff0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x539ad02c3a465b90));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a6d6ad9286f4361));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x168fa7d0706e63ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xca6a9c5ffdd2d8d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x539ad02c3a465b90));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a6d6ad9286f4361));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x168fa7d0706e63ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fdd2d8d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x539ad02c3a465b90));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Smaddl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x00,
      0x21,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1d76dfc6d962a38a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe8d01d6b602a8a7b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2653f980006e4e4e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdbb9ea9a52ba592a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1d76dfc6d962a38a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe8d01d6b602a8a7b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2653f980006e4e4e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1da04f789d644f04));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smull) {
  std::vector<uint8_t> bytes = {
      0x22,
      0x7c,
      0x20,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbf87b2430fde23e4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x64a8c59a72a12ed7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x406b7b0db2930910));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x48f64d88b73ba60d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbf87b2430fde23e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x64a8c59a72a12ed7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x071ae99758671c7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x48f64d88b73ba60d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smsubl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x80,
      0x21,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4c0925b2cb988279));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3cba4f315f51c0ad));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb944487850ed0600));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd70989ece25fe2a1));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4c0925b2cb988279));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3cba4f315f51c0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb944487850ed0600));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2de7589170eb7479));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smnegl) {
  std::vector<uint8_t> bytes = {
      0x22,
      0xfc,
      0x20,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1838a02e6ab3e1a4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x959aff56dd87cacb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9cd6fe5ead1b1c77));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa6fc8dd58f35f82e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1838a02e6ab3e1a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x959aff56dd87cacb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0e5dfe76e1d4aaf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6fc8dd58f35f82e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smulh) {
  std::vector<uint8_t> bytes = {
      0x22,
      0x7c,
      0x40,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x271789092499ac2c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb3452984e7d7b83c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc90756fb87638089));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3fd16f49345bed45));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x271789092499ac2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb3452984e7d7b83c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf4487b773ff0f1c3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3fd16f49345bed45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umaddl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x00,
      0xa1,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xab2692f22c5f9366));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x56befc96f9a6450d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc60c6e33a605eba4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe7ed0d268c172581));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xab2692f22c5f9366));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x56befc96f9a6450d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc60c6e33a605eba4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d0e29c38387beba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umull) {
  std::vector<uint8_t> bytes = {
      0x22,
      0x7c,
      0xa0,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe3b3e16c5e481b09));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xfe90367254a2d69d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x65a0dd38e5c906fc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3ed2a59de8be42d0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe3b3e16c5e481b09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfe90367254a2d69d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1f2ba18a28841a85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3ed2a59de8be42d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umsubl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x80,
      0xa1,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x25dc4a68d8876e97));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x49ac9a3241530183));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xaef6b9c51421556b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x78c1f45dd4cef9ad));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x25dc4a68d8876e97));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x49ac9a3241530183));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xaef6b9c51421556b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x20b94ccb8d724dd6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umnegl) {
  std::vector<uint8_t> bytes = {
      0x22,
      0xfc,
      0xa0,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x26f7cb8611d46dfc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4095cae8f9244737));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0b4fec4c3e51f1ad));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4623fea5fb39b41a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x26f7cb8611d46dfc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4095cae8f9244737));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xeea5da30ad6b7adc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4623fea5fb39b41a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, AndShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x0a, 0x22, 0x24, 0x40, 0x0a, 0x22, 0x04, 0x80,
      0x0a, 0x22, 0x30, 0xc0, 0x0a, 0x22, 0x44, 0x00, 0x8a, 0x22, 0x24,
      0x40, 0x8a, 0x22, 0x94, 0x80, 0x8a, 0x22, 0xd4, 0xc0, 0x8a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2f44251912c06849));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd70e92e0f3c97712));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xbb0353abe385c230));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb6e1e1daedd0aa22));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2f44251912c06849));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd70e92e0f3c97712));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d0800000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6e1e1daedd0aa22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2f44251912c06849));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd70e92e0f3c97712));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000096010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6e1e1daedd0aa22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2f44251912c06849));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd70e92e0f3c97712));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000001403400));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6e1e1daedd0aa22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2f44251912c06849));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd70e92e0f3c97712));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000080812402));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6e1e1daedd0aa22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2f44251912c06849));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd70e92e0f3c97712));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x42020080d0800000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6e1e1daedd0aa22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2f44251912c06849));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd70e92e0f3c97712));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0006820080896010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6e1e1daedd0aa22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2f44251912c06849));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd70e92e0f3c97712));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000001482100));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6e1e1daedd0aa22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2f44251912c06849));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd70e92e0f3c97712));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0108808003404112));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6e1e1daedd0aa22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, BicShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x0a, 0x22, 0x24, 0x60, 0x0a, 0x22, 0x04, 0xa0,
      0x0a, 0x22, 0x30, 0xe0, 0x0a, 0x22, 0x44, 0x20, 0x8a, 0x22, 0x24,
      0x60, 0x8a, 0x22, 0x94, 0xa0, 0x8a, 0x22, 0xd4, 0xe0, 0x8a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8708a2f553419ee4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb8823c71ede73a74));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc1f44baf6ea29a6a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x711dfb0b8a76f1fc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8708a2f553419ee4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8823c71ede73a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c0273a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x711dfb0b8a76f1fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8708a2f553419ee4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8823c71ede73a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000edc61a30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x711dfb0b8a76f1fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8708a2f553419ee4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8823c71ede73a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c4473004));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x711dfb0b8a76f1fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8708a2f553419ee4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8823c71ede73a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000001a20a64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x711dfb0b8a76f1fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8708a2f553419ee4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8823c71ede73a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb8001870c0273a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x711dfb0b8a76f1fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8708a2f553419ee4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8823c71ede73a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb880382085461a30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x711dfb0b8a76f1fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8708a2f553419ee4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8823c71ede73a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000001c73a60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x711dfb0b8a76f1fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8708a2f553419ee4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb8823c71ede73a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb8801461e1001a44));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x711dfb0b8a76f1fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, OrrShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x2a, 0x22, 0x24, 0x40, 0x2a, 0x22, 0x04, 0x80,
      0x2a, 0x22, 0x30, 0xc0, 0x2a, 0x22, 0x44, 0x00, 0xaa, 0x22, 0x24,
      0x40, 0xaa, 0x22, 0x94, 0x80, 0xaa, 0x22, 0xd4, 0xc0, 0xaa,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe23db52f72aa40a0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x074fd637234f6dcd));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x259c218bfb137640));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x579bec365a274546));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23db52f72aa40a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x074fd637234f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a34f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x579bec365a274546));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23db52f72aa40a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x074fd637234f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000237f7ded));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x579bec365a274546));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23db52f72aa40a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x074fd637234f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003b5f6ddd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x579bec365a274546));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23db52f72aa40a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x074fd637234f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002b4f6fed));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x579bec365a274546));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23db52f72aa40a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x074fd637234f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6f5ff777a34f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x579bec365a274546));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23db52f72aa40a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x074fd637234f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x077fdeffb7ff7ded));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x579bec365a274546));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23db52f72aa40a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x074fd637234f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffff5feded));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x579bec365a274546));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe23db52f72aa40a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x074fd637234f6dcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xefefffb7734f6fdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x579bec365a274546));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, MovShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x03, 0x00, 0xaa, 0xe1, 0x03, 0x00, 0x2a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbd272877b90cc01f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x01c3529cfa2aa414));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x52176b2e8c37820e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1ba0171d0f9688e2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbd272877b90cc01f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbd272877b90cc01f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x52176b2e8c37820e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1ba0171d0f9688e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbd272877b90cc01f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000b90cc01f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x52176b2e8c37820e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1ba0171d0f9688e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, OrnShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x2a, 0x22, 0x24, 0x60, 0x2a, 0x22, 0x04, 0xa0,
      0x2a, 0x22, 0x30, 0xe0, 0x2a, 0x22, 0x44, 0x20, 0xaa, 0x22, 0x24,
      0x60, 0xaa, 0x22, 0x94, 0xa0, 0xaa, 0x22, 0xd4, 0xe0, 0xaa,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb60b4d72f20a57d6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe2d2acb5e8ed7959));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf25f950364386b23));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa0ddf53eaceb242c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb60b4d72f20a57d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe2d2acb5e8ed7959));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f8ffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa0ddf53eaceb242c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb60b4d72f20a57d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe2d2acb5e8ed7959));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffeffbdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa0ddf53eaceb242c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb60b4d72f20a57d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe2d2acb5e8ed7959));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000eefffd5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa0ddf53eaceb242c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb60b4d72f20a57d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe2d2acb5e8ed7959));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000eafdff5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa0ddf53eaceb242c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb60b4d72f20a57d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe2d2acb5e8ed7959));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7dabffff8ffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa0ddf53eaceb242c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb60b4d72f20a57d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe2d2acb5e8ed7959));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfff6fefdeeeffbdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa0ddf53eaceb242c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb60b4d72f20a57d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe2d2acb5e8ed7959));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe2d2acb5eaeffddd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa0ddf53eaceb242c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb60b4d72f20a57d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe2d2acb5e8ed7959));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7d6ecffeded7b5f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa0ddf53eaceb242c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, MvnShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x03, 0x20, 0xaa, 0xe1, 0x03, 0x20, 0x2a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5e29dbdb267368ef));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9c4c786d18498e90));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd3456257f88317d6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9273f644f700821c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e29dbdb267368ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa1d62424d98c9710));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd3456257f88317d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9273f644f700821c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e29dbdb267368ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d98c9710));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd3456257f88317d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9273f644f700821c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, EorShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x4a, 0x22, 0x24, 0x40, 0x4a, 0x22, 0x04, 0x80,
      0x4a, 0x22, 0x30, 0xc0, 0x4a, 0x22, 0x44, 0x00, 0xca, 0x22, 0x24,
      0x40, 0xca, 0x22, 0x94, 0x80, 0xca, 0x22, 0xd4, 0xc0, 0xca,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x20b6d675ceb7bd3b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdd94c8e4320ca8c6));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8a4568c639ebcb80));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8ff956623f1e1ad8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20b6d675ceb7bd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdd94c8e4320ca8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000487aa8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8ff956623f1e1ad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20b6d675ceb7bd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdd94c8e4320ca8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000326bf318));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8ff956623f1e1ad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20b6d675ceb7bd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdd94c8e4320ca8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d557765b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8ff956623f1e1ad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20b6d675ceb7bd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdd94c8e4320ca8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e1b043bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8ff956623f1e1ad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20b6d675ceb7bd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdd94c8e4320ca8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x717f558b487aa8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8ff956623f1e1ad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20b6d675ceb7bd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdd94c8e4320ca8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdd84938f08ebf318));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8ff956623f1e1ad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20b6d675ceb7bd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdd94c8e4320ca8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdd94c8e433091e75));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8ff956623f1e1ad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x20b6d675ceb7bd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdd94c8e4320ca8c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6b2766918fe571c3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8ff956623f1e1ad8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, EonShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x4a, 0x22, 0x24, 0x60, 0x4a, 0x22, 0x04, 0xa0,
      0x4a, 0x22, 0x30, 0xe0, 0x4a, 0x22, 0x44, 0x20, 0xca, 0x22, 0x24,
      0x60, 0xca, 0x22, 0x94, 0xa0, 0xca, 0x22, 0xd4, 0xe0, 0xca,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9a74cf8e6e0f9da5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb7a751151a97acb0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0711a44b9578ea68));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa6de6546389520f8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a74cf8e6e0f9da5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb7a751151a97acb0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000de22534f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6de6546389520f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a74cf8e6e0f9da5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb7a751151a97acb0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e55f5481));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6de6546389520f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a74cf8e6e0f9da5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb7a751151a97acb0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d26f9d9d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6de6546389520f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a74cf8e6e0f9da5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb7a751151a97acb0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003f3eb3b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6de6546389520f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a74cf8e6e0f9da5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb7a751151a97acb0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd74472f5de22534f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6de6546389520f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a74cf8e6e0f9da5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb7a751151a97acb0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4815948d225f5481));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6de6546389520f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a74cf8e6e0f9da5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb7a751151a97acb0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb7a7511519bbf533));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6de6546389520f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a74cf8e6e0f9da5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb7a751151a97acb0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xee24dd9a99857f9c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6de6546389520f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, AndsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x6a, 0x22, 0x24, 0x40, 0x6a, 0x22, 0x04, 0x80,
      0x6a, 0x22, 0x30, 0xc0, 0x6a, 0x22, 0x44, 0x00, 0xea, 0x22, 0x24,
      0x40, 0xea, 0x22, 0x94, 0x80, 0xea, 0x22, 0xd4, 0xc0, 0xea,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa754d4bd7a38fd87));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x940b0e8b45c60c91));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0977f11dc8be8cc9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3a78194bf5dfa346));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa754d4bd7a38fd87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x940b0e8b45c60c91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000041060000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a78194bf5dfa346));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa754d4bd7a38fd87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x940b0e8b45c60c91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000040c10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a78194bf5dfa346));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa754d4bd7a38fd87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x940b0e8b45c60c91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000005040c81));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a78194bf5dfa346));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa754d4bd7a38fd87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x940b0e8b45c60c91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000040460081));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a78194bf5dfa346));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa754d4bd7a38fd87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x940b0e8b45c60c91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x800a040141060000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a78194bf5dfa346));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa754d4bd7a38fd87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x940b0e8b45c60c91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00030a0a44840c10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a78194bf5dfa346));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa754d4bd7a38fd87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x940b0e8b45c60c91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x940b0e8b45020481));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a78194bf5dfa346));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa754d4bd7a38fd87));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x940b0e8b45c60c91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x84010a8145c40c10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a78194bf5dfa346));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, BicsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x6a, 0x22, 0x24, 0x60, 0x6a, 0x22, 0x04, 0xa0,
      0x6a, 0x22, 0x30, 0xe0, 0x6a, 0x22, 0x44, 0x20, 0xea, 0x22, 0x24,
      0x60, 0xea, 0x22, 0x94, 0xa0, 0xea, 0x22, 0xd4, 0xe0, 0xea,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd2f5f96d6549be5b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xddcc1facab9b6c58));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4d95f31f060c921c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8bf2ba59b66e0184));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd2f5f96d6549be5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xddcc1facab9b6c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000083096c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bf2ba59b66e0184));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd2f5f96d6549be5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xddcc1facab9b6c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ab894800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bf2ba59b66e0184));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd2f5f96d6549be5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xddcc1facab9b6c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000891b2050));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bf2ba59b66e0184));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd2f5f96d6549be5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xddcc1facab9b6c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000a092840));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bf2ba59b66e0184));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd2f5f96d6549be5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xddcc1facab9b6c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d04152c83096c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bf2ba59b66e0184));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd2f5f96d6549be5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xddcc1facab9b6c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdd84050009094800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bf2ba59b66e0184));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd2f5f96d6549be5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xddcc1facab9b6c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000001084010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bf2ba59b66e0184));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd2f5f96d6549be5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xddcc1facab9b6c58));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x50041484a2092048));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bf2ba59b66e0184));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, AddShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x0b, 0x22, 0x24, 0x40, 0x0b, 0x22, 0x04, 0x80, 0x0b,
      0x22, 0x44, 0x00, 0x8b, 0x22, 0x24, 0x40, 0x8b, 0x22, 0x94, 0x80, 0x8b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4377274604a673f2));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8ec583d12725d84a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc0063bb62b846520));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7fcf72187ae1e115));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4377274604a673f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ec583d12725d84a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000f09d84a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7fcf72187ae1e115));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4377274604a673f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ec583d12725d84a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000027282b83));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7fcf72187ae1e115));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4377274604a673f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ec583d12725d84a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000029791243));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7fcf72187ae1e115));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4377274604a673f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ec583d12725d84a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdd518d1e0f09d84a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7fcf72187ae1e115));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4377274604a673f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ec583d12725d84a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8ee73f64ca282b83));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7fcf72187ae1e115));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4377274604a673f2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8ec583d12725d84a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8ec583d129419184));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7fcf72187ae1e115));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, AddsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x2b, 0x22, 0x24, 0x40, 0x2b, 0x22, 0x04, 0x80, 0x2b,
      0x22, 0x44, 0x00, 0xab, 0x22, 0x24, 0x40, 0xab, 0x22, 0x94, 0x80, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x98d6453fd3988807));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x43d86ba2afee6629));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xaa73ecea5c53ed24));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe5b9f9d5b862f768));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x98d6453fd3988807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43d86ba2afee6629));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000bffc6629));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5b9f9d5b862f768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x98d6453fd3988807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43d86ba2afee6629));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b058326d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5b9f9d5b862f768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x98d6453fd3988807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43d86ba2afee6629));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000099baaa2c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5b9f9d5b862f768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x98d6453fd3988807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43d86ba2afee6629));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xce5812d3bffc6629));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5b9f9d5b862f768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x98d6453fd3988807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43d86ba2afee6629));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4424d6c54fd8326d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5b9f9d5b862f768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x98d6453fd3988807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43d86ba2afee6629));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x43d86ba2acb51852));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe5b9f9d5b862f768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, CmnShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x44, 0x00, 0x2b, 0x3f, 0x24, 0x40, 0x2b, 0x3f, 0x04, 0x80, 0x2b,
      0x3f, 0x44, 0x00, 0xab, 0x3f, 0x24, 0x40, 0xab, 0x3f, 0x94, 0x80, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1b3fa217b7a6ed3d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1b99fee0f712ced0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa29b6ad887559eb8));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3fa79bff5452e83a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1b3fa217b7a6ed3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1b99fee0f712ced0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa29b6ad887559eb8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3fa79bff5452e83a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1b3fa217b7a6ed3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1b99fee0f712ced0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa29b6ad887559eb8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3fa79bff5452e83a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1b3fa217b7a6ed3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1b99fee0f712ced0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa29b6ad887559eb8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3fa79bff5452e83a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1b3fa217b7a6ed3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1b99fee0f712ced0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa29b6ad887559eb8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3fa79bff5452e83a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1b3fa217b7a6ed3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1b99fee0f712ced0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa29b6ad887559eb8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3fa79bff5452e83a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1b3fa217b7a6ed3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1b99fee0f712ced0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa29b6ad887559eb8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3fa79bff5452e83a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, SubShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x4b, 0x22, 0x24, 0x40, 0x4b, 0x22, 0x04, 0x80, 0x4b,
      0x22, 0x44, 0x00, 0xcb, 0x22, 0x24, 0x40, 0xcb, 0x22, 0x94, 0x80, 0xcb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0c6ffc7b7b878839));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc0a09cb19dab8d92));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfe493317b03b80b8));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4d8f84f6e19dcdcb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6ffc7b7b878839));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0a09cb19dab8d92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008d398d92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d8f84f6e19dcdcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6ffc7b7b878839));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0a09cb19dab8d92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000009d6dc9ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d8f84f6e19dcdcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6ffc7b7b878839));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0a09cb19dab8d92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005fe7c976));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d8f84f6e19dcdcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6ffc7b7b878839));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0a09cb19dab8d92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc7a9a5a28d398d92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d8f84f6e19dcdcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6ffc7b7b878839));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0a09cb19dab8d92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc09a64b35fedc9ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d8f84f6e19dcdcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6ffc7b7b878839));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc0a09cb19dab8d92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc0a09cb19d480daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4d8f84f6e19dcdcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, NegShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x47, 0x00, 0x4b, 0xe1, 0x27, 0x40, 0x4b, 0xe1, 0x07, 0x80, 0x4b,
      0xe1, 0x47, 0x00, 0xcb, 0xe1, 0x27, 0x40, 0xcb, 0xe1, 0x97, 0x80, 0xcb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x083032d593502459));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf596cdd1e0b82934));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf2c5beb58ac27b47));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x28d4371276992d15));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x083032d593502459));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000b74e0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2c5beb58ac27b47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x28d4371276992d15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x083032d593502459));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffb657ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2c5beb58ac27b47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x28d4371276992d15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x083032d593502459));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000003657edd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2c5beb58ac27b47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x28d4371276992d15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x083032d593502459));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9a54d95fb74e0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2c5beb58ac27b47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x28d4371276992d15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x083032d593502459));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfffbe7e6953657ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2c5beb58ac27b47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x28d4371276992d15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x083032d593502459));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffffffffffbe7e6a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2c5beb58ac27b47));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x28d4371276992d15));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, SubsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x6b, 0x22, 0x24, 0x40, 0x6b, 0x22, 0x04, 0x80, 0x6b,
      0x22, 0x44, 0x00, 0xeb, 0x22, 0x24, 0x40, 0xeb, 0x22, 0x94, 0x80, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xeee5d3342cbd7e82));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xfd751ed52c47209d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6e4e852b2c71112d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbdfefa9c22125d93));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeee5d3342cbd7e82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfd751ed52c47209d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002f43209d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdfefa9c22125d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeee5d3342cbd7e82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfd751ed52c47209d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002c30c1de));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdfefa9c22125d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeee5d3342cbd7e82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfd751ed52c47209d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000015e8615c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdfefa9c22125d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeee5d3342cbd7e82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfd751ed52c47209d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x570cc55a2f43209d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdfefa9c22125d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeee5d3342cbd7e82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfd751ed52c47209d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfcfdabeb9230c1de));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdfefa9c22125d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeee5d3342cbd7e82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfd751ed52c47209d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfd751ed52ccff204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbdfefa9c22125d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, CmpShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x44, 0x00, 0x6b, 0x3f, 0x24, 0x40, 0x6b, 0x3f, 0x04, 0x80, 0x6b,
      0x3f, 0x44, 0x00, 0xeb, 0x3f, 0x24, 0x40, 0xeb, 0x3f, 0x94, 0x80, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x322a542328fb0051));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8e2fabf4a93dae66));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1cd3b9b7321f7e6b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdb73d07c4092701c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x322a542328fb0051));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8e2fabf4a93dae66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1cd3b9b7321f7e6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb73d07c4092701c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x322a542328fb0051));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8e2fabf4a93dae66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1cd3b9b7321f7e6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb73d07c4092701c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x322a542328fb0051));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8e2fabf4a93dae66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1cd3b9b7321f7e6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb73d07c4092701c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x322a542328fb0051));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8e2fabf4a93dae66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1cd3b9b7321f7e6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb73d07c4092701c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x322a542328fb0051));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8e2fabf4a93dae66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1cd3b9b7321f7e6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb73d07c4092701c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x322a542328fb0051));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8e2fabf4a93dae66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1cd3b9b7321f7e6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdb73d07c4092701c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, NegsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x47, 0x00, 0x6b, 0xe1, 0x27, 0x40, 0x6b, 0xe1, 0x07, 0x80, 0x6b,
      0xe1, 0x47, 0x00, 0xeb, 0xe1, 0x27, 0x40, 0xeb, 0xe1, 0x97, 0x80, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4ef398852c3bf473));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x161c52da4c9ae17a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x97dcb3bc244b2a0e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x69186d892934524b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ef398852c3bf473));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000171a0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x97dcb3bc244b2a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69186d892934524b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ef398852c3bf473));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffe9e206));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x97dcb3bc244b2a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69186d892934524b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ef398852c3bf473));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000e9e205c7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x97dcb3bc244b2a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69186d892934524b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ef398852c3bf473));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcef5a788171a0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x97dcb3bc244b2a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69186d892934524b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ef398852c3bf473));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffd88633bd69e206));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x97dcb3bc244b2a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69186d892934524b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4ef398852c3bf473));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfffffffffd88633c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x97dcb3bc244b2a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69186d892934524b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, AddExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x0b, 0x22, 0x28, 0x20, 0x0b, 0x22, 0x4c, 0x20,
      0x0b, 0x22, 0x70, 0x20, 0x0b, 0x22, 0x84, 0x20, 0x0b, 0x22, 0xa8,
      0x20, 0x0b, 0x22, 0xcc, 0x20, 0x0b, 0x22, 0xec, 0x20, 0x0b, 0x22,
      0x04, 0x20, 0x8b, 0x22, 0x28, 0x20, 0x8b, 0x22, 0x4c, 0x20, 0x8b,
      0x22, 0x70, 0x20, 0x8b, 0x22, 0x84, 0x20, 0x8b, 0x22, 0xa8, 0x20,
      0x8b, 0x22, 0xcc, 0x20, 0x8b, 0x22, 0xec, 0x20, 0x8b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xccaf3979704ca016));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa6f69dbfebc45acf));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6d6ba92c2c89f43c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9632669899489971));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ebc45afb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ebc6db27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006e295b7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f08e5c2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ebc45afb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ebc2db27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006e295b7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006e295b7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa6f69dbfebc45afb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa6f69dbfebc6db27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa6f69dc36e295b7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x71ea3556f08e5c2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa6f69dbfebc45afb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa6f69dbfebc2db27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa6f69dc36e295b7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccaf3979704ca016));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6f69dbfebc45acf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0c70698b6e295b7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9632669899489971));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, AddsExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x2b, 0x22, 0x28, 0x20, 0x2b, 0x22, 0x4c, 0x20,
      0x2b, 0x22, 0x70, 0x20, 0x2b, 0x22, 0x84, 0x20, 0x2b, 0x22, 0xa8,
      0x20, 0x2b, 0x22, 0xcc, 0x20, 0x2b, 0x22, 0xec, 0x20, 0x2b, 0x22,
      0x04, 0x20, 0xab, 0x22, 0x28, 0x20, 0xab, 0x22, 0x4c, 0x20, 0xab,
      0x22, 0x70, 0x20, 0xab, 0x22, 0x84, 0x20, 0xab, 0x22, 0xa8, 0x20,
      0xab, 0x22, 0xcc, 0x20, 0xab, 0x22, 0xec, 0x20, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbc452ff0e5459501));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc1a2b2dd7392f5c9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5cd452debd072eba));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcee53d8fa3f5e469));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000007392f5cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000739549cd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000009dbf9dd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c7ec45d9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000007392f5cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000739149cd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000009dbf9dd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000009dbf9dd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a2b2dd7392f5cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a2b2dd739549cd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a2b2e49dbf9dd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x85f5b1ebc7ec45d9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a2b2dd7392f5cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a2b2dd739149cd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1a2b2dc9dbf9dd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc452ff0e5459501));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1a2b2dd7392f5c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa3cc32649dbf9dd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcee53d8fa3f5e469));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, CmnExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x04, 0x20, 0x2b, 0x3f, 0x28, 0x20, 0x2b, 0x3f, 0x4c, 0x20,
      0x2b, 0x3f, 0x70, 0x20, 0x2b, 0x3f, 0x84, 0x20, 0x2b, 0x3f, 0xa8,
      0x20, 0x2b, 0x3f, 0xcc, 0x20, 0x2b, 0x3f, 0xec, 0x20, 0x2b, 0x3f,
      0x04, 0x20, 0xab, 0x3f, 0x28, 0x20, 0xab, 0x3f, 0x4c, 0x20, 0xab,
      0x3f, 0x70, 0x20, 0xab, 0x3f, 0x84, 0x20, 0xab, 0x3f, 0xa8, 0x20,
      0xab, 0x3f, 0xcc, 0x20, 0xab, 0x3f, 0xec, 0x20, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf17e6cf2e5be41e3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xaf1084a66f0036e2));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe9371c324fe448bc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe6076f5acfb69f3a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf17e6cf2e5be41e3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf1084a66f0036e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9371c324fe448bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe6076f5acfb69f3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, SubExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x4b, 0x22, 0x28, 0x20, 0x4b, 0x22, 0x4c, 0x20,
      0x4b, 0x22, 0x70, 0x20, 0x4b, 0x22, 0x84, 0x20, 0x4b, 0x22, 0xa8,
      0x20, 0x4b, 0x22, 0xcc, 0x20, 0x4b, 0x22, 0xec, 0x20, 0x4b, 0x22,
      0x04, 0x20, 0xcb, 0x22, 0x28, 0x20, 0xcb, 0x22, 0x4c, 0x20, 0xcb,
      0x22, 0x70, 0x20, 0xcb, 0x22, 0x84, 0x20, 0xcb, 0x22, 0xa8, 0x20,
      0xcb, 0x22, 0xcc, 0x20, 0xcb, 0x22, 0xec, 0x20, 0xcb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x892a75a4fd399485));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x86b3327be796a035));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb6196dd3d46ef0e9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xfe82e10aae84606a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e7969f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e7944e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fdc9fc0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000013fd57e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e796a12b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e7984e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fdc9fc0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fdc9fc0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86b3327be7969f2b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86b3327be7944e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86b33273fdc9fc0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf40bd82c13fd57e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86b3327be796a12b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86b3327be7984e21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86b3327bfdc9fc0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892a75a4fd399485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86b3327be796a035));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x3d5f8553fdc9fc0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfe82e10aae84606a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, SubsExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x6b, 0x22, 0x28, 0x20, 0x6b, 0x22, 0x4c, 0x20,
      0x6b, 0x22, 0x70, 0x20, 0x6b, 0x22, 0x84, 0x20, 0x6b, 0x22, 0xa8,
      0x20, 0x6b, 0x22, 0xcc, 0x20, 0x6b, 0x22, 0xec, 0x20, 0x6b, 0x22,
      0x04, 0x20, 0xeb, 0x22, 0x28, 0x20, 0xeb, 0x22, 0x4c, 0x20, 0xeb,
      0x22, 0x70, 0x20, 0xeb, 0x22, 0x84, 0x20, 0xeb, 0x22, 0xa8, 0x20,
      0xeb, 0x22, 0xcc, 0x20, 0xeb, 0x22, 0xec, 0x20, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xdbd27da1f0d7f562));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe7442ac6153eb500));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x898a6be4546aaa98));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe91b38e530cc31c0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000153eb43c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000153adf78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008e7f09f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000007bf5ee0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000153eb43c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000153edf78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008e7f09f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008e7f09f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7442ac6153eb43c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7442ac6153adf78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7442abe8e7f09f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1c50a707bf5ee0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7442ac6153eb43c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7442ac6153edf78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7442ac68e7f09f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdbd27da1f0d7f562));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7442ac6153eb500));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x08b03db68e7f09f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91b38e530cc31c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, CmpExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x04, 0x20, 0x6b, 0x3f, 0x28, 0x20, 0x6b, 0x3f, 0x4c, 0x20,
      0x6b, 0x3f, 0x70, 0x20, 0x6b, 0x3f, 0x84, 0x20, 0x6b, 0x3f, 0xa8,
      0x20, 0x6b, 0x3f, 0xcc, 0x20, 0x6b, 0x3f, 0xec, 0x20, 0x6b, 0x3f,
      0x04, 0x20, 0xeb, 0x3f, 0x28, 0x20, 0xeb, 0x3f, 0x4c, 0x20, 0xeb,
      0x3f, 0x70, 0x20, 0xeb, 0x3f, 0x84, 0x20, 0xeb, 0x3f, 0xa8, 0x20,
      0xeb, 0x3f, 0xcc, 0x20, 0xeb, 0x3f, 0xec, 0x20, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb16f653e717c2ed8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x903fc34f739869cf));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe620ed1aa4ff5c5e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcde113073782b94f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb16f653e717c2ed8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x903fc34f739869cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe620ed1aa4ff5c5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcde113073782b94f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

}  // namespace aarch64
}  // namespace reil

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

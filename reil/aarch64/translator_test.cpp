// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstdio>
#include <random>

#include "gtest/gtest.h"

#include "reil/aarch64.h"

namespace reil {
namespace test {

// NOTE: This file is generated by aarch64_test_generator.py - please add new
// tests there and regenerate this file instead of modifying this file directly.

TEST(AArch64Translator, Adr) {
  std::vector<uint8_t> bytes = {
      0x00,
      0x00,
      0x00,
      0x10,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x37afcfff2a39a4c4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5a128ce6ca91087a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4fd2e494395998c6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6ca6a72308f2ffd8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5a128ce6ca91087a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4fd2e494395998c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6ca6a72308f2ffd8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Adrp) {
  std::vector<uint8_t> bytes = {
      0x00,
      0x00,
      0x00,
      0x90,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6663fc68edd23a37));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x616b8517603dda4a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe20b549e075277f6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf5cbed6f606440f0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x616b8517603dda4a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe20b549e075277f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5cbed6f606440f0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, AddImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0x91, 0x01, 0x48, 0x40, 0x91, 0x01, 0xfc, 0x3f, 0x11,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe5592aafc8ceddd3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x79922af3132aef5b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9c19997c6d96bdcd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x964b636e2f73799e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe5592aafc8ceddd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5592aafc8cedde5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9c19997c6d96bdcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x964b636e2f73799e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe5592aafc8ceddd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5592aafc8cffdd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9c19997c6d96bdcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x964b636e2f73799e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xe5592aafc8ceddd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000c8ceedd2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9c19997c6d96bdcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x964b636e2f73799e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AddsImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0xb1, 0x01, 0x48, 0x40, 0xb1, 0x01, 0xfc, 0x7f, 0x31,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc5d5b53f8b9a983e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4a9cd203daf90557));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5d2b612352530764));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf5538de8d249461f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc5d5b53f8b9a983e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc5d5b53f8b9a9850));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d2b612352530764));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5538de8d249461f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc5d5b53f8b9a983e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc5d5b53f8b9bb83e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d2b612352530764));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5538de8d249461f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc5d5b53f8b9a983e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000008c9a883e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d2b612352530764));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5538de8d249461f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, CmnImmediate) {
  std::vector<uint8_t> bytes = {
      0x1f, 0xf8, 0x3d, 0xb1, 0x1f, 0xf8, 0x7d, 0x31,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcaf5674f00ecf987));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x96327406c8f0586e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc1643546f25794b3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe937b77dfead80a4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcaf5674f00ecf987));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96327406c8f0586e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1643546f25794b3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe937b77dfead80a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcaf5674f00ecf987));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96327406c8f0586e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc1643546f25794b3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe937b77dfead80a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CmpImmediate) {
  std::vector<uint8_t> bytes = {
      0x1f, 0xf8, 0x3d, 0xf1, 0x1f, 0xf8, 0x7d, 0x71,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd8625700d7c517f6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xda4b51e265714ad5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc6c6245183cdf4d7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x154e5b8c4428f612));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd8625700d7c517f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda4b51e265714ad5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc6c6245183cdf4d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x154e5b8c4428f612));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd8625700d7c517f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda4b51e265714ad5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc6c6245183cdf4d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x154e5b8c4428f612));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, MovToFromSp) {
  std::vector<uint8_t> bytes = {
      0x1f, 0x00, 0x00, 0x91, 0xe1, 0x03, 0x00, 0x11,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4fc1fc68d635d373));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe099371e494c0bf8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x18772849d8f153d9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x02f60bd09f9f8742));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4fc1fc68d635d373));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe099371e494c0bf8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x18772849d8f153d9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x02f60bd09f9f8742));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4fc1fc68d635d373));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d635d373));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x18772849d8f153d9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x02f60bd09f9f8742));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, SubImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0xd1, 0x01, 0x48, 0x40, 0xd1, 0x01, 0xfc, 0x3f, 0x51,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x68f4dd375e5cc14b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9607fd0c8f5f5f17));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd1203fcf29166fcc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc6482542745d8ba7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x68f4dd375e5cc14b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x68f4dd375e5cc139));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd1203fcf29166fcc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6482542745d8ba7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x68f4dd375e5cc14b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x68f4dd375e5ba14b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd1203fcf29166fcc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6482542745d8ba7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x68f4dd375e5cc14b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000005e5cb14c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd1203fcf29166fcc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6482542745d8ba7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, SubsImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x48, 0x00, 0xf1, 0x01, 0x48, 0x40, 0xf1, 0x01, 0xfc, 0x7f, 0x71,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc803557f5af66661));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7d5085266871c367));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4227ed7ab8faef6b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x893be8b69f7d6772));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc803557f5af66661));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc803557f5af6664f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4227ed7ab8faef6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x893be8b69f7d6772));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc803557f5af66661));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc803557f5af54661));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4227ed7ab8faef6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x893be8b69f7d6772));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc803557f5af66661));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000059f67661));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4227ed7ab8faef6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x893be8b69f7d6772));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AndImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0x92, 0x01, 0x9c, 0x08, 0x92, 0x01, 0x24, 0x00, 0x12,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x31e671644a67814a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd28e31509946ef96));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x04efc69d734aa0a6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7641bd755348b399));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x31e671644a67814a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00c0404040408040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x04efc69d734aa0a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7641bd755348b399));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x31e671644a67814a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x310071004a008100));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x04efc69d734aa0a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7641bd755348b399));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x31e671644a67814a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000000000014a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x04efc69d734aa0a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7641bd755348b399));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, OrrImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0xb2, 0x01, 0x9c, 0x08, 0xb2, 0x01, 0x24, 0x00, 0x32,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6001682be075db86));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x382c13a7b369b630));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x784926b0ac39d7ca));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x43c14f0f2f55516d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6001682be075db86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0c1e8ebe0f5dbc6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x784926b0ac39d7ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43c14f0f2f55516d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6001682be075db86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xff01ff2bff75ff86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x784926b0ac39d7ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43c14f0f2f55516d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6001682be075db86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000e075dbff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x784926b0ac39d7ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43c14f0f2f55516d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, EorImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0xd2, 0x01, 0x9c, 0x08, 0xd2, 0x01, 0x24, 0x00, 0x52,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4f9fdc48aebdb5a5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xaf257bc93b9b357a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x376413944007ebe2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7ce8986c04a05409));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4f9fdc48aebdb5a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8f5f1c886e7d7565));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x376413944007ebe2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ce8986c04a05409));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4f9fdc48aebdb5a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb09f234851bd4aa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x376413944007ebe2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ce8986c04a05409));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4f9fdc48aebdb5a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000aebdb65a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x376413944007ebe2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ce8986c04a05409));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AndsImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xc4, 0x02, 0xf2, 0x01, 0x9c, 0x08, 0xf2, 0x01, 0x24, 0x00, 0x72,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x64904abb32270ab4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x33dd817294b79d02));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x00796bbde56b173f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe756f37d710717fe));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x64904abb32270ab4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4080408000000080));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00796bbde56b173f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe756f37d710717fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x64904abb32270ab4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x64004a0032000a00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00796bbde56b173f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe756f37d710717fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x64904abb32270ab4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000000002b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00796bbde56b173f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe756f37d710717fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, TstImmediate) {
  std::vector<uint8_t> bytes = {
      0x1f, 0x28, 0x40, 0xf2, 0x1f, 0x24, 0x00, 0x72,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x83777378764282b7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe7c183718d1cb52a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x60ef0dd7383f6b49));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa21c9fe52a122011));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x83777378764282b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7c183718d1cb52a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x60ef0dd7383f6b49));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa21c9fe52a122011));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x83777378764282b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe7c183718d1cb52a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x60ef0dd7383f6b49));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa21c9fe52a122011));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Movn) {
  std::vector<uint8_t> bytes = {
      0xe0, 0xff, 0x9f, 0x92, 0xe0, 0xff, 0xdf, 0x92, 0xe0, 0x1f, 0xa0, 0x12,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x83a4720ac8f1bcb7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xac4fd9234decb92e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x20b14bc66907cae9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0c54e37b079176b8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffffffffffff0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac4fd9234decb92e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x20b14bc66907cae9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0c54e37b079176b8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffff0000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac4fd9234decb92e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x20b14bc66907cae9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0c54e37b079176b8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000ff00ffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xac4fd9234decb92e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x20b14bc66907cae9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0c54e37b079176b8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Movz) {
  std::vector<uint8_t> bytes = {
      0x80, 0x46, 0x82, 0xd2, 0xa0, 0x79, 0xd5, 0xd2, 0x40, 0x02, 0xa0, 0x52,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7ff95c07f1329271));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6c45edee9db7dc1a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x84b4ecb234d74932));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xea0660092e1efca1));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c45edee9db7dc1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x84b4ecb234d74932));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xea0660092e1efca1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000abcd00000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c45edee9db7dc1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x84b4ecb234d74932));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xea0660092e1efca1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000120000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c45edee9db7dc1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x84b4ecb234d74932));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xea0660092e1efca1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Movk) {
  std::vector<uint8_t> bytes = {
      0x80, 0x46, 0xe2, 0xf2, 0xa0, 0x79, 0xd5, 0xf2, 0x40, 0x02, 0xa0, 0x72,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf90215f2c14f25fc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8dbf7ecdb2879fd3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1c34365abbe14f86));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x54e239cb385ad516));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x123415f2c14f25fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8dbf7ecdb2879fd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1c34365abbe14f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54e239cb385ad516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1234abcdc14f25fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8dbf7ecdb2879fd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1c34365abbe14f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54e239cb385ad516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000001225fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8dbf7ecdb2879fd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1c34365abbe14f86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54e239cb385ad516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AsrImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xfc, 0x4b, 0x93, 0x01, 0x7c, 0x06, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa0b8264867bb5fdb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x959c6bac1775fb37));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8e62344c8f2e65f9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc7d38109b8067c39));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa0b8264867bb5fdb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfff41704c90cf76b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e62344c8f2e65f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc7d38109b8067c39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa0b8264867bb5fdb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000019eed7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e62344c8f2e65f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc7d38109b8067c39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbfiz) {
  std::vector<uint8_t> bytes = {
      0x01, 0x18, 0x4a, 0x93, 0x01, 0x04, 0x13, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x299625fa2ffd5404));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd560238963af29ba));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x854981786c9faaac));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa21fbb9bce0bb57e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x299625fa2ffd5404));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0100000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x854981786c9faaac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa21fbb9bce0bb57e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x299625fa2ffd5404));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x854981786c9faaac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa21fbb9bce0bb57e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbfx) {
  std::vector<uint8_t> bytes = {
      0x01, 0xb0, 0x4b, 0x93, 0x01, 0x08, 0x01, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6f47a5773f1e1d85));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc40300531f6e481c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x34c3c5dd3f15af4a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x33e68f6c21867645));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f47a5773f1e1d85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000aee7e3c3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x34c3c5dd3f15af4a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x33e68f6c21867645));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f47a5773f1e1d85));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000fffffffe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x34c3c5dd3f15af4a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x33e68f6c21867645));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sxtb) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x1c,
      0x00,
      0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x05ed22b29eedb712));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbcfe16a42bc14a75));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x22ac5d2a7428f7a0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf12230c8f32eab60));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x05ed22b29eedb712));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000012));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x22ac5d2a7428f7a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf12230c8f32eab60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Sxth) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x3c,
      0x00,
      0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb447caf96e9b1675));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2397faa987d4b081));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfb9f9dc7df438d2d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xea449db17c3c9cd9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb447caf96e9b1675));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001675));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfb9f9dc7df438d2d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xea449db17c3c9cd9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Bfi) {
  std::vector<uint8_t> bytes = {
      0x01, 0x40, 0x79, 0xb3, 0x01, 0x00, 0x42, 0xb3, 0x01, 0x24, 0x0c, 0x33,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x51e2cb4a1e37903d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc1297913e1072cde));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa9afb2721c348d08));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2c3de277362c974b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x51e2cb4a1e37903d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1297913e1c81ede));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa9afb2721c348d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2c3de277362c974b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x51e2cb4a1e37903d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc1297913e1c81ede));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa9afb2721c348d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2c3de277362c974b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x51e2cb4a1e37903d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000c3d81ede));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa9afb2721c348d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2c3de277362c974b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Bfxil) {
  std::vector<uint8_t> bytes = {
      0x01, 0x5c, 0x47, 0xb3, 0x01, 0xf8, 0x7e, 0xb3, 0x01, 0x74, 0x14, 0x33,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x261b9cbf6725c564));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3b1403187d5393a2));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7a59b01063718202));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x511de203808e3f57));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x261b9cbf6725c564));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3b1403187d524b8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7a59b01063718202));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x511de203808e3f57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x261b9cbf6725c564));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3b1403187d524b8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7a59b01063718202));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x511de203808e3f57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x261b9cbf6725c564));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007d524a72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7a59b01063718202));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x511de203808e3f57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LslImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xb8, 0x6f, 0xd3, 0x01, 0x70, 0x1d, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8dd19130e2192cb5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x028acd373dc1263d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x71b84d2ecde12953));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc7d9a8fbbf420a96));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8dd19130e2192cb5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2261c432596a0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x71b84d2ecde12953));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc7d9a8fbbf420a96));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8dd19130e2192cb5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000010c965a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x71b84d2ecde12953));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc7d9a8fbbf420a96));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, LsrImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0xfc, 0x4b, 0xd3, 0x01, 0x7c, 0x06, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x82acaf2992b60dc0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xaca344c005fed775));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6fe283c4146dd8b5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3cc70036bac8bcb3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82acaf2992b60dc0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00105595e53256c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6fe283c4146dd8b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3cc70036bac8bcb3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x82acaf2992b60dc0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000024ad837));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6fe283c4146dd8b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3cc70036bac8bcb3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Ubfiz) {
  std::vector<uint8_t> bytes = {
      0x01, 0x18, 0x4a, 0xd3, 0x01, 0x04, 0x13, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xccad510e8708d6a6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x367c89cdf1b11b12));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7539baaf435066ad));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6275163a9fb561f6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccad510e8708d6a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0980000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7539baaf435066ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6275163a9fb561f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xccad510e8708d6a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000004000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7539baaf435066ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6275163a9fb561f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Ubfx) {
  std::vector<uint8_t> bytes = {
      0x01, 0xb0, 0x4b, 0xd3, 0x01, 0x08, 0x01, 0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xdf8e6d0e8eb05f2f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2bbeedf8af5641e5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6b7920e5978b33a4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9a666da7b4e11322));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdf8e6d0e8eb05f2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000001a1d1d60b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6b7920e5978b33a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a666da7b4e11322));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdf8e6d0e8eb05f2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6b7920e5978b33a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9a666da7b4e11322));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Uxtb) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x1c,
      0x00,
      0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x949db05a00a4f93d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x363055432e7200c5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf8e5c78b3f9c35bc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x82f1eeaf297bba7e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x949db05a00a4f93d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000000000003d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf8e5c78b3f9c35bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x82f1eeaf297bba7e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Uxth) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x3c,
      0x00,
      0x53,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd48ea79c1a893573));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0691b65a5f456969));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x585d9b2d2f72e651));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9873687d0c3c49ec));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd48ea79c1a893573));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000003573));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x585d9b2d2f72e651));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9873687d0c3c49ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, RorImmediate) {
  std::vector<uint8_t> bytes = {
      0x01, 0x9c, 0xc0, 0x93, 0x01, 0x18, 0x80, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x78038c2670f83934));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb255105dcbf856ac));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb0cb7cb7bec7b7ad));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8c9c4e97647382ce));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78038c2670f83934));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4ce1f07268f00718));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0cb7cb7bec7b7ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c9c4e97647382ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78038c2670f83934));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d1c3e0e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0cb7cb7bec7b7ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c9c4e97647382ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Extract) {
  std::vector<uint8_t> bytes = {
      0x22, 0xf4, 0xc0, 0x93, 0x22, 0x44, 0x80, 0x13,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x64c7e946a64df180));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1d113a50b4d8b995));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xdea7a019dff60241));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x14aa4900d45edf12));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x64c7e946a64df180));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1d113a50b4d8b995));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe889d285a6c5ccab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14aa4900d45edf12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x64c7e946a64df180));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1d113a50b4d8b995));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005ccad326));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14aa4900d45edf12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CompareAndBranch) {
  std::vector<uint8_t> bytes = {
      0x00, 0x00, 0x80, 0xd2, 0x81, 0x46, 0x82, 0xd2, 0xa0, 0x00, 0x00, 0xb5,
      0x40, 0x00, 0x00, 0xb4, 0x1f, 0x20, 0x03, 0xd5, 0x41, 0x00, 0x00, 0x34,
      0x41, 0x00, 0x00, 0x35, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7cc60e960fd55440));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3234d12b159812b1));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8e13748d6805cd63));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6c9d7bfd70411112));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3234d12b159812b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e13748d6805cd63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6c9d7bfd70411112));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e13748d6805cd63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6c9d7bfd70411112));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e13748d6805cd63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6c9d7bfd70411112));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e13748d6805cd63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6c9d7bfd70411112));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e13748d6805cd63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6c9d7bfd70411112));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e13748d6805cd63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6c9d7bfd70411112));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e13748d6805cd63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6c9d7bfd70411112));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));
}

TEST(AArch64Translator, ConditionalBranch) {
  std::vector<uint8_t> bytes = {
      0x00, 0x00, 0x80, 0xd2, 0x1f, 0x00, 0x00, 0xf1, 0x40, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x81, 0x02, 0x00, 0x54, 0x42, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x23, 0x02, 0x00, 0x54, 0x45, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0xc4, 0x01, 0x00, 0x54, 0x47, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x66, 0x01, 0x00, 0x54, 0x49, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x08, 0x01, 0x00, 0x54, 0x4a, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0xab, 0x00, 0x00, 0x54, 0x4d, 0x00, 0x00, 0x54,
      0x1f, 0x20, 0x03, 0xd5, 0x4e, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5,
      0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x32e30a04bffd1cdf));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x90a4786b09430aaf));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe4b761cf395a9588));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf2e6dcd8770ee05c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001044));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000104c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001050));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001058));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001060));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90a4786b09430aaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe4b761cf395a9588));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf2e6dcd8770ee05c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001064));
}

TEST(AArch64Translator, TestAndBranchIfZero) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x88, 0x36, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0ce3223fd50c765e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x92a6b24634fd0aa0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xda7a958c36f3b6f4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0e54a36915623095));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0ce3223fd50c765e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x92a6b24634fd0aa0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda7a958c36f3b6f4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e54a36915623095));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0ce3223fd50c765e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x92a6b24634fd0aa0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda7a958c36f3b6f4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0e54a36915623095));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, TestAndBranchIfNonzero) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0xf8, 0xb7, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xaebb3b70a058de56));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x069f2ea9332cdcff));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcba24d3f233c0d67));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcb48f016a3be6382));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaebb3b70a058de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x069f2ea9332cdcff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcba24d3f233c0d67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb48f016a3be6382));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaebb3b70a058de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x069f2ea9332cdcff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcba24d3f233c0d67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcb48f016a3be6382));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, BranchRegister) {
  std::vector<uint8_t> bytes = {
      0xa0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x1f, 0xd6, 0x1f, 0x20, 0x03, 0xd5,
      0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2994c5044d15c106));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x83757a12c96f15e4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x13187c0084678351));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5436959f59b91b83));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x83757a12c96f15e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x13187c0084678351));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5436959f59b91b83));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x83757a12c96f15e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x13187c0084678351));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5436959f59b91b83));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x83757a12c96f15e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x13187c0084678351));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5436959f59b91b83));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchAndLinkRegister) {
  std::vector<uint8_t> bytes = {
      0xa0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x3f, 0xd6, 0x1f, 0x20, 0x03, 0xd5,
      0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6a4796fa789b5e5b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0a740f3456a8958a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2632bb4eefaf356a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa8401c9deae6f371));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0a740f3456a8958a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2632bb4eefaf356a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa8401c9deae6f371));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0a740f3456a8958a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2632bb4eefaf356a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa8401c9deae6f371));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0a740f3456a8958a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2632bb4eefaf356a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa8401c9deae6f371));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchImmediateForward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20,
      0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0b2f2ee8eccd756b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1031c4f70c51e15f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x08e1926350dcb0d0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdefa69f35913e6c6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0b2f2ee8eccd756b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1031c4f70c51e15f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x08e1926350dcb0d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdefa69f35913e6c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0b2f2ee8eccd756b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1031c4f70c51e15f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x08e1926350dcb0d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdefa69f35913e6c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, BranchImmediateBackward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x03, 0x00, 0x00, 0x14,
      0x1f, 0x20, 0x03, 0xd5, 0xfd, 0xff, 0xff, 0x17, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xabee7d8365b04d38));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x696223ab3843248a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe7075c30af7af81d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x294da7caec67395f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xabee7d8365b04d38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x696223ab3843248a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7075c30af7af81d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x294da7caec67395f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xabee7d8365b04d38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x696223ab3843248a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7075c30af7af81d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x294da7caec67395f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xabee7d8365b04d38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x696223ab3843248a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7075c30af7af81d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x294da7caec67395f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xabee7d8365b04d38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x696223ab3843248a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7075c30af7af81d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x294da7caec67395f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xabee7d8365b04d38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x696223ab3843248a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7075c30af7af81d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x294da7caec67395f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchAndLinkImmediateForward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x94, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20,
      0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1d5d5556f99fc6c8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x71e6b25774633cee));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x09295c11f257e96b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x227572a6c3e3c4fd));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1d5d5556f99fc6c8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x71e6b25774633cee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x09295c11f257e96b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x227572a6c3e3c4fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1d5d5556f99fc6c8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x71e6b25774633cee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x09295c11f257e96b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x227572a6c3e3c4fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, BranchAndLinkImmediateBackward) {
  std::vector<uint8_t> bytes = {
      0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x03, 0x00, 0x00, 0x14,
      0x1f, 0x20, 0x03, 0xd5, 0xfd, 0xff, 0xff, 0x97, 0x1f, 0x20, 0x03, 0xd5,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd006dd5c4f09924a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf8764b96ec7b1d4a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xeee2549ca7b4219f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x121a27b4a47e2337));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd006dd5c4f09924a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf8764b96ec7b1d4a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xeee2549ca7b4219f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x121a27b4a47e2337));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd006dd5c4f09924a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf8764b96ec7b1d4a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xeee2549ca7b4219f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x121a27b4a47e2337));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd006dd5c4f09924a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf8764b96ec7b1d4a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xeee2549ca7b4219f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x121a27b4a47e2337));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd006dd5c4f09924a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf8764b96ec7b1d4a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xeee2549ca7b4219f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x121a27b4a47e2337));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd006dd5c4f09924a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf8764b96ec7b1d4a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xeee2549ca7b4219f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x121a27b4a47e2337));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, Stxrb) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x08, 0x41, 0x7c,
      0x00, 0x08, 0x40, 0x7c, 0x5f, 0x08, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x50b5a6b29a84a0fe));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x74664ae8d146c004));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x3d62d0005c7e4996));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7966fe7385ceabdb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x50b5a6b29a84a0fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x74664ae8d146c004));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7966fe7385ceabdb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x74664ae8d146c004));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7966fe7385ceabdb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x74664ae8d146c004));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7966fe7385ceabdb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000004));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x74664ae8d146c004));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7966fe7385ceabdb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000004));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x74664ae8d146c004));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7966fe7385ceabdb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrb) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x08, 0x41, 0xfc,
      0x00, 0x08, 0x40, 0xfc, 0x5f, 0x08, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4093e3e543f53e77));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0dec2cf14e31e663));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1c25a19c099da9c5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xfb759dac1d178608));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4093e3e543f53e77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0dec2cf14e31e663));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfb759dac1d178608));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0dec2cf14e31e663));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfb759dac1d178608));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0dec2cf14e31e663));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfb759dac1d178608));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000063));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0dec2cf14e31e663));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfb759dac1d178608));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000063));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0dec2cf14e31e663));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfb759dac1d178608));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrb) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x08, 0x41, 0xfc,
      0x9f, 0x08, 0x40, 0xfc, 0xdf, 0x08, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4da2ca5435181e1f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb9ea9631c5646ecb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x12f516d4ef178535));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8dacae272b062434));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da2ca5435181e1f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb9ea9631c5646ecb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8dacae272b062434));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb9ea9631c5646ecb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8dacae272b062434));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb9ea9631c5646ecb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8dacae272b062434));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000000cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb9ea9631c5646ecb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8dacae272b062434));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000000cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb9ea9631c5646ecb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8dacae272b062434));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrh) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x48, 0x41, 0x7c,
      0x00, 0x48, 0x40, 0x7c, 0x5f, 0x48, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc77af11e8d0ae192));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xeefdb75c4d546c25));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x65fc806ac11800ed));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x11ea4ebf77e889ec));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc77af11e8d0ae192));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeefdb75c4d546c25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x11ea4ebf77e889ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeefdb75c4d546c25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x11ea4ebf77e889ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeefdb75c4d546c25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x11ea4ebf77e889ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000006c25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeefdb75c4d546c25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x11ea4ebf77e889ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000006c25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeefdb75c4d546c25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x11ea4ebf77e889ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrh) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x48, 0x41, 0xfc,
      0x00, 0x48, 0x40, 0xfc, 0x5f, 0x48, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8d6d108cca037c69));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x302a305f04d765bd));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe2c9c49ada423c19));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc6d417ca94fb56f3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8d6d108cca037c69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x302a305f04d765bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6d417ca94fb56f3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x302a305f04d765bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6d417ca94fb56f3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x302a305f04d765bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6d417ca94fb56f3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000065bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x302a305f04d765bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6d417ca94fb56f3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000065bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x302a305f04d765bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6d417ca94fb56f3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrh) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x48, 0x41, 0xfc,
      0x9f, 0x48, 0x40, 0xfc, 0xdf, 0x48, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa658fc9da38955f6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf6aac84bec284f41));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfed4f910642f0b26));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa37474c87738eae7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa658fc9da38955f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6aac84bec284f41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa37474c87738eae7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6aac84bec284f41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa37474c87738eae7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6aac84bec284f41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa37474c87738eae7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004f41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6aac84bec284f41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa37474c87738eae7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004f41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6aac84bec284f41));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa37474c87738eae7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x88, 0x41, 0x7c,
      0x00, 0x88, 0x40, 0x7c, 0x5f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x14ba010a395fe995));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5f90dc53b300779a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x18e967f3346a6c70));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa9d73ab1414aa218));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x14ba010a395fe995));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5f90dc53b300779a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa9d73ab1414aa218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5f90dc53b300779a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa9d73ab1414aa218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5f90dc53b300779a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa9d73ab1414aa218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000b300779a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5f90dc53b300779a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa9d73ab1414aa218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000b300779a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5f90dc53b300779a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa9d73ab1414aa218));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxpw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x00, 0x7f, 0x88, 0x41, 0x0c,
      0x20, 0x88, 0x40, 0x04, 0x7f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x643058fe76ef47ad));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa1ed57f005d94208));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd0d086712dd2adaa));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xccdbf1aefb2bc5d5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x643058fe76ef47ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa1ed57f005d94208));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xccdbf1aefb2bc5d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa1ed57f005d94208));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xccdbf1aefb2bc5d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa1ed57f005d94208));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xccdbf1aefb2bc5d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000005d94208));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000fb2bc5d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xccdbf1aefb2bc5d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000005d94208));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000fb2bc5d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xccdbf1aefb2bc5d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxpw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x80, 0x7f, 0x88, 0x41, 0x8c,
      0x20, 0x88, 0x40, 0x84, 0x7f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8286129efb3093a6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb0f0d385c64024a5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x3a24e5f5699f982f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4bf65d7bd129e6af));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8286129efb3093a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb0f0d385c64024a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bf65d7bd129e6af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb0f0d385c64024a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bf65d7bd129e6af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb0f0d385c64024a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bf65d7bd129e6af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000c64024a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d129e6af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bf65d7bd129e6af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000c64024a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d129e6af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bf65d7bd129e6af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x88, 0x41, 0xfc,
      0x00, 0x88, 0x40, 0xfc, 0x5f, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5f375753735662df));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x78b85531d50a9038));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xdc89818079f7ea2e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x056b459de7bde9b4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5f375753735662df));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x78b85531d50a9038));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x056b459de7bde9b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x78b85531d50a9038));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x056b459de7bde9b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x78b85531d50a9038));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x056b459de7bde9b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000d50a9038));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x78b85531d50a9038));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x056b459de7bde9b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000d50a9038));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x78b85531d50a9038));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x056b459de7bde9b4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrw) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x88, 0x41, 0xfc,
      0x9f, 0x88, 0x40, 0xfc, 0xdf, 0x88, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4a5db6a7ef61be5f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x95e389444e4c9672));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xaf6a0874f05a757d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa53bf70f6698abd7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4a5db6a7ef61be5f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x95e389444e4c9672));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa53bf70f6698abd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x95e389444e4c9672));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa53bf70f6698abd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x95e389444e4c9672));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa53bf70f6698abd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000004e4c9672));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x95e389444e4c9672));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa53bf70f6698abd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000004e4c9672));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x95e389444e4c9672));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa53bf70f6698abd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrx) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0xc8, 0x41, 0x7c,
      0x00, 0xc8, 0x40, 0x7c, 0x5f, 0xc8, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x23aad4e2667fdd43));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1dfd75bb4a4a574a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5eb73faea49943f1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3a3781ffad079569));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x23aad4e2667fdd43));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1dfd75bb4a4a574a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a3781ffad079569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1dfd75bb4a4a574a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a3781ffad079569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1dfd75bb4a4a574a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a3781ffad079569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1dfd75bb4a4a574a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1dfd75bb4a4a574a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a3781ffad079569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1dfd75bb4a4a574a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1dfd75bb4a4a574a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3a3781ffad079569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrx) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0xc8, 0x41, 0xfc,
      0x00, 0xc8, 0x40, 0xfc, 0x5f, 0xc8, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x696db83b8eb9d7ef));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7c1178559d106fab));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb33bfc7a38cb1f27));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbcea0b388d3d0cbe));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x696db83b8eb9d7ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c1178559d106fab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbcea0b388d3d0cbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c1178559d106fab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbcea0b388d3d0cbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c1178559d106fab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbcea0b388d3d0cbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7c1178559d106fab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c1178559d106fab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbcea0b388d3d0cbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7c1178559d106fab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c1178559d106fab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbcea0b388d3d0cbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrx) {
  std::vector<uint8_t> bytes = {
      0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0xc8, 0x41, 0xfc,
      0x9f, 0xc8, 0x40, 0xfc, 0xdf, 0xc8, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc8b8f67e78e0ffe1));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7f0648894592fa18));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe85315460462dc43));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x636d69a522896829));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc8b8f67e78e0ffe1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7f0648894592fa18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x636d69a522896829));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7f0648894592fa18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x636d69a522896829));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7f0648894592fa18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x636d69a522896829));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7f0648894592fa18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7f0648894592fa18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x636d69a522896829));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7f0648894592fa18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7f0648894592fa18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x636d69a522896829));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, LdrwLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe0b38223260bb7cf));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4d10565140e06b03));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8f057ff6dbad2e05));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x289ee38353e470a5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4d10565140e06b03));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8f057ff6dbad2e05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x289ee38353e470a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4d10565140e06b03));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8f057ff6dbad2e05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x289ee38353e470a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrxLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x418890f769fcfe4f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3d78ff18237b3a9e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x209a44e3d5ffe0be));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb26886b5e733326d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3d78ff18237b3a9e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x209a44e3d5ffe0be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb26886b5e733326d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3d78ff18237b3a9e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x209a44e3d5ffe0be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb26886b5e733326d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrswLiteralPositive) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3dd48e66548184e6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x970a3081b498f768));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd2ad953e82e70d4d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe84ac3e1ccae317f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x970a3081b498f768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd2ad953e82e70d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe84ac3e1ccae317f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x970a3081b498f768));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd2ad953e82e70d4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe84ac3e1ccae317f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrswLiteralNegative) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x14,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xe94bbfdc08d523e1));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xfb8445b37d1e702f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc019870bf34703d4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2b87c5bed5040c82));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfb8445b37d1e702f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc019870bf34703d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2b87c5bed5040c82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfb8445b37d1e702f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc019870bf34703d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2b87c5bed5040c82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrsLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x40093b78fd98e417));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xefb35a3d57f2338b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd65265d36e983fa4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4cea2b1135fe7acc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));
}

TEST(AArch64Translator, LdrdLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x5c, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa9e8124bf2dd4653));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7a94ec6f1b213d39));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x3269a5c8ba8ad659));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3753436a3a98a1c0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));
}

TEST(AArch64Translator, LdrqLiteral) {
  std::vector<uint8_t> bytes = {
      0x40, 0x00, 0x00, 0x9c, 0x05, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7b8bb82130d41622));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8658e588d881dddd));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x45bc9f917333ad24));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe10b764d1b59efb8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));
}

TEST(AArch64Translator, Ldstnpw) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x02, 0x28, 0x41, 0x00, 0x42, 0x28,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf1621916d61d24cb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb2050d0b629302aa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xbc5e1bcd5dfc4e10));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xda7d3903d5e28bad));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1621916d61d24cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb2050d0b629302aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xda7d3903d5e28bad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1621916d61d24cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb2050d0b629302aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xda7d3903d5e28bad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000629302aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d61d24cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xda7d3903d5e28bad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Ldpsw) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x02, 0x29, 0x41, 0x00, 0x42, 0x69,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcb74d254dcaf4371));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0f797be3e5f59f0a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9fcc462ff6000914));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbec938040ade31f7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcb74d254dcaf4371));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0f797be3e5f59f0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbec938040ade31f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcb74d254dcaf4371));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0f797be3e5f59f0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbec938040ade31f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffffffffe5f59f0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffffffffdcaf4371));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbec938040ade31f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Ldstnpx) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x01, 0xa8, 0x41, 0x00, 0x41, 0xa8,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0fb264c69367a10b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3a929afa3c369d05));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x052cb880664887c5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd6c4bd8d9f31ee3c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0fb264c69367a10b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3a929afa3c369d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd6c4bd8d9f31ee3c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0fb264c69367a10b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3a929afa3c369d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd6c4bd8d9f31ee3c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3a929afa3c369d05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0fb264c69367a10b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd6c4bd8d9f31ee3c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LdstpwPreindex) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x81, 0x29,
      0x42, 0x00, 0x00, 0x10, 0x41, 0x00, 0xc1, 0x29,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4b57a668d0515d5c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1f5bba76468bef0a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb7c0dd7a6b7942f2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2546364874923129));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4b57a668d0515d5c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1f5bba76468bef0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2546364874923129));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4b57a668d0515d5c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1f5bba76468bef0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2546364874923129));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4b57a668d0515d5c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1f5bba76468bef0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2546364874923129));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000468bef0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d0515d5c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2546364874923129));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdstpwOffset) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x00, 0x29, 0x41, 0x80, 0x7f, 0x29,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf7dd1ece9b67360e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6f3bee8ffb538524));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd18ac21b65e2bb79));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8bc60155c7b24673));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf7dd1ece9b67360e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6f3bee8ffb538524));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bc60155c7b24673));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf7dd1ece9b67360e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6f3bee8ffb538524));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bc60155c7b24673));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000009b67360e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000297f8041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8bc60155c7b24673));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LdstpwPostindex) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x82, 0x28,
      0x42, 0x00, 0x00, 0x10, 0x41, 0x00, 0xc2, 0x28,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf31c82fde2092aa6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x42fefb728564702f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xdc2d739d9b15c1a0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x66a73386eaf4f9cc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf31c82fde2092aa6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x42fefb728564702f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x66a73386eaf4f9cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf31c82fde2092aa6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x42fefb728564702f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x66a73386eaf4f9cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf31c82fde2092aa6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x42fefb728564702f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x66a73386eaf4f9cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000008564702f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000e2092aa6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x66a73386eaf4f9cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdstpxPreindex) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x81, 0xa9,
      0x42, 0x00, 0x00, 0x10, 0x41, 0x00, 0xc1, 0xa9,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcfadee1ba521125e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xed0e99a2a4bf7387));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x75cf2518d69b84b9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6da64ef267744b10));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcfadee1ba521125e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xed0e99a2a4bf7387));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6da64ef267744b10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcfadee1ba521125e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xed0e99a2a4bf7387));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6da64ef267744b10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcfadee1ba521125e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xed0e99a2a4bf7387));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6da64ef267744b10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xed0e99a2a4bf7387));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcfadee1ba521125e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6da64ef267744b10));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdstpxOffset) {
  std::vector<uint8_t> bytes = {
      0x62, 0x00, 0x00, 0x10, 0x40, 0x84, 0x00, 0xa9, 0x41, 0x00, 0x41, 0xa9,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8178b2e84e8e253d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xce61cd5ac11c0744));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7411e2c8245ddd6b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa77c9136d12ae2b2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8178b2e84e8e253d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce61cd5ac11c0744));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa77c9136d12ae2b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8178b2e84e8e253d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce61cd5ac11c0744));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa77c9136d12ae2b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce61cd5ac11c0744));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa77c9136d12ae2b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LdstpxPostindex) {
  std::vector<uint8_t> bytes = {
      0x82, 0x00, 0x00, 0x10, 0x40, 0x84, 0x80, 0xa8,
      0x42, 0x00, 0x00, 0x10, 0x41, 0x80, 0xc0, 0xa8,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbe2195cf83b7c03e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x96b4611354c2a8fd));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xae22cc7b0435f94d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xfc3e0275d974fa93));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbe2195cf83b7c03e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96b4611354c2a8fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfc3e0275d974fa93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbe2195cf83b7c03e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96b4611354c2a8fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfc3e0275d974fa93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbe2195cf83b7c03e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x96b4611354c2a8fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfc3e0275d974fa93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x96b4611354c2a8fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbe2195cf83b7c03e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xfc3e0275d974fa93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, Adc) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0x9a, 0x22, 0x00, 0x00, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x63fe452433bb55a8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7fbe283d74610c27));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0ed052ee52e20e55));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb1d23002ef492105));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x63fe452433bb55a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7fbe283d74610c27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe3bc6d61a81c61cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb1d23002ef492105));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x63fe452433bb55a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7fbe283d74610c27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a81c61cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb1d23002ef492105));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Adcs) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0xba, 0x22, 0x00, 0x00, 0x3a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x205ec116b3c6ecc0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe5acd910705f3473));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x470d300215729ff4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4640a319f6af375b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x205ec116b3c6ecc0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5acd910705f3473));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x060b9a2724262134));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4640a319f6af375b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x205ec116b3c6ecc0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5acd910705f3473));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000024262134));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4640a319f6af375b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbc) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0xda, 0x22, 0x00, 0x00, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc321f98c5c1a4d49));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1d80bc930b38fc35));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8e3f653328c0037f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x270cc8071ef708d8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc321f98c5c1a4d49));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1d80bc930b38fc35));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5a5ec306af1eaeec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x270cc8071ef708d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc321f98c5c1a4d49));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1d80bc930b38fc35));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000af1eaeec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x270cc8071ef708d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbcs) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x00, 0xfa, 0x22, 0x00, 0x00, 0x7a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x181f9de045cfd955));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x61b15d071c2cde69));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8860a254b5568e10));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x332c000ff24ae0b6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x181f9de045cfd955));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x61b15d071c2cde69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4991bf26d65d0514));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x332c000ff24ae0b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x181f9de045cfd955));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x61b15d071c2cde69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d65d0514));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x332c000ff24ae0b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CcmpRegister) {
  std::vector<uint8_t> bytes = {
      0x69, 0x00, 0x42, 0xfa, 0x68, 0x10, 0x42, 0x7a, 0x6b, 0x20, 0x42, 0xfa,
      0x6a, 0x30, 0x42, 0x7a, 0x6f, 0x40, 0x42, 0xfa, 0x6e, 0x50, 0x42, 0x7a,
      0x66, 0x60, 0x42, 0xfa, 0x6d, 0x70, 0x42, 0x7a, 0x6c, 0x80, 0x42, 0xfa,
      0x65, 0x90, 0x42, 0x7a, 0x60, 0xa0, 0x42, 0xfa, 0x61, 0xb0, 0x42, 0x7a,
      0x63, 0xc0, 0x42, 0xfa, 0x67, 0xd0, 0x42, 0x7a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb95eb25dbb010438));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc4ed8a10f39a1205));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe836f3c06933eedd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x902d58d19b22bb45));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xf >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xf >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xf >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xf >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xe >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xe >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xe >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xe >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb95eb25dbb010438));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc4ed8a10f39a1205));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe836f3c06933eedd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x902d58d19b22bb45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmnRegister) {
  std::vector<uint8_t> bytes = {
      0x69, 0x00, 0x42, 0xba, 0x68, 0x10, 0x42, 0x3a, 0x6b, 0x20, 0x42, 0xba,
      0x6a, 0x30, 0x42, 0x3a, 0x6f, 0x40, 0x42, 0xba, 0x6e, 0x50, 0x42, 0x3a,
      0x66, 0x60, 0x42, 0xba, 0x6d, 0x70, 0x42, 0x3a, 0x6c, 0x80, 0x42, 0xba,
      0x65, 0x90, 0x42, 0x3a, 0x60, 0xa0, 0x42, 0xba, 0x61, 0xb0, 0x42, 0x3a,
      0x63, 0xc0, 0x42, 0xba, 0x67, 0xd0, 0x42, 0x3a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbfc122e2f0753060));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0e66ef2f02fd621f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2a1179d34993be29));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdc9a7db0289c8148));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xb >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xb >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xb >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xb >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xc >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xc >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xc >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xc >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfc122e2f0753060));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0e66ef2f02fd621f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a1179d34993be29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc9a7db0289c8148));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmpImmediate) {
  std::vector<uint8_t> bytes = {
      0x09, 0x08, 0x5f, 0xfa, 0x08, 0x18, 0x5e, 0x7a, 0x0b, 0x28, 0x5d, 0xfa,
      0x0a, 0x38, 0x5c, 0x7a, 0x0f, 0x48, 0x5b, 0xfa, 0x0e, 0x58, 0x5a, 0x7a,
      0x06, 0x68, 0x59, 0xfa, 0x0d, 0x78, 0x57, 0x7a, 0x0c, 0x88, 0x55, 0xfa,
      0x05, 0x98, 0x54, 0x7a, 0x00, 0xa8, 0x53, 0xfa, 0x01, 0xb8, 0x52, 0x7a,
      0x03, 0xc8, 0x41, 0xfa, 0x07, 0xd8, 0x40, 0x7a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf0040ea257d0e323));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6a27f3551244e2fa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6d527b84207b48c5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4683bf83a68ee8ac));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xe >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xe >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xe >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xe >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf0040ea257d0e323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6a27f3551244e2fa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6d527b84207b48c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4683bf83a68ee8ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmnImmediate) {
  std::vector<uint8_t> bytes = {
      0x09, 0x08, 0x5f, 0xba, 0x08, 0x18, 0x5e, 0x3a, 0x0b, 0x28, 0x5d, 0xba,
      0x0a, 0x38, 0x5c, 0x3a, 0x0f, 0x48, 0x5b, 0xba, 0x0e, 0x58, 0x5a, 0x3a,
      0x06, 0x68, 0x59, 0xba, 0x0d, 0x78, 0x57, 0x3a, 0x0c, 0x88, 0x55, 0xba,
      0x05, 0x98, 0x54, 0x3a, 0x00, 0xa8, 0x53, 0xba, 0x01, 0xb8, 0x52, 0x3a,
      0x03, 0xc8, 0x41, 0xba, 0x07, 0xd8, 0x40, 0x3a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x52d5026f8bc25d0a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x685a83b0cb4b037e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfe16d5bd0f1bc713));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x87831e06af0d1fef));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xb >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xb >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xb >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xb >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xc >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xc >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xc >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xc >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x52d5026f8bc25d0a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x685a83b0cb4b037e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfe16d5bd0f1bc713));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x87831e06af0d1fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Csel) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x80, 0x9a, 0x22, 0x10, 0x80, 0x1a, 0x22, 0x20, 0x80, 0x9a,
      0x22, 0x30, 0x80, 0x1a, 0x22, 0x40, 0x80, 0x9a, 0x22, 0x50, 0x80, 0x1a,
      0x22, 0x60, 0x80, 0x9a, 0x22, 0x70, 0x80, 0x1a, 0x22, 0x80, 0x80, 0x9a,
      0x22, 0x90, 0x80, 0x1a, 0x22, 0xa0, 0x80, 0x9a, 0x22, 0xb0, 0x80, 0x1a,
      0x22, 0xc0, 0x80, 0x9a, 0x22, 0xd0, 0x80, 0x1a, 0x22, 0xe0, 0x80, 0x9a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xfbf58eac6f4ca17a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe5ba44a3dc22738a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfb46d54a1b8b44e3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc2ba46ff93459d1a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbf58eac6f4ca17a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ba44a3dc22738a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc2ba46ff93459d1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csinc) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x80, 0x9a, 0x22, 0x14, 0x80, 0x1a, 0x22, 0x24, 0x80, 0x9a,
      0x22, 0x34, 0x80, 0x1a, 0x22, 0x44, 0x80, 0x9a, 0x22, 0x54, 0x80, 0x1a,
      0x22, 0x64, 0x80, 0x9a, 0x22, 0x74, 0x80, 0x1a, 0x22, 0x84, 0x80, 0x9a,
      0x22, 0x94, 0x80, 0x1a, 0x22, 0xa4, 0x80, 0x9a, 0x22, 0xb4, 0x80, 0x1a,
      0x22, 0xc4, 0x80, 0x9a, 0x22, 0xd4, 0x80, 0x1a, 0x22, 0xe4, 0x80, 0x9a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb0e1e13e6229eafb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdfd7c6afb55405ab));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe242945108cd7d8a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdf46a73648714b3a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0e1e13e6229eafc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0e1e13e6229eafc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0e1e13e6229eafc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006229eafc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0e1e13e6229eafc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0e1e13e6229eafc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0e1e13e6229eafc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0e1e13e6229eafb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdfd7c6afb55405ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdf46a73648714b3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csinv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x00, 0x80, 0xda, 0x22, 0x10, 0x80, 0x5a, 0x22, 0x20, 0x80, 0xda,
      0x22, 0x30, 0x80, 0x5a, 0x22, 0x40, 0x80, 0xda, 0x22, 0x50, 0x80, 0x5a,
      0x22, 0x60, 0x80, 0xda, 0x22, 0x70, 0x80, 0x5a, 0x22, 0x80, 0x80, 0xda,
      0x22, 0x90, 0x80, 0x5a, 0x22, 0xa0, 0x80, 0xda, 0x22, 0xb0, 0x80, 0x5a,
      0x22, 0xc0, 0x80, 0xda, 0x22, 0xd0, 0x80, 0x5a, 0x22, 0xe0, 0x80, 0xda,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9c7d9e59fc419ff6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe0792420bcec856b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa45871ca476daae8));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa3c929996e25f794));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x638261a603be6009));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x638261a603be6009));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x638261a603be6009));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x638261a603be6009));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x638261a603be6009));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000003be6009));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000003be6009));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7d9e59fc419ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe0792420bcec856b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa3c929996e25f794));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csneg) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x80, 0xda, 0x22, 0x14, 0x80, 0x5a, 0x22, 0x24, 0x80, 0xda,
      0x22, 0x34, 0x80, 0x5a, 0x22, 0x44, 0x80, 0xda, 0x22, 0x54, 0x80, 0x5a,
      0x22, 0x64, 0x80, 0xda, 0x22, 0x74, 0x80, 0x5a, 0x22, 0x84, 0x80, 0xda,
      0x22, 0x94, 0x80, 0x5a, 0x22, 0xa4, 0x80, 0xda, 0x22, 0xb4, 0x80, 0x5a,
      0x22, 0xc4, 0x80, 0xda, 0x22, 0xd4, 0x80, 0x5a, 0x22, 0xe4, 0x80, 0xda,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa1e2dead25f3a946));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf6bc8f121ca20fbe));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x68aaa20f59cbaca1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x867a936feb65f297));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000da0c56ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5e1d2152da0c56ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5e1d2152da0c56ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5e1d2152da0c56ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5e1d2152da0c56ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000da0c56ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5e1d2152da0c56ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa1e2dead25f3a946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf6bc8f121ca20fbe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x867a936feb65f297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Cset) {
  std::vector<uint8_t> bytes = {
      0xe2, 0x17, 0x9f, 0x9a, 0xe2, 0x07, 0x9f, 0x1a, 0xe2, 0x37, 0x9f, 0x9a,
      0xe2, 0x27, 0x9f, 0x1a, 0xe2, 0x57, 0x9f, 0x9a, 0xe2, 0x47, 0x9f, 0x1a,
      0xe2, 0x77, 0x9f, 0x9a, 0xe2, 0x67, 0x9f, 0x1a, 0xe2, 0x97, 0x9f, 0x9a,
      0xe2, 0x87, 0x9f, 0x1a, 0xe2, 0xb7, 0x9f, 0x9a, 0xe2, 0xa7, 0x9f, 0x1a,
      0xe2, 0xd7, 0x9f, 0x9a, 0xe2, 0xc7, 0x9f, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1224c1f1900c5075));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe0a973f92172afe4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x308e5bc0fbdacb89));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x74b4d7f67475de56));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1224c1f1900c5075));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe0a973f92172afe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x74b4d7f67475de56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Csetm) {
  std::vector<uint8_t> bytes = {
      0xe2, 0x13, 0x9f, 0xda, 0xe2, 0x03, 0x9f, 0x5a, 0xe2, 0x33, 0x9f, 0xda,
      0xe2, 0x23, 0x9f, 0x5a, 0xe2, 0x53, 0x9f, 0xda, 0xe2, 0x43, 0x9f, 0x5a,
      0xe2, 0x73, 0x9f, 0xda, 0xe2, 0x63, 0x9f, 0x5a, 0xe2, 0x93, 0x9f, 0xda,
      0xe2, 0x83, 0x9f, 0x5a, 0xe2, 0xb3, 0x9f, 0xda, 0xe2, 0xa3, 0x9f, 0x5a,
      0xe2, 0xd3, 0x9f, 0xda, 0xe2, 0xc3, 0x9f, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x15f163ffb9b07264));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5e366160b58c1437));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xce9d8d3ea9e47157));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x469a56b8ff7ad0c0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15f163ffb9b07264));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e366160b58c1437));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x469a56b8ff7ad0c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cinc) {
  std::vector<uint8_t> bytes = {
      0x01, 0x14, 0x80, 0x9a, 0x01, 0x04, 0x80, 0x1a, 0x01, 0x34, 0x80, 0x9a,
      0x01, 0x24, 0x80, 0x1a, 0x01, 0x54, 0x80, 0x9a, 0x01, 0x44, 0x80, 0x1a,
      0x01, 0x74, 0x80, 0x9a, 0x01, 0x64, 0x80, 0x1a, 0x01, 0x94, 0x80, 0x9a,
      0x01, 0x84, 0x80, 0x1a, 0x01, 0xb4, 0x80, 0x9a, 0x01, 0xa4, 0x80, 0x1a,
      0x01, 0xd4, 0x80, 0x9a, 0x01, 0xc4, 0x80, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xaf678be87cbadc22));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9bdefd5b1db0f053));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1b5b26c8438cecdd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xac2557856494effc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007cbadc23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007cbadc23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007cbadc23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf678be87cbadc23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007cbadc23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007cbadc23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaf678be87cbadc22));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007cbadc23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1b5b26c8438cecdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac2557856494effc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cinv) {
  std::vector<uint8_t> bytes = {
      0x01, 0x10, 0x80, 0xda, 0x01, 0x00, 0x80, 0x5a, 0x01, 0x30, 0x80, 0xda,
      0x01, 0x20, 0x80, 0x5a, 0x01, 0x50, 0x80, 0xda, 0x01, 0x40, 0x80, 0x5a,
      0x01, 0x70, 0x80, 0xda, 0x01, 0x60, 0x80, 0x5a, 0x01, 0x90, 0x80, 0xda,
      0x01, 0x80, 0x80, 0x5a, 0x01, 0xb0, 0x80, 0xda, 0x01, 0xa0, 0x80, 0x5a,
      0x01, 0xd0, 0x80, 0xda, 0x01, 0xc0, 0x80, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0062a0bebc6d01e5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd6a48b6ffea17bb5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x222bb9b85503fc60));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8aa64e190065ad0c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004392fe1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xff9d5f414392fe1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000bc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004392fe1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xff9d5f414392fe1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000bc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xff9d5f414392fe1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000bc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004392fe1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0062a0bebc6d01e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004392fe1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x222bb9b85503fc60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8aa64e190065ad0c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cneg) {
  std::vector<uint8_t> bytes = {
      0x01, 0x14, 0x80, 0xda, 0x01, 0x04, 0x80, 0x5a, 0x01, 0x34, 0x80, 0xda,
      0x01, 0x24, 0x80, 0x5a, 0x01, 0x54, 0x80, 0xda, 0x01, 0x44, 0x80, 0x5a,
      0x01, 0x74, 0x80, 0xda, 0x01, 0x64, 0x80, 0x5a, 0x01, 0x94, 0x80, 0xda,
      0x01, 0x84, 0x80, 0x5a, 0x01, 0xb4, 0x80, 0xda, 0x01, 0xa4, 0x80, 0x5a,
      0x01, 0xd4, 0x80, 0xda, 0x01, 0xc4, 0x80, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4eb2d8075fdf6e57));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbb05153f7fe52e68));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xba62f398085191f7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1a455d2d5eec59a6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb14d27f8a02091a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000005fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000a02091a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000a02091a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb14d27f8a02091a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000005fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000a02091a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000a02091a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4eb2d8075fdf6e57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000a02091a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xba62f398085191f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1a455d2d5eec59a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Sdiv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x0c, 0xc0, 0x9a, 0x22, 0x0c, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x30fe3fd5e66c7a7c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb96ee201ed4cd90a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x3fd6f3c5739462b9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd77e15a212fe1139));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x30fe3fd5e66c7a7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb96ee201ed4cd90a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd77e15a212fe1139));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x30fe3fd5e66c7a7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb96ee201ed4cd90a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd77e15a212fe1139));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Udiv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x08, 0xc0, 0x9a, 0x22, 0x08, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x15656fd52426a6bd));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x73648ca0f2e55253));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x12addfbb8b9e6d18));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x30b13d87c1e95a43));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15656fd52426a6bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x73648ca0f2e55253));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000005));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x30b13d87c1e95a43));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x15656fd52426a6bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x73648ca0f2e55253));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000006));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x30b13d87c1e95a43));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Lslv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x20, 0xc0, 0x9a, 0x22, 0x20, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x161983519cfd415d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa1f4b966126617ee));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x22dd7a168f3d7c96));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe0c1f0157954de3a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x161983519cfd415d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa1f4b966126617ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc24cc2fdc0000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe0c1f0157954de3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x161983519cfd415d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa1f4b966126617ee));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c0000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe0c1f0157954de3a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Lsrv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x24, 0xc0, 0x9a, 0x22, 0x24, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x08699dc238816c32));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdb496d8b8423ba90));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x812da0c47006b856));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x44369b66e947587e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x08699dc238816c32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdb496d8b8423ba90));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000000036d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x44369b66e947587e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x08699dc238816c32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdb496d8b8423ba90));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000002108));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x44369b66e947587e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Asrv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x28, 0xc0, 0x9a, 0x22, 0x28, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x942221fac195974e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb6560458a5b3ab42));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x05f49be6400bbb77));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x64924e58a0835bcd));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x942221fac195974e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb6560458a5b3ab42));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfffed958116296ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x64924e58a0835bcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x942221fac195974e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb6560458a5b3ab42));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fffe96ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x64924e58a0835bcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rorv) {
  std::vector<uint8_t> bytes = {
      0x22, 0x2c, 0xc0, 0x9a, 0x22, 0x2c, 0xc0, 0x1a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa2ee4a9873514939));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1af1ef39c5e2e589));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc94907f7461d2c9b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xde03ba8d3b3b9f6a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa2ee4a9873514939));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1af1ef39c5e2e589));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x78f79ce2f172c48d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xde03ba8d3b3b9f6a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xa2ee4a9873514939));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1af1ef39c5e2e589));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f172c4e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xde03ba8d3b3b9f6a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rbit) {
  std::vector<uint8_t> bytes = {
      0x01, 0x00, 0xc0, 0xda, 0x01, 0x00, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6abf82e027fbe621));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x16e5af0aabd03a59));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x49fafa1b193c7830));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0a9a2f8ba4308bea));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6abf82e027fbe621));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8467dfe40741fd56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x49fafa1b193c7830));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0a9a2f8ba4308bea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6abf82e027fbe621));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000008467dfe4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x49fafa1b193c7830));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0a9a2f8ba4308bea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rev16) {
  std::vector<uint8_t> bytes = {
      0x01, 0x04, 0xc0, 0xda, 0x01, 0x04, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xdecf4d14b058e0bc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd9b788566fe8b607));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x72658260280ff460));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb6aa9eae326c924a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdecf4d14b058e0bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcfde144d58b0bce0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x72658260280ff460));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6aa9eae326c924a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdecf4d14b058e0bc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000058b0bce0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x72658260280ff460));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb6aa9eae326c924a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rev32) {
  std::vector<uint8_t> bytes = {
      0x01,
      0x08,
      0xc0,
      0xda,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xee9db753fa0e61cd));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x14c10cf259bf2ca7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1d2d5be654495a07));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x55779157e2f1eea2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xee9db753fa0e61cd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x53b79deecd610efa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d2d5be654495a07));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x55779157e2f1eea2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Rev) {
  std::vector<uint8_t> bytes = {
      0x01, 0x0c, 0xc0, 0xda, 0x01, 0x08, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0bc48505dd8d8565));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6b4c0e387a3fc5bf));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2fa3f0b64f59925a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x84b8f96abd9d0bd0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0bc48505dd8d8565));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x65858ddd0585c40b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2fa3f0b64f59925a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x84b8f96abd9d0bd0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0bc48505dd8d8565));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000065858ddd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2fa3f0b64f59925a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x84b8f96abd9d0bd0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Clz) {
  std::vector<uint8_t> bytes = {
      0x01, 0x10, 0xc0, 0xda, 0x01, 0x10, 0xc0, 0x5a, 0xe0, 0x03,
      0x1f, 0xaa, 0x01, 0x10, 0xc0, 0xda, 0x01, 0x10, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1ad429829283f8fb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf1ab07af8486a5a7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x577fa5d8279761a1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4c93e294f59c3624));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ad429829283f8fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x577fa5d8279761a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c93e294f59c3624));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ad429829283f8fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x577fa5d8279761a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c93e294f59c3624));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x577fa5d8279761a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c93e294f59c3624));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x577fa5d8279761a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c93e294f59c3624));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x577fa5d8279761a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c93e294f59c3624));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, Cls) {
  std::vector<uint8_t> bytes = {
      0x01, 0x14, 0xc0, 0xda, 0x01, 0x14, 0xc0, 0x5a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8ed74954157aa9c5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd2b2defe2c0d24e0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xbb63c7bdd9982217));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa6666dbb101b6332));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8ed74954157aa9c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbb63c7bdd9982217));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6666dbb101b6332));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8ed74954157aa9c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000002));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbb63c7bdd9982217));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa6666dbb101b6332));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Madd) {
  std::vector<uint8_t> bytes = {
      0x43, 0x00, 0x01, 0x9b, 0x43, 0x00, 0x01, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4f07dc3d04b2f7d0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x87da0b5949f16c00));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc2de3a0597b3a316));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2d188d164440de75));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4f07dc3d04b2f7d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x87da0b5949f16c00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc2de3a0597b3a316));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3739e6809b363fd0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4f07dc3d04b2f7d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x87da0b5949f16c00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc2de3a0597b3a316));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x000000009b363fd0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Mul) {
  std::vector<uint8_t> bytes = {
      0x22, 0x7c, 0x00, 0x9b, 0x22, 0x7c, 0x00, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd9861d2e130e05ef));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb43249a0e5658236));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf0b904a326ae5459));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x023d503ce198b108));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd9861d2e130e05ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb43249a0e5658236));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd477799c46439e6a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x023d503ce198b108));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd9861d2e130e05ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb43249a0e5658236));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000046439e6a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x023d503ce198b108));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Msub) {
  std::vector<uint8_t> bytes = {
      0x43, 0x80, 0x01, 0x9b, 0x43, 0x80, 0x01, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6562a6796f508671));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd2fb8ea7d62c2a8a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x75872781f972c4b7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf60e7cb944a37fa8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6562a6796f508671));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2fb8ea7d62c2a8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x75872781f972c4b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0cc661f059b875cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6562a6796f508671));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd2fb8ea7d62c2a8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x75872781f972c4b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0000000059b875cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Mneg) {
  std::vector<uint8_t> bytes = {
      0x22, 0xfc, 0x00, 0x9b, 0x22, 0xfc, 0x00, 0x1b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb28cf034e5b35327));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0121b796f5d29b23));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa786aaae8b281ddc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7ac020547753f8ce));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb28cf034e5b35327));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0121b796f5d29b23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xef877c287c2504ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ac020547753f8ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb28cf034e5b35327));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0121b796f5d29b23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000007c2504ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ac020547753f8ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Smaddl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x00,
      0x21,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4f83c949b49eaf01));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x01ed0d30931a3d33));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x68cf6e9d4aebe716));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc6ccf98aff394d9c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4f83c949b49eaf01));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x01ed0d30931a3d33));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x68cf6e9d4aebe716));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2fa505c3f1e9f663));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smull) {
  std::vector<uint8_t> bytes = {
      0x22,
      0x7c,
      0x20,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd76c68a795d70032));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7802a2490fe5ea18));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x967837874ae382c9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb478e9fefdda5d12));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd76c68a795d70032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7802a2490fe5ea18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf9684142ad0fb8b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb478e9fefdda5d12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smsubl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x80,
      0x21,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xca9c41e77feae3d7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x04c5efef4279f2da));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x96737bdab9bbeede));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x266091163c8523a9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xca9c41e77feae3d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x04c5efef4279f2da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x96737bdab9bbeede));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdcdb47268b259ecb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smnegl) {
  std::vector<uint8_t> bytes = {
      0x22,
      0xfc,
      0x20,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xeca83c619b7e32eb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf554a2b510296875));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5fb3a99ef16da0df));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc6b395c9ceee19b5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xeca83c619b7e32eb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf554a2b510296875));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x06585e9dd3004299));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc6b395c9ceee19b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smulh) {
  std::vector<uint8_t> bytes = {
      0x22,
      0x7c,
      0x40,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd637d3af047270ed));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xecf6a4fb900424f7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x080726ae44f9d3d9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x17b32cf3e69183b2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd637d3af047270ed));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xecf6a4fb900424f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x031b622e72acba81));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17b32cf3e69183b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umaddl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x00,
      0xa1,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6571f0455da4db1d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2b4fb84027813220));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa95a10069161a68a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x88ff595e45a7cc0a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6571f0455da4db1d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2b4fb84027813220));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa95a10069161a68a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7be12f508deaa05d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umull) {
  std::vector<uint8_t> bytes = {
      0x22,
      0x7c,
      0xa0,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x32f306ef72e231c9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9cf66f2b9ae3d553));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x39a0ad49f7da4ac5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x50e54d1bb2a2ea02));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x32f306ef72e231c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9cf66f2b9ae3d553));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4582504081fd612b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x50e54d1bb2a2ea02));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umsubl) {
  std::vector<uint8_t> bytes = {
      0x43,
      0x80,
      0xa1,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x72cb3ac0b3e54d2a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0b5f99f841c423fe));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf7741cacac8145fc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2868ff766cc2c3ed));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x72cb3ac0b3e54d2a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b5f99f841c423fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf7741cacac8145fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x467a3cc14e206922));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umnegl) {
  std::vector<uint8_t> bytes = {
      0x22,
      0xfc,
      0xa0,
      0x9b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x28094a49bb9391bd));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x194881f33533e3b8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2d01525c40e9759e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa9079f8bed7976c4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x28094a49bb9391bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x194881f33533e3b8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd9046d932a0da928));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa9079f8bed7976c4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, AndShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x0a, 0x22, 0x24, 0x40, 0x0a, 0x22, 0x04, 0x80,
      0x0a, 0x22, 0x30, 0xc0, 0x0a, 0x22, 0x44, 0x00, 0x8a, 0x22, 0x24,
      0x40, 0x8a, 0x22, 0x94, 0x80, 0x8a, 0x22, 0xd4, 0xc0, 0x8a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf81b8f49ff534807));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa2a6ea186fd02333));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x692ec8fd776755fe));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x524fd20d390c0bf5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf81b8f49ff534807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa2a6ea186fd02333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x524fd20d390c0bf5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf81b8f49ff534807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa2a6ea186fd02333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000502120));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x524fd20d390c0bf5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf81b8f49ff534807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa2a6ea186fd02333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006f802003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x524fd20d390c0bf5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf81b8f49ff534807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa2a6ea186fd02333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000502130));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x524fd20d390c0bf5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf81b8f49ff534807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa2a6ea186fd02333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0282ea0000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x524fd20d390c0bf5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf81b8f49ff534807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa2a6ea186fd02333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0024080024d02120));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x524fd20d390c0bf5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf81b8f49ff534807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa2a6ea186fd02333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa2a6ea186fc00032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x524fd20d390c0bf5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf81b8f49ff534807));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa2a6ea186fd02333));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x80224a180a402300));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x524fd20d390c0bf5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, BicShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x0a, 0x22, 0x24, 0x60, 0x0a, 0x22, 0x04, 0xa0,
      0x0a, 0x22, 0x30, 0xe0, 0x0a, 0x22, 0x44, 0x20, 0x8a, 0x22, 0x24,
      0x60, 0x8a, 0x22, 0x94, 0xa0, 0x8a, 0x22, 0xd4, 0xe0, 0x8a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x380b6afdb8aac1da));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x03072ac4064730a5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2290337964907222));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x17dd58a4ffb42347));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x380b6afdb8aac1da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x03072ac4064730a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000044330a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17dd58a4ffb42347));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x380b6afdb8aac1da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x03072ac4064730a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000006032085));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17dd58a4ffb42347));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x380b6afdb8aac1da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x03072ac4064730a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000002021000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17dd58a4ffb42347));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x380b6afdb8aac1da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x03072ac4064730a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000002443001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17dd58a4ffb42347));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x380b6afdb8aac1da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x03072ac4064730a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x02040a80044330a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17dd58a4ffb42347));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x380b6afdb8aac1da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x03072ac4064730a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x03032a4000032085));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17dd58a4ffb42347));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x380b6afdb8aac1da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x03072ac4064730a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x03072ac4060720a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17dd58a4ffb42347));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x380b6afdb8aac1da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x03072ac4064730a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000020000412025));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x17dd58a4ffb42347));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, OrrShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x2a, 0x22, 0x24, 0x40, 0x2a, 0x22, 0x04, 0x80,
      0x2a, 0x22, 0x30, 0xc0, 0x2a, 0x22, 0x44, 0x00, 0xaa, 0x22, 0x24,
      0x40, 0xaa, 0x22, 0x94, 0x80, 0xaa, 0x22, 0xd4, 0xc0, 0xaa,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x470100a965e2dbfa));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xccdcc3f821ac2b29));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xeb4b50307a54898c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5ea203276112d1fe));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x470100a965e2dbfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xccdcc3f821ac2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b7fc2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ea203276112d1fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x470100a965e2dbfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xccdcc3f821ac2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000021befb6d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ea203276112d1fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x470100a965e2dbfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xccdcc3f821ac2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000033fd6ffd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ea203276112d1fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x470100a965e2dbfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xccdcc3f821ac2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000bfae7f2d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ea203276112d1fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x470100a965e2dbfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xccdcc3f821ac2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcddecbfdb7fc2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ea203276112d1fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x470100a965e2dbfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xccdcc3f821ac2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xccffc3f875befb6d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ea203276112d1fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x470100a965e2dbfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xccdcc3f821ac2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xccdcc3f823bc2b2d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ea203276112d1fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x470100a965e2dbfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xccdcc3f821ac2b29));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xccddcbff37fffb39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5ea203276112d1fe));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, MovShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x03, 0x00, 0xaa, 0xe1, 0x03, 0x00, 0x2a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0aa744ce1e99a908));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x785d2b25e03c8c93));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x24b80e9f9f43b969));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xce71a26ea9c19f99));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0aa744ce1e99a908));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0aa744ce1e99a908));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x24b80e9f9f43b969));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce71a26ea9c19f99));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0aa744ce1e99a908));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000001e99a908));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x24b80e9f9f43b969));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xce71a26ea9c19f99));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, OrnShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x2a, 0x22, 0x24, 0x60, 0x2a, 0x22, 0x04, 0xa0,
      0x2a, 0x22, 0x30, 0xe0, 0x2a, 0x22, 0x44, 0x20, 0xaa, 0x22, 0x24,
      0x60, 0xaa, 0x22, 0x94, 0xa0, 0xaa, 0x22, 0xd4, 0xe0, 0xaa,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x892c740f4236b7c9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd476cccf56874873));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x27e746967cdbb5e3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x674d567f0569f1ce));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892c740f4236b7c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd476cccf56874873));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d6efffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x674d567f0569f1ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892c740f4236b7c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd476cccf56874873));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffdfecf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x674d567f0569f1ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892c740f4236b7c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd476cccf56874873));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000dee7ec7b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x674d567f0569f1ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892c740f4236b7c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd476cccf56874873));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000d7efdcf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x674d567f0569f1ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892c740f4236b7c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd476cccf56874873));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd7f7ffdfd6efffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x674d567f0569f1ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892c740f4236b7c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd476cccf56874873));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffedcffedfecf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x674d567f0569f1ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892c740f4236b7c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd476cccf56874873));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd476cccf57b7dc7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x674d567f0569f1ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x892c740f4236b7c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd476cccf56874873));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdc7fcdef5ec7fbf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x674d567f0569f1ce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, MvnShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x03, 0x20, 0xaa, 0xe1, 0x03, 0x20, 0x2a,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbc6f63c58cdd6a60));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdd6c313ad1c05e37));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc23b32bb95dcf252));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6daf9d2d57e02672));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc6f63c58cdd6a60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43909c3a7322959f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc23b32bb95dcf252));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6daf9d2d57e02672));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbc6f63c58cdd6a60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007322959f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc23b32bb95dcf252));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6daf9d2d57e02672));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, EorShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x4a, 0x22, 0x24, 0x40, 0x4a, 0x22, 0x04, 0x80,
      0x4a, 0x22, 0x30, 0xc0, 0x4a, 0x22, 0x44, 0x00, 0xca, 0x22, 0x24,
      0x40, 0xca, 0x22, 0x94, 0x80, 0xca, 0x22, 0xd4, 0xc0, 0xca,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd67482a7fd28ec9b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa415200ebf68f835));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4110d0f940acd836));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe79c34027cc54167));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd67482a7fd28ec9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa415200ebf68f835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000665ef835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe79c34027cc54167));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd67482a7fd28ec9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa415200ebf68f835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000bf166c43));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe79c34027cc54167));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd67482a7fd28ec9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa415200ebf68f835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000041fc8e78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe79c34027cc54167));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd67482a7fd28ec9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa415200ebf68f835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000076d72abb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe79c34027cc54167));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd67482a7fd28ec9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa415200ebf68f835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa15ada5f665ef835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe79c34027cc54167));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd67482a7fd28ec9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa415200ebf68f835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa47e1a4fec966c43));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe79c34027cc54167));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd67482a7fd28ec9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa415200ebf68f835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5beadff141db5c20));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe79c34027cc54167));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd67482a7fd28ec9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa415200ebf68f835));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00001fe7f80c2686));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe79c34027cc54167));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, EonShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x4a, 0x22, 0x24, 0x60, 0x4a, 0x22, 0x04, 0xa0,
      0x4a, 0x22, 0x30, 0xe0, 0x4a, 0x22, 0x44, 0x20, 0xca, 0x22, 0x24,
      0x60, 0xca, 0x22, 0x94, 0xa0, 0xca, 0x22, 0xd4, 0xe0, 0xca,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x49a5e575c9aa556a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2382c6e2e64a09ff));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x849633e7811983c4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x574a2df47540ab23));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49a5e575c9aa556a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2382c6e2e64a09ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b361f600));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x574a2df47540ab23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49a5e575c9aa556a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2382c6e2e64a09ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000019d1232a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x574a2df47540ab23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49a5e575c9aa556a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2382c6e2e64a09ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fd60dcb5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x574a2df47540ab23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49a5e575c9aa556a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2382c6e2e64a09ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000004f196ca5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x574a2df47540ab23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49a5e575c9aa556a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2382c6e2e64a09ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1696aa49b361f600));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x574a2df47540ab23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49a5e575c9aa556a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2382c6e2e64a09ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdc59ebefa351232a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x574a2df47540ab23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49a5e575c9aa556a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2382c6e2e64a09ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdc7d391d1bf8d92b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x574a2df47540ab23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49a5e575c9aa556a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2382c6e2e64a09ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf35697504b1ea44d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x574a2df47540ab23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, AndsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x6a, 0x22, 0x24, 0x40, 0x6a, 0x22, 0x04, 0x80,
      0x6a, 0x22, 0x30, 0xc0, 0x6a, 0x22, 0x44, 0x00, 0xea, 0x22, 0x24,
      0x40, 0xea, 0x22, 0x94, 0x80, 0xea, 0x22, 0xd4, 0xc0, 0xea,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3266ddff3806127e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf2b75914a2e24d93));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x16a802ecf7c2643f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8c2f59ee36b4ab82));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3266ddff3806127e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2b75914a2e24d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000020e00000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c2f59ee36b4ab82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3266ddff3806127e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2b75914a2e24d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000101));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c2f59ee36b4ab82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3266ddff3806127e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2b75914a2e24d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000020913));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c2f59ee36b4ab82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3266ddff3806127e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2b75914a2e24d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000022e20001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c2f59ee36b4ab82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3266ddff3806127e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2b75914a2e24d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb2b6500420e00000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c2f59ee36b4ab82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3266ddff3806127e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2b75914a2e24d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00111104a2800101));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c2f59ee36b4ab82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3266ddff3806127e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2b75914a2e24d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000820483));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c2f59ee36b4ab82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3266ddff3806127e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2b75914a2e24d93));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x32a7590020824193));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8c2f59ee36b4ab82));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, BicsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x20, 0x6a, 0x22, 0x24, 0x60, 0x6a, 0x22, 0x04, 0xa0,
      0x6a, 0x22, 0x30, 0xe0, 0x6a, 0x22, 0x44, 0x20, 0xea, 0x22, 0x24,
      0x60, 0xea, 0x22, 0x94, 0xa0, 0xea, 0x22, 0xd4, 0xe0, 0xea,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb6a12c93c66119b9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf142f3f8f0595f77));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4df1fb5cbe380f4c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2d5c8eb2c501f32a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb6a12c93c66119b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf142f3f8f0595f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c0095f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2d5c8eb2c501f32a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb6a12c93c66119b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf142f3f8f0595f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f0184f73));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2d5c8eb2c501f32a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb6a12c93c66119b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf142f3f8f0595f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000010495323));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2d5c8eb2c501f32a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb6a12c93c66119b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf142f3f8f0595f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000060411966));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2d5c8eb2c501f32a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb6a12c93c66119b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf142f3f8f0595f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa0407338c0095f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2d5c8eb2c501f32a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb6a12c93c66119b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf142f3f8f0595f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf100a368b0184f73));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2d5c8eb2c501f32a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb6a12c93c66119b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf142f3f8f0595f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000485613));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2d5c8eb2c501f32a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb6a12c93c66119b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf142f3f8f0595f77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf00261c8f0101242));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2d5c8eb2c501f32a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, AddShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x0b, 0x22, 0x24, 0x40, 0x0b, 0x22, 0x04, 0x80, 0x0b,
      0x22, 0x44, 0x00, 0x8b, 0x22, 0x24, 0x40, 0x8b, 0x22, 0x94, 0x80, 0x8b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xaa576191a81f4c86));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1e9853d71b0a3ac5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xefd6e7c3cd078fde));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1b7495fa63f325ba));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaa576191a81f4c86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1e9853d71b0a3ac5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b4163ac5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1b7495fa63f325ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaa576191a81f4c86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1e9853d71b0a3ac5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000001b5e4a6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1b7495fa63f325ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaa576191a81f4c86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1e9853d71b0a3ac5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ef19e108));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1b7495fa63f325ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaa576191a81f4c86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1e9853d71b0a3ac5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe1bba415b4163ac5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1b7495fa63f325ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaa576191a81f4c86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1e9853d71b0a3ac5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1eed7f87e3de4a6b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1b7495fa63f325ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xaa576191a81f4c86));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1e9853d71b0a3ac5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1e9853d7185cf5d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1b7495fa63f325ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, AddsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x2b, 0x22, 0x24, 0x40, 0x2b, 0x22, 0x04, 0x80, 0x2b,
      0x22, 0x44, 0x00, 0xab, 0x22, 0x24, 0x40, 0xab, 0x22, 0x94, 0x80, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x16f6c8a470bfde60));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4b895dabb3c75293));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb54f4a880632b547));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5cee5bda6159e1a1));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16f6c8a470bfde60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4b895dabb3c75293));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000070875293));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cee5bda6159e1a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16f6c8a470bfde60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4b895dabb3c75293));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b3ffb282));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cee5bda6159e1a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16f6c8a470bfde60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4b895dabb3c75293));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ec2741c3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cee5bda6159e1a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16f6c8a470bfde60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4b895dabb3c75293));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xdcd23f2b70875293));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cee5bda6159e1a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16f6c8a470bfde60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4b895dabb3c75293));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4b94d91005ffb282));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cee5bda6159e1a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16f6c8a470bfde60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4b895dabb3c75293));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4b895dabb47f08d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5cee5bda6159e1a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, CmnShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x44, 0x00, 0x2b, 0x3f, 0x24, 0x40, 0x2b, 0x3f, 0x04, 0x80, 0x2b,
      0x3f, 0x44, 0x00, 0xab, 0x3f, 0x24, 0x40, 0xab, 0x3f, 0x94, 0x80, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x63d765836053df76));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa832c0193a3f56e9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x519db03f1bcdd62e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x422ea97e69c76e5a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x63d765836053df76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa832c0193a3f56e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x519db03f1bcdd62e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x422ea97e69c76e5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x63d765836053df76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa832c0193a3f56e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x519db03f1bcdd62e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x422ea97e69c76e5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x63d765836053df76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa832c0193a3f56e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x519db03f1bcdd62e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x422ea97e69c76e5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x63d765836053df76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa832c0193a3f56e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x519db03f1bcdd62e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x422ea97e69c76e5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x63d765836053df76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa832c0193a3f56e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x519db03f1bcdd62e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x422ea97e69c76e5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x63d765836053df76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa832c0193a3f56e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x519db03f1bcdd62e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x422ea97e69c76e5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, SubShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x4b, 0x22, 0x24, 0x40, 0x4b, 0x22, 0x04, 0x80, 0x4b,
      0x22, 0x44, 0x00, 0xcb, 0x22, 0x24, 0x40, 0xcb, 0x22, 0x94, 0x80, 0xcb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7aa2d904202217da));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xadfad3b0f4241b6e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe0edb33c017d878d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb51e430a6da187e9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7aa2d904202217da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xadfad3b0f4241b6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c4701b6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb51e430a6da187e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7aa2d904202217da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xadfad3b0f4241b6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f4140a63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb51e430a6da187e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7aa2d904202217da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xadfad3b0f4241b6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e4130f81));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb51e430a6da187e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7aa2d904202217da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xadfad3b0f4241b6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfbf2936cc4701b6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb51e430a6da187e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7aa2d904202217da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xadfad3b0f4241b6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xadbd824472140a63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb51e430a6da187e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7aa2d904202217da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xadfad3b0f4241b6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xadfad3b0f04f04a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb51e430a6da187e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, NegShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x47, 0x00, 0x4b, 0xe1, 0x27, 0x40, 0x4b, 0xe1, 0x07, 0x80, 0x4b,
      0xe1, 0x47, 0x00, 0xcb, 0xe1, 0x27, 0x40, 0xcb, 0xe1, 0x97, 0x80, 0xcb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf25b7740b76b0ec4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa42734b0b86f8b86));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x10d538f35c2e4979));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4e682f5cd8fab924));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf25b7740b76b0ec4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000e2780000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x10d538f35c2e4979));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4e682f5cd8fab924));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf25b7740b76b0ec4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffa44a79));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x10d538f35c2e4979));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4e682f5cd8fab924));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf25b7740b76b0ec4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000244a789e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x10d538f35c2e4979));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4e682f5cd8fab924));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf25b7740b76b0ec4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x117e9129e2780000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x10d538f35c2e4979));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4e682f5cd8fab924));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf25b7740b76b0ec4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xff86d2445fa44a79));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x10d538f35c2e4979));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4e682f5cd8fab924));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf25b7740b76b0ec4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000006d2446));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x10d538f35c2e4979));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4e682f5cd8fab924));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, SubsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x44, 0x00, 0x6b, 0x22, 0x24, 0x40, 0x6b, 0x22, 0x04, 0x80, 0x6b,
      0x22, 0x44, 0x00, 0xeb, 0x22, 0x24, 0x40, 0xeb, 0x22, 0x94, 0x80, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc06665ab36816280));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x324d9edda9073f0b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x40740d2bf567152e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2a332ed8b7d0af53));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc06665ab36816280));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x324d9edda9073f0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e4073f0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2a332ed8b7d0af53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc06665ab36816280));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x324d9edda9073f0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a8ebfe5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2a332ed8b7d0af53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc06665ab36816280));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x324d9edda9073f0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008dc68dcb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2a332ed8b7d0af53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc06665ab36816280));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x324d9edda9073f0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66f731dae4073f0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2a332ed8b7d0af53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc06665ab36816280));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x324d9edda9073f0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x31ed6baad36bfe5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2a332ed8b7d0af53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc06665ab36816280));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x324d9edda9073f0b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x324d9eddab040bde));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2a332ed8b7d0af53));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, CmpShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x44, 0x00, 0x6b, 0x3f, 0x24, 0x40, 0x6b, 0x3f, 0x04, 0x80, 0x6b,
      0x3f, 0x44, 0x00, 0xeb, 0x3f, 0x24, 0x40, 0xeb, 0x3f, 0x94, 0x80, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5ac15a334cf1e392));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x895be22e78249898));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8ab703be624bf22c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6fdc06e31df7bba8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5ac15a334cf1e392));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x895be22e78249898));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8ab703be624bf22c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6fdc06e31df7bba8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5ac15a334cf1e392));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x895be22e78249898));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8ab703be624bf22c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6fdc06e31df7bba8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5ac15a334cf1e392));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x895be22e78249898));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8ab703be624bf22c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6fdc06e31df7bba8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5ac15a334cf1e392));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x895be22e78249898));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8ab703be624bf22c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6fdc06e31df7bba8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5ac15a334cf1e392));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x895be22e78249898));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8ab703be624bf22c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6fdc06e31df7bba8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5ac15a334cf1e392));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x895be22e78249898));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8ab703be624bf22c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6fdc06e31df7bba8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, NegsShiftedRegister) {
  std::vector<uint8_t> bytes = {
      0xe1, 0x47, 0x00, 0x6b, 0xe1, 0x27, 0x40, 0x6b, 0xe1, 0x07, 0x80, 0x6b,
      0xe1, 0x47, 0x00, 0xeb, 0xe1, 0x27, 0x40, 0xeb, 0xe1, 0x97, 0x80, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0e846327c5a0d5dd));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x51aadc6076ff3637));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8fbb38d60b1eeebd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8cab7aaa0ee82723));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0e846327c5a0d5dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000054460000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8fbb38d60b1eeebd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8cab7aaa0ee82723));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0e846327c5a0d5dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ff9d2f96));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8fbb38d60b1eeebd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8cab7aaa0ee82723));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0e846327c5a0d5dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000001d2f9512));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8fbb38d60b1eeebd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8cab7aaa0ee82723));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0e846327c5a0d5dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x39b074be54460000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8fbb38d60b1eeebd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8cab7aaa0ee82723));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0e846327c5a0d5dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfff8bdce6c1d2f96));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8fbb38d60b1eeebd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8cab7aaa0ee82723));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0e846327c5a0d5dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffffffffff8bdce7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8fbb38d60b1eeebd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8cab7aaa0ee82723));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, AddExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x0b, 0x22, 0x28, 0x20, 0x0b, 0x22, 0x4c, 0x20,
      0x0b, 0x22, 0x70, 0x20, 0x0b, 0x22, 0x84, 0x20, 0x0b, 0x22, 0xa8,
      0x20, 0x0b, 0x22, 0xcc, 0x20, 0x0b, 0x22, 0xec, 0x20, 0x0b, 0x22,
      0x04, 0x20, 0x8b, 0x22, 0x28, 0x20, 0x8b, 0x22, 0x4c, 0x20, 0x8b,
      0x22, 0x70, 0x20, 0x8b, 0x22, 0x84, 0x20, 0x8b, 0x22, 0xa8, 0x20,
      0x8b, 0x22, 0xcc, 0x20, 0x8b, 0x22, 0xec, 0x20, 0x8b,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0614b09eabe7a456));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8503856a3069691a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0595fe13cb0e44f2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc32875d95ef3f530));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000306969c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000306bfa72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008fa68bca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000eee3ae7a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000306969c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000003067fa72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008fa68bca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008fa68bca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8503856a306969c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8503856a306bfa72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8503856f8fa68bca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe64e8f54eee3ae7a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8503856a306969c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8503856a3067fa72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x850385678fa68bca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0614b09eabe7a456));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8503856a3069691a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb5a90a5f8fa68bca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc32875d95ef3f530));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, AddsExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x2b, 0x22, 0x28, 0x20, 0x2b, 0x22, 0x4c, 0x20,
      0x2b, 0x22, 0x70, 0x20, 0x2b, 0x22, 0x84, 0x20, 0x2b, 0x22, 0xa8,
      0x20, 0x2b, 0x22, 0xcc, 0x20, 0x2b, 0x22, 0xec, 0x20, 0x2b, 0x22,
      0x04, 0x20, 0xab, 0x22, 0x28, 0x20, 0xab, 0x22, 0x4c, 0x20, 0xab,
      0x22, 0x70, 0x20, 0xab, 0x22, 0x84, 0x20, 0xab, 0x22, 0xa8, 0x20,
      0xab, 0x22, 0xcc, 0x20, 0xab, 0x22, 0xec, 0x20, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xecb4ef9f5c7905b7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe5ca4acbe381fb3f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd0577519623586e5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdfe0ab23d3a20905));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e381fcad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e382121b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c74a28f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ab1256af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e381faad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e382121b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c74a28f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c74a28f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ca4acbe381fcad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ca4acbe382121b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ca4acec74a28f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb11944c1ab1256af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ca4acbe381faad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ca4acbe382121b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe5ca4acec74a28f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecb4ef9f5c7905b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5ca4acbe381fb3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4b71c7c6c74a28f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdfe0ab23d3a20905));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, CmnExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x04, 0x20, 0x2b, 0x3f, 0x28, 0x20, 0x2b, 0x3f, 0x4c, 0x20,
      0x2b, 0x3f, 0x70, 0x20, 0x2b, 0x3f, 0x84, 0x20, 0x2b, 0x3f, 0xa8,
      0x20, 0x2b, 0x3f, 0xcc, 0x20, 0x2b, 0x3f, 0xec, 0x20, 0x2b, 0x3f,
      0x04, 0x20, 0xab, 0x3f, 0x28, 0x20, 0xab, 0x3f, 0x4c, 0x20, 0xab,
      0x3f, 0x70, 0x20, 0xab, 0x3f, 0x84, 0x20, 0xab, 0x3f, 0xa8, 0x20,
      0xab, 0x3f, 0xcc, 0x20, 0xab, 0x3f, 0xec, 0x20, 0xab,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd044974b3cb1324c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x34bd865b87eaf5d8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2e74267745eee677));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x639d7e65516f63cf));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd044974b3cb1324c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x34bd865b87eaf5d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2e74267745eee677));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x639d7e65516f63cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, SubExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x4b, 0x22, 0x28, 0x20, 0x4b, 0x22, 0x4c, 0x20,
      0x4b, 0x22, 0x70, 0x20, 0x4b, 0x22, 0x84, 0x20, 0x4b, 0x22, 0xa8,
      0x20, 0x4b, 0x22, 0xcc, 0x20, 0x4b, 0x22, 0xec, 0x20, 0x4b, 0x22,
      0x04, 0x20, 0xcb, 0x22, 0x28, 0x20, 0xcb, 0x22, 0x4c, 0x20, 0xcb,
      0x22, 0x70, 0x20, 0xcb, 0x22, 0x84, 0x20, 0xcb, 0x22, 0xa8, 0x20,
      0xcb, 0x22, 0xcc, 0x20, 0xcb, 0x22, 0xec, 0x20, 0xcb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x07e91f9168bffa8a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe898d7ebef22a7f1));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x02c14afda411d782));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd67ed89a5d84ed18));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ef22a6dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ef1ebdc9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a922d3a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006322ff51));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ef22a8dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ef22bdc9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a922d3a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a922d3a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe898d7ebef22a6dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe898d7ebef1ebdc9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe898d7e8a922d3a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6a06ded56322ff51));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe898d7ebef22a8dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe898d7ebef22bdc9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe898d7e8a922d3a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x07e91f9168bffa8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe898d7ebef22a7f1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa94fdb60a922d3a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd67ed89a5d84ed18));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, SubsExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x22, 0x04, 0x20, 0x6b, 0x22, 0x28, 0x20, 0x6b, 0x22, 0x4c, 0x20,
      0x6b, 0x22, 0x70, 0x20, 0x6b, 0x22, 0x84, 0x20, 0x6b, 0x22, 0xa8,
      0x20, 0x6b, 0x22, 0xcc, 0x20, 0x6b, 0x22, 0xec, 0x20, 0x6b, 0x22,
      0x04, 0x20, 0xeb, 0x22, 0x28, 0x20, 0xeb, 0x22, 0x4c, 0x20, 0xeb,
      0x22, 0x70, 0x20, 0xeb, 0x22, 0x84, 0x20, 0xeb, 0x22, 0xa8, 0x20,
      0xeb, 0x22, 0xcc, 0x20, 0xeb, 0x22, 0xec, 0x20, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x78e6e33c1eae7a4d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xf68a8926f1958dfa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe962dc25dcc52775));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6f558ca2d308ff8e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f1958d60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f193a4c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fc21bb92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000006ade92a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f1958d60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f193a4c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fc21bb92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fc21bb92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf68a8926f1958d60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf68a8926f193a4c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf68a8925fc21bb92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x681c556506ade92a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf68a8926f1958d60));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf68a8926f193a4c6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf68a8925fc21bb92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x78e6e33c1eae7a4d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf68a8926f1958dfa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f536f45fc21bb92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f558ca2d308ff8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, CmpExtendedRegister) {
  std::vector<uint8_t> bytes = {
      0x3f, 0x04, 0x20, 0x6b, 0x3f, 0x28, 0x20, 0x6b, 0x3f, 0x4c, 0x20,
      0x6b, 0x3f, 0x70, 0x20, 0x6b, 0x3f, 0x84, 0x20, 0x6b, 0x3f, 0xa8,
      0x20, 0x6b, 0x3f, 0xcc, 0x20, 0x6b, 0x3f, 0xec, 0x20, 0x6b, 0x3f,
      0x04, 0x20, 0xeb, 0x3f, 0x28, 0x20, 0xeb, 0x3f, 0x4c, 0x20, 0xeb,
      0x3f, 0x70, 0x20, 0xeb, 0x3f, 0x84, 0x20, 0xeb, 0x3f, 0xa8, 0x20,
      0xeb, 0x3f, 0xcc, 0x20, 0xeb, 0x3f, 0xec, 0x20, 0xeb,
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xecf10711be51eec9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x86790fcc4731d24d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x66582f8cc9b1d36c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd964f7dc2f09a9c0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xecf10711be51eec9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x86790fcc4731d24d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66582f8cc9b1d36c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd964f7dc2f09a9c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

}  // namespace test
}  // namespace reil

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

#! /usr/bin/python

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unicorn import *
from unicorn.arm64_const import *

import random
import re
import subprocess

def call(args):
  p = subprocess.Popen(args, stdout=subprocess.PIPE)
  o, e = p.communicate('')
  return o

def arm64_assemble(instructions):
  output = ''
  
  with open('/tmp/test.asm', 'w') as tmp:
    tmp.write('\n'.join(instructions))
    tmp.write('\n\n')

    print '\n'.join(instructions)

  call(['aarch64-linux-gnu-as', '/tmp/test.asm', '-o', '/tmp/test'])
  objdump = call(['aarch64-linux-gnu-objdump', '-d', '/tmp/test'])

  for code, name in re.findall('[0-9a-f]+\:\s+([0-9a-f]+)\s+([^\n]+)', objdump):
    while len(code) >= 2:
      output += '0x{}, '.format(code[-2:])
      code = code[:-2]

  call(['rm', '/tmp/test.asm', '/tmp/test'])

  return output

def write_header(file):
  file.write('''// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstdio>
#include <random>

#include "gtest/gtest.h"

#include "reil/aarch64.h"

namespace reil {
namespace test {

// NOTE: This file is generated by aarch64_test_generator.py - please add new
// tests there and regenerate this file instead of modifying this file directly.

''')

def write_footer(file):
  file.write('''}  // namespace test
}  // namespace reil

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
''')

def write_hook(emu, address, size, file):
  if address == 0x1000:
    return

  state = {
    'x0': emu.reg_read(UC_ARM64_REG_X0),
    'x1': emu.reg_read(UC_ARM64_REG_X1),
    'x2': emu.reg_read(UC_ARM64_REG_X2),
    'x3': emu.reg_read(UC_ARM64_REG_X3),
    'nzcv': (emu.reg_read(UC_ARM64_REG_NZCV) >> 28),
    'sp': emu.reg_read(UC_ARM64_REG_SP),
    'pc': emu.reg_read(UC_ARM64_REG_PC),
  }

  file.write('''
  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x{x0:016x}));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x{x1:016x}));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x{x2:016x}));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x{x3:016x}));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x{nzcv:1x} >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x{nzcv:1x} >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x{nzcv:1x} >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x{nzcv:1x} >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x{pc:016x}));
'''.format(**state))


def write_testcase(file, testcase):
  print '[*]', testcase['name']

  testcase['instruction_bytes'] = arm64_assemble(testcase['instructions'])
  if not 'x0' in testcase:
    testcase['x0'] = random.randint(0, 0xffffffffffffffff)
  if not 'x1' in testcase:
    testcase['x1'] = random.randint(0, 0xffffffffffffffff)
  if not 'x2' in testcase:
    testcase['x2'] = random.randint(0, 0xffffffffffffffff)
  if not 'x3' in testcase:
    testcase['x3'] = random.randint(0, 0xffffffffffffffff)
  if not 'nzcv' in testcase:
    testcase['nzcv'] = random.randint(0, 0x8)

  file.write('''TEST(AArch64Translator, {name}) {{
  std::vector<uint8_t> bytes = {{
    {instruction_bytes}
  }};

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x{x0:016x}));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x{x1:016x}));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x{x2:016x}));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x{x3:016x}));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x{nzcv:1x} >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x{nzcv:1x} >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x{nzcv:1x} >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x{nzcv:1x} >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));
'''.format(**testcase))

  instruction_bytes = ''.join(map(chr, eval(testcase['instruction_bytes'])))

  try:
    emu = Uc(UC_ARCH_ARM64, UC_MODE_ARM)
    emu.mem_map(0x1000, 0x1000)
    emu.mem_write(0x1000, instruction_bytes)
    emu.reg_write(UC_ARM64_REG_X0, testcase['x0'])
    emu.reg_write(UC_ARM64_REG_X1, testcase['x1'])
    emu.reg_write(UC_ARM64_REG_X2, testcase['x2'])
    emu.reg_write(UC_ARM64_REG_X3, testcase['x3'])
    emu.reg_write(UC_ARM64_REG_NZCV, testcase['nzcv'] << 28)
    emu.reg_write(UC_ARM64_REG_PC, 0x1000)
    emu.hook_add(UC_HOOK_CODE, write_hook, begin=0x1000, end=0x2000, user_data=file)
    emu.emu_start(0x1000, 0xffffffffffffffff)
  except Exception, e:
    pass

  file.write('}\n\n')


def test(name, instructions, need_memory = False):
  return {
    'name': name,
    'instructions': instructions,
    'need_memory': need_memory
  }

testcases = [
  test('Adr', [
    'adr  x0, c',
  ]),
  test('Adrp', [
    'adrp  x0, 0',
  ]),
  test('AddImmediate', [
    'add  x1, x0, #0x12',
    'add  x1, x0, #0x12, lsl #12',
    'add  w1, w0, #0xfff',
  ]),
  test('AddsImmediate', [
    'adds  x1, x0, #0x12',
    'adds  x1, x0, #0x12, lsl #12',
    'adds  w1, w0, #0xfff, lsl #12',
  ]),
  test('CmnImmediate', [
    'cmn  x0, #0xf7e',
    'cmn  w0, #0xf7e, lsl #12',
  ]),
  test('CmpImmediate', [
    'cmp  x0, #0xf7e',
    'cmp  w0, #0xf7e, lsl #12',
  ]),
  test('MovToFromSp', [
    'mov  sp, x0',
    'mov  w1, wsp',
  ]),
  test('SubImmediate', [
    'sub  x1, x0, #0x12',
    'sub  x1, x0, #0x12, lsl #12',
    'sub  w1, w0, #0xfff',
  ]),
  test('SubsImmediate', [
    'subs  x1, x0, #0x12',
    'subs  x1, x0, #0x12, lsl #12',
    'subs  w1, w0, #0xfff, lsl #12',
  ]),
  test('AndImmediate', [
    'and  x1, x0, #0xc0c0c0c0c0c0c0c0',
    'and  x1, x0, #0xff00ff00ff00ff00',
    'and  w1, w0, #0x3ff',
  ]),
  test('OrrImmediate', [
    'orr  x1, x0, #0xc0c0c0c0c0c0c0c0',
    'orr  x1, x0, #0xff00ff00ff00ff00',
    'orr  w1, w0, #0x3ff',
  ]),
  test('EorImmediate', [
    'eor  x1, x0, #0xc0c0c0c0c0c0c0c0',
    'eor  x1, x0, #0xff00ff00ff00ff00',
    'eor  w1, w0, #0x3ff',
  ]),
  test('AndsImmediate', [
    'ands  x1, x0, #0xc0c0c0c0c0c0c0c0',
    'ands  x1, x0, #0xff00ff00ff00ff00',
    'ands  w1, w0, #0x3ff',
  ]),
  test('TstImmediate', [
    'tst  x0, #0x7ff',
    'tst  w0, #0x3ff',
  ]),
  test('Movn', [
    'mov  x0, #0xffffffffffff0000',
    'mov  x0, #0xffff0000ffffffff',
    'mov  w0, #0xff00ffff',
  ]),
  test('Movz', [
    'mov  x0, #0x1234',
    'mov  x0, #0xabcd00000000',
    'mov  w0, #0x120000',
  ]),
  test('Movk', [
    'movk  x0, #0x1234, lsl #48',
    'movk  x0, #0xabcd, lsl #32',
    'movk  w0, #0x12, lsl #16',
  ]),
  test('AsrImmediate', [
    'asr  x1, x0, #11',
    'asr  w1, w0, #6',
  ]),
  test('Sbfiz', [
    'sbfiz  x1, x0, #54, #7',
    'sbfiz  w1, w0, #13, #2',
  ]),
  test('Sbfx', [
    'sbfx  x1, x0, #11, #34',
    'sbfx  w1, w0, #1, #2',
  ]),
  test('Sxtb', [
    'sxtb  w1, w0',
  ]),
  test('Sxth', [
    'sxth  w1, w0',
  ]),
  test('Bfi', [
    'bfi  x1, x0, #7, #17',
    'bfi  x1, x0, #62, #1',
    'bfi  w1, w0, #20, #10',
  ]),
  test('Bfxil', [
    'bfxil  x1, x0, #7, #17',
    'bfxil  x1, x0, #62, #1',
    'bfxil  w1, w0, #20, #10',
  ]),
  test('LslImmediate', [
    'lsl  x1, x0, #17',
    'lsl  w1, w0, #3',
  ]),
  test('LsrImmediate', [
    'lsr  x1, x0, #11',
    'lsr  w1, w0, #6',
  ]),
  test('Ubfiz', [
    'ubfiz  x1, x0, #54, #7',
    'ubfiz  w1, w0, #13, #2',
  ]),
  test('Ubfx', [
    'ubfx  x1, x0, #11, #34',
    'ubfx  w1, w0, #1, #2',
  ]),
  test('Uxtb', [
    'uxtb  w1, w0',
  ]),
  test('Uxth', [
    'uxth  w1, w0',
  ]),
  test('RorImmediate', [
    'ror  x1, x0, #39',
    'ror  w1, w0, #6',
  ]),
  test('Extract', [
    'extr  x2, x1, x0, #61',
    'extr  w2, w1, w0, #17',
  ]),
  test('CompareAndBranch', [
    'mov  x0, #0x0',
    'mov  x1, #0x1234',
    'cbnz  x0, not_taken',
    'cbz  x0, taken_0',
    'nop',
    'taken_0:'
    'cbz  w1, not_taken',
    'cbnz  w1, taken_1',
    'not_taken:'
    'nop',
    'taken_1:'
    'nop',
  ]),
  test('ConditionalBranch', [
    'mov  x0, #0x0',
    'cmp  x0, #0x0',
    'b.eq  taken_0',
    'nop',
    'taken_0:'
    'b.ne  not_taken',
    'b.cs  taken_1',
    'nop',
    'taken_1:',
    'b.cc  not_taken',
    'b.pl  taken_2',
    'nop',
    'taken_2:',
    'b.mi  not_taken',
    'b.vc  taken_3',
    'nop',
    'taken_3:',
    'b.vs  not_taken',
    'b.ls  taken_4',
    'nop',
    'taken_4:',
    'b.hi  not_taken',
    'b.ge  taken_5',
    'nop',
    'taken_5:',
    'b.lt  not_taken',
    'b.le  taken_6',
    'nop',
    'taken_6:',
    'b.al  not_taken',
    'nop',
    'not_taken:',
    'nop',
  ]),
  test('TestAndBranchIfZero', [
    'tbz  w0, #17, taken',
    'nop',
    'taken:',
    'nop',
  ]),
  test('TestAndBranchIfNonzero', [
    'tbnz  x0, #63, taken',
    'nop',
    'taken:',
    'nop',
  ]),
  test('BranchRegister', [
    'adr  x0, forward',
    'br  x0',
    'nop',
    'nop',
    'nop',
    'forward:'
    'nop',
  ]),
  test('BranchAndLinkRegister', [
    'adr  x0, forward',
    'blr  x0',
    'nop',
    'nop',
    'nop',
    'forward:',
    'nop',
  ]),
  test('BranchImmediateForward', [
    'b  forward',
    'nop',
    'nop',
    'nop',
    'forward:',
    'nop',
  ]),
  test('BranchImmediateBackward', [
    'b forward',
    'backward:',
    'nop',
    'b done',
    'nop',
    'forward:',
    'b  backward',
    'done:',
    'nop',
  ]),
  test('BranchAndLinkImmediateForward', [
    'bl  forward',
    'nop',
    'nop',
    'nop',
    'forward:',
    'nop',
  ]),
  test('BranchAndLinkImmediateBackward', [
    'b forward',
    'backward:',
    'nop',
    'b done',
    'nop',
    'forward:',
    'bl backward',
    'done:',
    'nop',
  ]),
  # test('Casb', 
  #              [
  # 'adr  x2, 10 <data>',
  # 'casb  w0, w1, [x2]',
  # 'str  w0, [x2]',
  # 'casb  w0, w1, [x2]',
  #                  0x23, 0x23, 0x23, 0x23,
  #              ]),
  # test('Cash', 
  #              [
  # 'adr  x2, 10 <data>',
  # 'casb  w0, w1, [x2]',
  # 'str  w0, [x2]',
  # 'casb  w0, w1, [x2]',
  #                  0x23, 0x23, 0x23, 0x23,
  #              ]),
  # test('Casw', 
  #              [
  # 'adr  x2, 10 <data>',
  # 'casb  w0, w1, [x2]',
  # 'str  w0, [x2]',
  # 'casb  w0, w1, [x2]',
  #                  0x23, 0x23, 0x23, 0x23,
  #              ]),
  # test('Cas', 
  #              [
  # 'adr  x2, 10 <data>',
  # 'casb  w0, w1, [x2]',
  # 'str  w0, [x2]',
  # 'casb  w0, w1, [x2]',
  #                  0x23, 0x23, 0x23, 0x23,
  #              ]),
  test('Stxrb', [
    'adr  x2, data',
    'ldxrb  w0, [x2]',
    'stxrb  w0, w1, [x2]',
    'ldxrb  w0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stlxrb', [
    'adr  x2, data',
    'ldaxrb  w0, [x2]',
    'stlxrb  w0, w1, [x2]',
    'ldaxrb  w0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stlrb', [
    'adr  x2, data',
    'ldarb  w0, [x2]',
    'stlrb  w1, [x2]',
    'ldarb  w0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stxrh', [
    'adr  x2, data',
    'ldxrh  w0, [x2]',
    'stxrh  w0, w1, [x2]',
    'ldxrh  w0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stlxrh', [
    'adr  x2, data',
    'ldaxrh  w0, [x2]',
    'stlxrh  w0, w1, [x2]',
    'ldaxrh  w0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stlrh', [
    'adr  x2, data',
    'ldarh  w0, [x2]',
    'stlrh  w1, [x2]',
    'ldarh  w0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stxrw', [
    'adr  x2, data',
    'ldxr  w0, [x2]',
    'stxr  w0, w1, [x2]',
    'ldxr  w0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stxpw', [
    'adr  x2, data',
    'ldxp  w0, w0, [x2]',
    'stxp  w0, w1, w3, [x2]',
    'ldxp  w0, w1, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stlxpw', [
    'adr  x2, data',
    'ldaxp  w0, w0, [x2]',
    'stlxp  w0, w1, w3, [x2]',
    'ldaxp  w0, w1, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stlxrw', [
    'adr  x2, data',
    'ldaxr  w0, [x2]',
    'stlxr  w0, w1, [x2]',
    'ldaxr  w0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stlrw', [
    'adr  x2, data',
    'ldar  w0, [x2]',
    'stlr  w1, [x2]',
    'ldar  w0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stxrx', [
    'adr  x2, data',
    'ldxr  x0, [x2]',
    'stxr  w0, x1, [x2]',
    'ldxr  x0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
# TODO: these are constrained unpredictable, and differs from qemu, check 
# hardware
#  test('Stxpx', [
#    'adr  x2, data',
#    'ldxp  x0, x0, [x2]',
#    'stxp  w0, x1, x3, [x2]',
#    'ldxp  x0, x1, [x2]',
#    'b done',
#    'data:',
#    '.word 0x41414141',
#    '.word 0x41414141',
#    '.word 0x42424242',
#    '.word 0x42424242',
#    'done:',
#  ], True),
#  test('Stlxpx', [
#    'adr  x2, data',
#    'ldaxp  x0, x0, [x2]',
#    'stlxp  w0, x1, x3, [x2]',
#    'ldaxp  x0, x1, [x2]',
#    'b done',
#    'data:',
#    '.word 0x41414141',
#    '.word 0x41414141',
#    '.word 0x42424242',
#    '.word 0x42424242',
#    'done:',
#  ], True),
  test('Stlxrx', [
    'adr  x2, data',
    'ldaxr  x0, [x2]',
    'stlxr  w0, x1, [x2]',
    'ldaxr  x0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('Stlrx', [
    'adr  x2, data',
    'ldar  x0, [x2]',
    'stlr  x1, [x2]',
    'ldar  x0, [x2]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ], True),
  test('LdrwLiteral', [
    'ldr  w0, data',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ]),
  test('LdrxLiteral', [
    'ldr  x0, data',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ]),
  test('LdrswLiteralPositive', [
    'ldrsw  x0, data',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ]),
  test('LdrswLiteralNegative', [
    'ldrsw  x0, data',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:',
  ]),
  test('LdrsLiteral', [
    'ldr  s0, data',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ]),
  test('LdrdLiteral', [
    'ldr  d0, data',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ]),
  test('LdrqLiteral', [
    'ldr  q0, data',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ]),
  test('Ldstnpw', [
    'adr  x2, data',
    'stnp  w0, w1, [x2,#16]',
    'ldnp  w1, w0, [x2,#16]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('Ldpsw', [
    'adr  x2, data',
    'stp  w0, w1, [x2,#16]',
    'ldpsw  x1, x0, [x2,#16]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('Ldstnpx', [
    'adr  x2, data',
    'stnp  x0, x1, [x2,#16]',
    'ldnp  x1, x0, [x2,#16]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('LdstpwPreindex', [
    'adr  x2, data',
    'stp  w0, w1, [x2,#8]!',
    'adr  x2, data',
    'ldp  w1, w0, [x2,#8]!',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('LdstpwOffset', [
    'adr  x2, data',
    'stp  w0, w1, [x2]',
    'ldp  w1, w0, [x2,#-4]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('LdstpwPostindex', [
    'adr  x2, data',
    'stp  w0, w1, [x2],#16',
    'adr  x2, data',
    'ldp  w1, w0, [x2],#16',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('LdstpxPreindex', [
    'adr  x2, data',
    'stp  x0, x1, [x2,#16]!',
    'adr  x2, data',
    'ldp  x1, x0, [x2,#16]!',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('LdstpxOffset', [
    'adr  x2, data',
    'stp  x0, x1, [x2,#8]',
    'ldp  x1, x0, [x2,#16]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('LdstpxPostindex', [
    'adr  x2, data',
    'stp  x0, x1, [x2],#8',
    'adr  x2, data',
    'ldp  x1, x0, [x2],#8',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('Ldstnps', [
    'adr  x0, c <data>',
    'stnp s0, s1, [x0, #20]',
    'ldnp s1, s0, [x0, #20]',
    'b done',
    'data:',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    '.word 0x41414141',
    'done:'
  ], True),
  test('Ldstnpd', [
  'adr  x0, c <data>',
  'stnp d0, d1, [x0, #24]',
  'ldnp d1, d0, [x0, #24]',
             ]),
  test('Ldstnpq', 
             [
  'adr  x0, c <data>',
  'stnp q0, q1, [x0, #32]',
  'ldnp q1, q0, [x0, #32]',
             ]),
  test('LdstpsPreindex', 
             [
  'adr  x0, data',
  'stp  s0, s1, [x0, #8]!',
  'adr  x2, data',
  'ldp  s1, s0, [x0, #8]!',
             ]),
  test('LdstpsOffset', 
             [
  'adr  x2, c <data>',
  'stp  w0, w1, [x2]',
  'ldp  w1, w0, [x2, #-4]',
             ]),
  test('LdstpsPostindex', 
             [
  'adr  x2, data',
  'stp  w0, w1, [x2], #16',
  'adr  x2, data',
  'ldp  w1, w0, [x2], #16',
             ]),
  test('LdstpdPreindex', 
             [
  'adr  x0, data',
  'stp  d0, d1, [x0, #8]!',
  'adr  x2, data',
  'ldp  d1, d0, [x0, #8]!',
             ]),
  test('LdstpdOffset', 
             [
  'nop',
  'adr  x0, 1c <data>',
  'stp  d0, d1, [x0]',
  'ldp  d1, d0, [x0, #-8]',
             ]),
  test('LdstpdPostindex', 
             [
  'adr  x0, data',
  'stp  d0, d1, [x0], #16',
  'adr  x0, data',
  'ldp  d1, d0, [x0], #16',
             ]),
  test('LdstpqPreindex', 
             [
  'adr  x0, data',
  'stp  q0, q1, [x0, #64]!',
  'adr  x0, data',
  'ldp  q1, q0, [x0, #64]!',
             ]),
  test('LdstpqOffset', 
             [
  'nop',
  'adr  x0, 1c <data>',
  'stp  q0, q1, [x0]',
  'ldp  q1, q0, [x0, #-32]',
             ]),
  test('LdstpqPostindex', 
             [
  'adr  x0, data',
  'stp  q0, q1, [x0], #16',
  'adr  x0, data',
  'ldp  q1, q0, [x0], #16',
  ]),
#  test('LdstrbUnscaledImmediatePostindex', [
#    'adr  x2, 18 <data>',
#    'strb  w0, [x2],#1',
#    'adr  x2, 18 <data>',
#    'ldrb  w1, [x2],#1',
#    'adr  x2, 18 <data>',
#    'ldrsb  w1, [x2],#1',
#  ], True),
#  test('LdstrhUnscaledImmediatePostindex', [
#    'adr  x2, 18 <data>',
#    'strh  w0, [x2],#23',
#    'adr  x2, 18 <data>',
#    'ldrh  w1, [x2],#24',
#    'adr  x2, 18 <data>',
#    'ldrsh  w1, [x2],#23',
#  ], True),
#  test('LdstrwUnscaledImmediatePostindex', [
#    'adr  x2, 48 <data>',
#    'str  w0, [x2],#-12',
#    'adr  x2, 48 <data>',
#    'ldr  w1, [x2],#-12',
#    'adr  x2, 48 <data>',
#    'ldrsw  x1, [x2],#-12',
#  ], True),
#  test('LdstrxUnscaledImmediatePostindex', [
#    'adr  x2, 30 <data>',
#    'str  x0, [x2],#-1',
#    'adr  x2, 30 <data>',
#    'ldr  x1, [x2],#-3',
#  ], True),
#  test('LdstrbUnscaledImmediatePreindex', [
#    'adr  x2, 38 <data>',
#    'strb  w0, [x2,#-1]!',
#    'adr  x2, 38 <data>',
#    'ldrb  w1, [x2,#-1]!',
#    'adr  x2, 38 <data>',
#    'ldrsb  w1, [x2,#-1]!',
#    'adr  x2, 38 <data>',
#    'ldrsb  x1, [x2,#-1]!',
#  ], True),
#  test('LdstrhUnscaledImmediatePreindex', [
#    'adr  x2, 38 <data>',
#    'strh  w0, [x2,#-1]!',
#    'adr  x2, 38 <data>',
#    'ldrh  w1, [x2,#-1]!',
#    'adr  x2, 38 <data>',
#    'ldrsh  w1, [x2,#-1]!',
#    'adr  x2, 38 <data>',
#    'ldrsh  x1, [x2,#-1]!',
#  ], True),
#  test('LdstrwUnscaledImmediatePreindex', [
#    'adr  x2, 30 <data>',
#    'str  w0, [x2,#-12]!',
#    'adr  x2, 30 <data>',
#    'ldr  w1, [x2,#-10]!',
#    'adr  x2, 30 <data>',
#    'ldrsw  x1, [x2,#-12]!',
#  ], True),
#  test('LdstrxUnscaledImmediatePreindex', [
#    'adr  x2, 10 <data>',
#    'str  x0, [x2,#7]!',
#    'adr  x2, 10 <data>',
#    'ldr  x1, [x2,#9]!',
#  ], True),
#  test('LdsturbUnscaledImmediate', [
#    'adr  x2, 14 <data>',
#    'sturb  w0, [x2]',
#    'ldurb  w1, [x2]',
#    'ldursb  w1, [x2]',
#    'ldursb  x1, [x2]',
#  ], True),
#  test('LdsturhUnscaledImmediate', [
#    'adr  x2, 14 <data>',
#    'strh  w0, [x2,#17]',
#    'ldurh  w1, [x2,#18]',
#    'ldrsh  w1, [x2,#17]',
#    'ldrsh  x1, [x2,#17]',
#  ], True),
#  test('LdsturwUnscaledImmediate', [
#    'adr  x2, 10 <data>',
#    'str  w0, [x2,#17]',
#    'ldr  w1, [x2,#19]',
#    'ldrsw  x1, [x2,#17]',
#  ], True),
#  test('LdsturxUnscaledImmediate', [
#    'adr  x2, 14 <data>',
#    'str  x0, [x2,#-8]',
#    'ldr  x1, [x2,#-6]',
#    'nop',
#    'nop',
#  ], True),
#  test('LdsttrbUnscaledImmediate', [
#    'adr  x2, 14 <data>',
#    'sttrb  w0, [x2]',
#    'ldtrb  w1, [x2]',
#    'ldtrsb  w1, [x2]',
#    'ldtrsb  x1, [x2]',
#  ], True),
#  test('LdsttrhUnscaledImmediate', [
#    'adr  x2, 38 <data>',
#    'sttrh  w0, [x2,#-19]',
#    'ldtrh  w1, [x2,#-18]',
#    'ldtrsh  w1, [x2,#-19]',
#    'ldtrsh  x1, [x2,#-19]',
#  ], True),
#  test('LdsttrwUnscaledImmediate', [
#    'adr  x2, 34 <data>',
#    'sttr  w0, [x2,#-19]',
#    'ldtr  w1, [x2,#-18]',
#    'ldtrsw  x1, [x2,#-19]',
#  ], True),
#  test('LdsttrxUnscaledImmediate', [
#    'adr  x2, 30 <data>',
#    'sttr  x0, [x2,#1]',
#    'ldtr  x1, [x2,#1]',
#  ], True),
#  test('LdstrbUnscaledImmediate', [
#    'adr  x1, 0 <data>',
#    'sub  x1, x1, #0xf00',
#    'strb  w0, [x1,#3840]',
    'ldrb  w0, [x1,#3840]',
    'ldrsb  w0, [x1,#3840]',
  ], True),
  test('LdstrhUnscaledImmediate', [
    'adr  x1, 0 <data>',
    'sub  x1, x1, #0xf00',
    'strh  w0, [x1,#3840]',
    'ldrh  w0, [x1,#3840]',
    'ldrsh  w0, [x1,#3840]',
  ], True),
  test('LdstrwUnscaledImmediate', [
    'adr  x1, 0 <data>',
    'sub  x1, x1, #0xf00',
    'str  w0, [x1,#3840]',
    'ldr  w0, [x1,#3840]',
    'ldrsw  x0, [x1,#3840]',
  ], True),
  test('LdstrxUnscaledImmediate', [
    'adr  x1, 0 <data>',
    'sub  x1, x1, #0xf00',
    'str  x0, [x1,#3840]',
    'ldr  x0, [x1,#3840]',
  ], True),
  test('LdstrbRegisterOffset', [
    'mov  w4, #0x1',
    'mov  w5, #0xffffffff',
    'mov  w6, #0x10',
    'adr  x7, 44 <data>',
    'strb  w0, [x7,w4,uxtw]',
    'strb  w1, [x7,w5,sxtw]',
    'strb  w2, [x7,x6,sxtx]',
    'ldrb  w0, [x7,w4,uxtw]',
    'ldrb  w1, [x7,w5,sxtw]',
    'ldrb  w2, [x7,x6,sxtx]',
  ], True),
  test('LdstrhRegisterOffset', [
    'mov  w4, #0x1',
    'mov  w5, #0x8',
    'mov  w6, #0x10',
    'mov  w7, #0xffffffff',
    'adr  x8, 44 <data>',
    'strh  w0, [x8,w4,uxtw]',
    'strh  w0, [x8,x5,lsl #1]',
    'strh  w1, [x8,w6,sxtw #1]',
    'strh  w2, [x8,x7,sxtx]',
    'ldrh  w0, [x8,w4,uxtw]',
    'strh  w0, [x8,x5,lsl #1]',
    'ldrh  w1, [x8,w6,sxtw #1]',
    'ldrh  w2, [x8,x7,sxtx]',
  ], True),
  test('LdstrwRegisterOffset', [
    'mov  w4, #0x1',
    'mov  w5, #0x8',
    'mov  w6, #0x10',
    'mov  w7, #0xffffffff',
    'adr  x8, 44 <data>',
    'str  w0, [x8,w4,uxtw #2]',
    'str  w0, [x8,x5,lsl #2]',
    'str  w1, [x8,w6,sxtw]',
    'str  w2, [x8,x7,sxtx]',
    'ldr  w0, [x8,w4,uxtw #2]',
    'ldr  w0, [x8,x5,lsl #2]',
    'ldr  w1, [x8,w6,sxtw]',
    'ldr  w2, [x8,x7,sxtx]',
  ], True),
  test('LdstrxRegisterOffset', [
    'mov  w4, #0x1',
    'mov  w5, #0x8',
    'mov  w6, #0x10',
    'mov  w7, #0xffffffff',
    'adr  x8, 54 <data>',
    'str  x0, [x8,w4,uxtw #3]',
    'str  x0, [x8,x5,lsl #3]',
    'str  x1, [x8,w6,sxtw]',
    'str  x2, [x8,x7,sxtx]',
    'ldr  x0, [x8,w4,uxtw #3]',
    'ldr  w0, [x8,x5,lsl #2]',
    'ldr  w1, [x8,w6,sxtw]',
    'ldr  x2, [x8,x7,sxtx]',
  ], True),
  test('Adc', [
    'adc  x2, x1, x0',
    'adc  w2, w1, w0',
  ]),
  test('Adcs', [
    'adcs  x2, x1, x0',
    'adcs  w2, w1, w0',
  ]),
  test('Sbc', [
    'sbc  x2, x1, x0',
    'sbc  w2, w1, w0',
  ]),
  test('Sbcs', [
    'sbcs  x2, x1, x0',
    'sbcs  w2, w1, w0',
  ]),
  test('CcmpRegister', [
    'ccmp  x3, x2, #0x9, eq',
    'ccmp  w3, w2, #0x8, ne',
    'ccmp  x3, x2, #0xb, cs',
    'ccmp  w3, w2, #0xa, cc',
    'ccmp  x3, x2, #0xf, mi',
    'ccmp  w3, w2, #0xe, pl',
    'ccmp  x3, x2, #0x6, vs',
    'ccmp  w3, w2, #0xd, vc',
    'ccmp  x3, x2, #0xc, hi',
    'ccmp  w3, w2, #0x5, ls',
    'ccmp  x3, x2, #0x0, ge',
    'ccmp  w3, w2, #0x1, lt',
    'ccmp  x3, x2, #0x3, gt',
    'ccmp  w3, w2, #0x7, le',
  ]),
  test('CcmnRegister', [
    'ccmn  x3, x2, #0x9, eq',
    'ccmn  w3, w2, #0x8, ne',
    'ccmn  x3, x2, #0xb, cs',
    'ccmn  w3, w2, #0xa, cc',
    'ccmn  x3, x2, #0xf, mi',
    'ccmn  w3, w2, #0xe, pl',
    'ccmn  x3, x2, #0x6, vs',
    'ccmn  w3, w2, #0xd, vc',
    'ccmn  x3, x2, #0xc, hi',
    'ccmn  w3, w2, #0x5, ls',
    'ccmn  x3, x2, #0x0, ge',
    'ccmn  w3, w2, #0x1, lt',
    'ccmn  x3, x2, #0x3, gt',
    'ccmn  w3, w2, #0x7, le',
  ]),
  test('CcmpImmediate', [
    'ccmp  x0, #0x1f, #0x9, eq',
    'ccmp  w0, #0x1e, #0x8, ne',
    'ccmp  x0, #0x1d, #0xb, cs',
    'ccmp  w0, #0x1c, #0xa, cc',
    'ccmp  x0, #0x1b, #0xf, mi',
    'ccmp  w0, #0x1a, #0xe, pl',
    'ccmp  x0, #0x19, #0x6, vs',
    'ccmp  w0, #0x17, #0xd, vc',
    'ccmp  x0, #0x15, #0xc, hi',
    'ccmp  w0, #0x14, #0x5, ls',
    'ccmp  x0, #0x13, #0x0, ge',
    'ccmp  w0, #0x12, #0x1, lt',
    'ccmp  x0, #0x1, #0x3, gt',
    'ccmp  w0, #0x0, #0x7, le',
  ]),
  test('CcmnImmediate', [
    'ccmn  x0, #0x1f, #0x9, eq',
    'ccmn  w0, #0x1e, #0x8, ne',
    'ccmn  x0, #0x1d, #0xb, cs',
    'ccmn  w0, #0x1c, #0xa, cc',
    'ccmn  x0, #0x1b, #0xf, mi',
    'ccmn  w0, #0x1a, #0xe, pl',
    'ccmn  x0, #0x19, #0x6, vs',
    'ccmn  w0, #0x17, #0xd, vc',
    'ccmn  x0, #0x15, #0xc, hi',
    'ccmn  w0, #0x14, #0x5, ls',
    'ccmn  x0, #0x13, #0x0, ge',
    'ccmn  w0, #0x12, #0x1, lt',
    'ccmn  x0, #0x1, #0x3, gt',
    'ccmn  w0, #0x0, #0x7, le',
  ]),
  test('Csel', [
    'csel  x2, x1, x0, eq',
    'csel  w2, w1, w0, ne',
    'csel  x2, x1, x0, cs',
    'csel  w2, w1, w0, cc',
    'csel  x2, x1, x0, mi',
    'csel  w2, w1, w0, pl',
    'csel  x2, x1, x0, vs',
    'csel  w2, w1, w0, vc',
    'csel  x2, x1, x0, hi',
    'csel  w2, w1, w0, ls',
    'csel  x2, x1, x0, ge',
    'csel  w2, w1, w0, lt',
    'csel  x2, x1, x0, gt',
    'csel  w2, w1, w0, le',
    'csel  x2, x1, x0, al',
  ]),
  test('Csinc', [
    'csinc  x2, x1, x0, eq',
    'csinc  w2, w1, w0, ne',
    'csinc  x2, x1, x0, cs',
    'csinc  w2, w1, w0, cc',
    'csinc  x2, x1, x0, mi',
    'csinc  w2, w1, w0, pl',
    'csinc  x2, x1, x0, vs',
    'csinc  w2, w1, w0, vc',
    'csinc  x2, x1, x0, hi',
    'csinc  w2, w1, w0, ls',
    'csinc  x2, x1, x0, ge',
    'csinc  w2, w1, w0, lt',
    'csinc  x2, x1, x0, gt',
    'csinc  w2, w1, w0, le',
    'csinc  x2, x1, x0, al',
  ]),
  test('Csinv', [
    'csinv  x2, x1, x0, eq',
    'csinv  w2, w1, w0, ne',
    'csinv  x2, x1, x0, cs',
    'csinv  w2, w1, w0, cc',
    'csinv  x2, x1, x0, mi',
    'csinv  w2, w1, w0, pl',
    'csinv  x2, x1, x0, vs',
    'csinv  w2, w1, w0, vc',
    'csinv  x2, x1, x0, hi',
    'csinv  w2, w1, w0, ls',
    'csinv  x2, x1, x0, ge',
    'csinv  w2, w1, w0, lt',
    'csinv  x2, x1, x0, gt',
    'csinv  w2, w1, w0, le',
    'csinv  x2, x1, x0, al',
  ]),
  test('Csneg', [
    'csneg  x2, x1, x0, eq',
    'csneg  w2, w1, w0, ne',
    'csneg  x2, x1, x0, cs',
    'csneg  w2, w1, w0, cc',
    'csneg  x2, x1, x0, mi',
    'csneg  w2, w1, w0, pl',
    'csneg  x2, x1, x0, vs',
    'csneg  w2, w1, w0, vc',
    'csneg  x2, x1, x0, hi',
    'csneg  w2, w1, w0, ls',
    'csneg  x2, x1, x0, ge',
    'csneg  w2, w1, w0, lt',
    'csneg  x2, x1, x0, gt',
    'csneg  w2, w1, w0, le',
    'csneg  x2, x1, x0, al',
  ]),
  test('Cset', [
    'cset  x2, eq',
    'cset  w2, ne',
    'cset  x2, cs',
    'cset  w2, cc',
    'cset  x2, mi',
    'cset  w2, pl',
    'cset  x2, vs',
    'cset  w2, vc',
    'cset  x2, hi',
    'cset  w2, ls',
    'cset  x2, ge',
    'cset  w2, lt',
    'cset  x2, gt',
    'cset  w2, le',
  ]),
  test('Csetm', [
    'csetm  x2, eq',
    'csetm  w2, ne',
    'csetm  x2, cs',
    'csetm  w2, cc',
    'csetm  x2, mi',
    'csetm  w2, pl',
    'csetm  x2, vs',
    'csetm  w2, vc',
    'csetm  x2, hi',
    'csetm  w2, ls',
    'csetm  x2, ge',
    'csetm  w2, lt',
    'csetm  x2, gt',
    'csetm  w2, le',
  ]),
  test('Cinc', [
    'cinc  x1, x0, eq',
    'cinc  w1, w0, ne',
    'cinc  x1, x0, cs',
    'cinc  w1, w0, cc',
    'cinc  x1, x0, mi',
    'cinc  w1, w0, pl',
    'cinc  x1, x0, vs',
    'cinc  w1, w0, vc',
    'cinc  x1, x0, hi',
    'cinc  w1, w0, ls',
    'cinc  x1, x0, ge',
    'cinc  w1, w0, lt',
    'cinc  x1, x0, gt',
    'cinc  w1, w0, le',
  ]),
  test('Cinv', [
    'cinv  x1, x0, eq',
    'cinv  w1, w0, ne',
    'cinv  x1, x0, cs',
    'cinv  w1, w0, cc',
    'cinv  x1, x0, mi',
    'cinv  w1, w0, pl',
    'cinv  x1, x0, vs',
    'cinv  w1, w0, vc',
    'cinv  x1, x0, hi',
    'cinv  w1, w0, ls',
    'cinv  x1, x0, ge',
    'cinv  w1, w0, lt',
    'cinv  x1, x0, gt',
    'cinv  w1, w0, le',
  ]),
  test('Cneg', [
    'cneg  x1, x0, eq',
    'cneg  w1, w0, ne',
    'cneg  x1, x0, cs',
    'cneg  w1, w0, cc',
    'cneg  x1, x0, mi',
    'cneg  w1, w0, pl',
    'cneg  x1, x0, vs',
    'cneg  w1, w0, vc',
    'cneg  x1, x0, hi',
    'cneg  w1, w0, ls',
    'cneg  x1, x0, ge',
    'cneg  w1, w0, lt',
    'cneg  x1, x0, gt',
    'cneg  w1, w0, le',
  ]),
  test('Sdiv', [
    'sdiv  x2, x1, x0',
    'sdiv  w2, w1, w0',
  ]),
  test('Udiv', [
    'udiv  x2, x1, x0',
    'udiv  w2, w1, w0',
  ]),
  test('Lslv', [
    'lsl  x2, x1, x0',
    'lsl  w2, w1, w0',
  ]),
  test('Lsrv', [
    'lsr  x2, x1, x0',
    'lsr  w2, w1, w0',
  ]),
  test('Asrv', [
    'asr  x2, x1, x0',
    'asr  w2, w1, w0',
  ]),
  test('Rorv', [
    'ror  x2, x1, x0',
    'ror  w2, w1, w0',
  ]),
  test('Rbit', [
    'rbit  x1, x0',
    'rbit  w1, w0',
  ]),
  test('Rev16', [
    'rev16  x1, x0',
    'rev16  w1, w0',
  ]),
  test('Rev32', [
    'rev32  x1, x0',
  ]),
  test('Rev', [
    'rev  x1, x0',
    'rev  w1, w0',
  ]),
  test('Clz', [
    'clz  x1, x0',
    'clz  w1, w0',
    'mov  x0, xzr',
    'clz  x1, x0',
    'clz  w1, w0',
  ]),
  test('Cls', [
    'cls  x1, x0',
    'cls  w1, w0',
  ]),
  test('Madd', [
    'madd  x3, x2, x1, x0',
    'madd  w3, w2, w1, w0',
  ]),
  test('Mul', [
    'mul  x2, x1, x0',
    'mul  w2, w1, w0',
  ]),
  test('Msub', [
    'msub  x3, x2, x1, x0',
    'msub  w3, w2, w1, w0',
  ]),
  test('Mneg', [
    'mneg  x2, x1, x0',
    'mneg  w2, w1, w0',
  ]),
  test('Smaddl', [
    'smaddl  x3, w2, w1, x0',
  ]),
  test('Smull', [
    'smull  x2, w1, w0',
  ]),
  test('Smsubl', [
    'smsubl  x3, w2, w1, x0',
  ]),
  test('Smnegl', [
    'smnegl  x2, w1, w0',
  ]),
  test('Smulh', [
    'smulh  x2, x1, x0',
  ]),
  test('Umaddl', [
    'umaddl  x3, w2, w1, x0',
  ]),
  test('Umull', [
    'umull  x2, w1, w0',
  ]),
  test('Umsubl', [
    'umsubl  x3, w2, w1, x0',
  ]),
  test('Umnegl', [
    'umnegl  x2, w1, w0',
  ]),
  test('AndShiftedRegister', [
    'and  w2, w1, w0, lsl #17',
    'and  w2, w1, w0, lsr #9',
    'and  w2, w1, w0, asr #1',
    'and  w2, w1, w0, ror #12',
    'and  x2, x1, x0, lsl #17',
    'and  x2, x1, x0, lsr #9',
    'and  x2, x1, x0, asr #37',
    'and  x2, x1, x0, ror #53',
  ]),
  test('BicShiftedRegister', [
    'bic  w2, w1, w0, lsl #17',
    'bic  w2, w1, w0, lsr #9',
    'bic  w2, w1, w0, asr #1',
    'bic  w2, w1, w0, ror #12',
    'bic  x2, x1, x0, lsl #17',
    'bic  x2, x1, x0, lsr #9',
    'bic  x2, x1, x0, asr #37',
    'bic  x2, x1, x0, ror #53',
  ]),
  test('OrrShiftedRegister', [
    'orr  w2, w1, w0, lsl #17',
    'orr  w2, w1, w0, lsr #9',
    'orr  w2, w1, w0, asr #1',
    'orr  w2, w1, w0, ror #12',
    'orr  x2, x1, x0, lsl #17',
    'orr  x2, x1, x0, lsr #9',
    'orr  x2, x1, x0, asr #37',
    'orr  x2, x1, x0, ror #53',
  ]),
  test('MovShiftedRegister', [
    'mov  x1, x0',
    'mov  w1, w0',
  ]),
  test('OrnShiftedRegister', [
    'orn  w2, w1, w0, lsl #17',
    'orn  w2, w1, w0, lsr #9',
    'orn  w2, w1, w0, asr #1',
    'orn  w2, w1, w0, ror #12',
    'orn  x2, x1, x0, lsl #17',
    'orn  x2, x1, x0, lsr #9',
    'orn  x2, x1, x0, asr #37',
    'orn  x2, x1, x0, ror #53',
  ]),
  test('MvnShiftedRegister', [
    'mvn  x1, x0',
    'mvn  w1, w0',
  ]),
  test('EorShiftedRegister', [
    'eor  w2, w1, w0, lsl #17',
    'eor  w2, w1, w0, lsr #9',
    'eor  w2, w1, w0, asr #1',
    'eor  w2, w1, w0, ror #12',
    'eor  x2, x1, x0, lsl #17',
    'eor  x2, x1, x0, lsr #9',
    'eor  x2, x1, x0, asr #37',
    'eor  x2, x1, x0, ror #53',
  ]),
  test('EonShiftedRegister', [
    'eon  w2, w1, w0, lsl #17',
    'eon  w2, w1, w0, lsr #9',
    'eon  w2, w1, w0, asr #1',
    'eon  w2, w1, w0, ror #12',
    'eon  x2, x1, x0, lsl #17',
    'eon  x2, x1, x0, lsr #9',
    'eon  x2, x1, x0, asr #37',
    'eon  x2, x1, x0, ror #53',
  ]),
  test('AndsShiftedRegister', [
    'ands  w2, w1, w0, lsl #17',
    'ands  w2, w1, w0, lsr #9',
    'ands  w2, w1, w0, asr #1',
    'ands  w2, w1, w0, ror #12',
    'ands  x2, x1, x0, lsl #17',
    'ands  x2, x1, x0, lsr #9',
    'ands  x2, x1, x0, asr #37',
    'ands  x2, x1, x0, ror #53',
  ]),
  test('BicsShiftedRegister', [
    'bics  w2, w1, w0, lsl #17',
    'bics  w2, w1, w0, lsr #9',
    'bics  w2, w1, w0, asr #1',
    'bics  w2, w1, w0, ror #12',
    'bics  x2, x1, x0, lsl #17',
    'bics  x2, x1, x0, lsr #9',
    'bics  x2, x1, x0, asr #37',
    'bics  x2, x1, x0, ror #53',
  ]),
  test('AddShiftedRegister', [
    'add  w2, w1, w0, lsl #17',
    'add  w2, w1, w0, lsr #9',
    'add  w2, w1, w0, asr #1',
    'add  x2, x1, x0, lsl #17',
    'add  x2, x1, x0, lsr #9',
    'add  x2, x1, x0, asr #37',
  ]),
  test('AddsShiftedRegister', [
    'adds  w2, w1, w0, lsl #17',
    'adds  w2, w1, w0, lsr #9',
    'adds  w2, w1, w0, asr #1',
    'adds  x2, x1, x0, lsl #17',
    'adds  x2, x1, x0, lsr #9',
    'adds  x2, x1, x0, asr #37',
  ]),
  test('CmnShiftedRegister', [
    'cmn  w1, w0, lsl #17',
    'cmn  w1, w0, lsr #9',
    'cmn  w1, w0, asr #1',
    'cmn  x1, x0, lsl #17',
    'cmn  x1, x0, lsr #9',
    'cmn  x1, x0, asr #37',
  ]),
  test('SubShiftedRegister', [
    'sub  w2, w1, w0, lsl #17',
    'sub  w2, w1, w0, lsr #9',
    'sub  w2, w1, w0, asr #1',
    'sub  x2, x1, x0, lsl #17',
    'sub  x2, x1, x0, lsr #9',
    'sub  x2, x1, x0, asr #37',
  ]),
  test('NegShiftedRegister', [
    'neg  w1, w0, lsl #17',
    'neg  w1, w0, lsr #9',
    'neg  w1, w0, asr #1',
    'neg  x1, x0, lsl #17',
    'neg  x1, x0, lsr #9',
    'neg  x1, x0, asr #37',
  ]),
  test('SubsShiftedRegister', [
    'subs  w2, w1, w0, lsl #17',
    'subs  w2, w1, w0, lsr #9',
    'subs  w2, w1, w0, asr #1',
    'subs  x2, x1, x0, lsl #17',
    'subs  x2, x1, x0, lsr #9',
    'subs  x2, x1, x0, asr #37',
  ]),
  test('CmpShiftedRegister', [
    'cmp  w1, w0, lsl #17',
    'cmp  w1, w0, lsr #9',
    'cmp  w1, w0, asr #1',
    'cmp  x1, x0, lsl #17',
    'cmp  x1, x0, lsr #9',
    'cmp  x1, x0, asr #37',
  ]),
  test('NegsShiftedRegister', [
    'negs  w1, w0, lsl #17',
    'negs  w1, w0, lsr #9',
    'negs  w1, w0, asr #1',
    'negs  x1, x0, lsl #17',
    'negs  x1, x0, lsr #9',
    'negs  x1, x0, asr #37',
  ]),
  test('AddExtendedRegister', [
    'add  w2, w1, w0, uxtb #1',
    'add  w2, w1, w0, uxth #2',
    'add  w2, w1, w0, uxtw #3',
    'add  w2, w1, w0, uxtx #4',
    'add  w2, w1, w0, sxtb #1',
    'add  w2, w1, w0, sxth #2',
    'add  w2, w1, w0, sxtw #3',
    'add  w2, w1, w0, sxtx #3',
    'add  x2, x1, w0, uxtb #1',
    'add  x2, x1, w0, uxth #2',
    'add  x2, x1, w0, uxtw #3',
    'add  x2, x1, x0, uxtx #4',
    'add  x2, x1, w0, sxtb #1',
    'add  x2, x1, w0, sxth #2',
    'add  x2, x1, w0, sxtw #3',
    'add  x2, x1, x0, sxtx #3',
  ]),
  test('AddsExtendedRegister', [
    'adds  w2, w1, w0, uxtb #1',
    'adds  w2, w1, w0, uxth #2',
    'adds  w2, w1, w0, uxtw #3',
    'adds  w2, w1, w0, uxtx #4',
    'adds  w2, w1, w0, sxtb #1',
    'adds  w2, w1, w0, sxth #2',
    'adds  w2, w1, w0, sxtw #3',
    'adds  w2, w1, w0, sxtx #3',
    'adds  x2, x1, w0, uxtb #1',
    'adds  x2, x1, w0, uxth #2',
    'adds  x2, x1, w0, uxtw #3',
    'adds  x2, x1, x0, uxtx #4',
    'adds  x2, x1, w0, sxtb #1',
    'adds  x2, x1, w0, sxth #2',
    'adds  x2, x1, w0, sxtw #3',
    'adds  x2, x1, x0, sxtx #3',
  ]),
  test('CmnExtendedRegister', [
    'cmn  w1, w0, uxtb #1',
    'cmn  w1, w0, uxth #2',
    'cmn  w1, w0, uxtw #3',
    'cmn  w1, w0, uxtx #4',
    'cmn  w1, w0, sxtb #1',
    'cmn  w1, w0, sxth #2',
    'cmn  w1, w0, sxtw #3',
    'cmn  w1, w0, sxtx #3',
    'cmn  x1, w0, uxtb #1',
    'cmn  x1, w0, uxth #2',
    'cmn  x1, w0, uxtw #3',
    'cmn  x1, x0, uxtx #4',
    'cmn  x1, w0, sxtb #1',
    'cmn  x1, w0, sxth #2',
    'cmn  x1, w0, sxtw #3',
    'cmn  x1, x0, sxtx #3',
  ]),
  test('SubExtendedRegister', [
    'sub  w2, w1, w0, uxtb #1',
    'sub  w2, w1, w0, uxth #2',
    'sub  w2, w1, w0, uxtw #3',
    'sub  w2, w1, w0, uxtx #4',
    'sub  w2, w1, w0, sxtb #1',
    'sub  w2, w1, w0, sxth #2',
    'sub  w2, w1, w0, sxtw #3',
    'sub  w2, w1, w0, sxtx #3',
    'sub  x2, x1, w0, uxtb #1',
    'sub  x2, x1, w0, uxth #2',
    'sub  x2, x1, w0, uxtw #3',
    'sub  x2, x1, x0, uxtx #4',
    'sub  x2, x1, w0, sxtb #1',
    'sub  x2, x1, w0, sxth #2',
    'sub  x2, x1, w0, sxtw #3',
    'sub  x2, x1, x0, sxtx #3',
  ]),
  test('SubsExtendedRegister', [
    'subs  w2, w1, w0, uxtb #1',
    'subs  w2, w1, w0, uxth #2',
    'subs  w2, w1, w0, uxtw #3',
    'subs  w2, w1, w0, uxtx #4',
    'subs  w2, w1, w0, sxtb #1',
    'subs  w2, w1, w0, sxth #2',
    'subs  w2, w1, w0, sxtw #3',
    'subs  w2, w1, w0, sxtx #3',
    'subs  x2, x1, w0, uxtb #1',
    'subs  x2, x1, w0, uxth #2',
    'subs  x2, x1, w0, uxtw #3',
    'subs  x2, x1, x0, uxtx #4',
    'subs  x2, x1, w0, sxtb #1',
    'subs  x2, x1, w0, sxth #2',
    'subs  x2, x1, w0, sxtw #3',
    'subs  x2, x1, x0, sxtx #3',
  ]),
  test('CmpExtendedRegister', [
    'cmp  w1, w0, uxtb #1',
    'cmp  w1, w0, uxth #2',
    'cmp  w1, w0, uxtw #3',
    'cmp  w1, w0, uxtx #4',
    'cmp  w1, w0, sxtb #1',
    'cmp  w1, w0, sxth #2',
    'cmp  w1, w0, sxtw #3',
    'cmp  w1, w0, sxtx #3',
    'cmp  x1, w0, uxtb #1',
    'cmp  x1, w0, uxth #2',
    'cmp  x1, w0, uxtw #3',
    'cmp  x1, x0, uxtx #4',
    'cmp  x1, w0, sxtb #1',
    'cmp  x1, w0, sxth #2',
    'cmp  x1, w0, sxtw #3',
    'cmp  x1, x0, sxtx #3',
  ])
]

def main():
  with open('aarch64/translator_test.cpp', 'w') as tmp:
    write_header(tmp)
    for testcase in testcases:
      write_testcase(tmp, testcase)
    write_footer(tmp)
  call(['clang-format', '-i', '-style=Google', 'aarch64/translator_test.cpp'])

if __name__ == '__main__':
  main()
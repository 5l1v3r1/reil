// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstdio>
#include <random>

#include "gtest/gtest.h"

#include "reil/aarch64.h"

namespace reil {
namespace test {

// NOTE: This file is generated by aarch64_test_generator.py - please add new
// tests there and regenerate this file instead of modifying this file directly.

TEST(AArch64Translator, Adr) {
  std::vector<uint8_t> bytes = {
    0x00, 0x00, 0x00, 0x10, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x013bb94e219432d6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa5550d076de2b44e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x925929c584eea491));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xaf5d1d331e79bf8a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa5550d076de2b44e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x925929c584eea491));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaf5d1d331e79bf8a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Adrp) {
  std::vector<uint8_t> bytes = {
    0x00, 0x00, 0x00, 0x90, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3ae9fc9b3db69dc5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x56abe35f79a02eb5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2f7872db0084df5a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcbd7e266a57c21a3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x56abe35f79a02eb5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2f7872db0084df5a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcbd7e266a57c21a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, AddImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0x48, 0x00, 0x91, 0x01, 0x48, 0x40, 0x91, 0x01, 0xfc, 0x3f, 0x11, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3a011146aa4702d2));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x422963aa97dfadf0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf15e91e92df1941d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbea970c6a0a61bb6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3a011146aa4702d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3a011146aa4702e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf15e91e92df1941d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbea970c6a0a61bb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3a011146aa4702d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3a011146aa4822d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf15e91e92df1941d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbea970c6a0a61bb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3a011146aa4702d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000aa4712d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf15e91e92df1941d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbea970c6a0a61bb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AddsImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0x48, 0x00, 0xb1, 0x01, 0x48, 0x40, 0xb1, 0x01, 0xfc, 0x7f, 0x31, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x087763502315a3ab));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9cc13000dd8acd15));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x93955dfc59843b46));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6d0e066d082dd116));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x087763502315a3ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x087763502315a3bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x93955dfc59843b46));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6d0e066d082dd116));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x087763502315a3ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x087763502316c3ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x93955dfc59843b46));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6d0e066d082dd116));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x087763502315a3ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000241593ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x93955dfc59843b46));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6d0e066d082dd116));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, CmnImmediate) {
  std::vector<uint8_t> bytes = {
    0x1f, 0xf8, 0x3d, 0xb1, 0x1f, 0xf8, 0x7d, 0x31, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x71395b2494d4eaaf));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa983feaa93ab3edb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe448809ea91f5851));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5aad18d2683d96e7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71395b2494d4eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa983feaa93ab3edb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe448809ea91f5851));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5aad18d2683d96e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71395b2494d4eaaf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa983feaa93ab3edb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe448809ea91f5851));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5aad18d2683d96e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CmpImmediate) {
  std::vector<uint8_t> bytes = {
    0x1f, 0xf8, 0x3d, 0xf1, 0x1f, 0xf8, 0x7d, 0x71, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd59f0eda4103ff4b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6de750e366acbde9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x46ebc9e7efb49a28));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2ed77300f4e99997));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd59f0eda4103ff4b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6de750e366acbde9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x46ebc9e7efb49a28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2ed77300f4e99997));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd59f0eda4103ff4b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6de750e366acbde9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x46ebc9e7efb49a28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2ed77300f4e99997));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, MovToFromSp) {
  std::vector<uint8_t> bytes = {
    0x1f, 0x00, 0x00, 0x91, 0xe1, 0x03, 0x00, 0x11, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc661fe22514d6189));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x354a5709f76db428));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x68ed0cb21b7e82e1));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8343ab46ad7e11b9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc661fe22514d6189));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x354a5709f76db428));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x68ed0cb21b7e82e1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8343ab46ad7e11b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc661fe22514d6189));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000514d6189));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x68ed0cb21b7e82e1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8343ab46ad7e11b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, SubImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0x48, 0x00, 0xd1, 0x01, 0x48, 0x40, 0xd1, 0x01, 0xfc, 0x3f, 0x51, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb208ba626a665242));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x87cb677ee7ca1ec9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa589fcace264ca7c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb5ac4a3a85a25e13));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb208ba626a665242));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb208ba626a665230));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa589fcace264ca7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5ac4a3a85a25e13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb208ba626a665242));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb208ba626a653242));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa589fcace264ca7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5ac4a3a85a25e13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb208ba626a665242));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000006a664243));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa589fcace264ca7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5ac4a3a85a25e13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, SubsImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0x48, 0x00, 0xf1, 0x01, 0x48, 0x40, 0xf1, 0x01, 0xfc, 0x7f, 0x71, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf70218c9ea5ca8cc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x42e0b0f43ec90a8e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7623a3d046a3272a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x437fef6172e33c12));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf70218c9ea5ca8cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf70218c9ea5ca8ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7623a3d046a3272a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x437fef6172e33c12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf70218c9ea5ca8cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf70218c9ea5b88cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7623a3d046a3272a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x437fef6172e33c12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf70218c9ea5ca8cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000e95cb8cc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7623a3d046a3272a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x437fef6172e33c12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AndImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0xc4, 0x02, 0x92, 0x01, 0x9c, 0x08, 0x92, 0x01, 0x24, 0x00, 0x12, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7c07cc70dbf2c079));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbb5a4fb688fc28d6));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x08418c66bac47803));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc81be20aa92c7344));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7c07cc70dbf2c079));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4000c040c0c0c040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x08418c66bac47803));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc81be20aa92c7344));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7c07cc70dbf2c079));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c00cc00db00c000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x08418c66bac47803));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc81be20aa92c7344));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7c07cc70dbf2c079));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000079));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x08418c66bac47803));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc81be20aa92c7344));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, OrrImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0xc4, 0x02, 0xb2, 0x01, 0x9c, 0x08, 0xb2, 0x01, 0x24, 0x00, 0x32, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6e5b7df504b66ec1));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdc7458a995c9a186));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc80c75ac9c1d12cf));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x95f8c59f01aa12a0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6e5b7df504b66ec1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xeedbfdf5c4f6eec1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc80c75ac9c1d12cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x95f8c59f01aa12a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6e5b7df504b66ec1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xff5bfff5ffb6ffc1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc80c75ac9c1d12cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x95f8c59f01aa12a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6e5b7df504b66ec1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000004b66fff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc80c75ac9c1d12cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x95f8c59f01aa12a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, EorImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0xc4, 0x02, 0xd2, 0x01, 0x9c, 0x08, 0xd2, 0x01, 0x24, 0x00, 0x52, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8020615de8865096));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x31cae2b56871d633));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa9787df11fa0d432));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x32dac547360f3e3f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8020615de8865096));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x40e0a19d28469056));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa9787df11fa0d432));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x32dac547360f3e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8020615de8865096));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7f209e5d1786af96));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa9787df11fa0d432));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x32dac547360f3e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8020615de8865096));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000e8865369));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa9787df11fa0d432));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x32dac547360f3e3f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AndsImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0xc4, 0x02, 0xf2, 0x01, 0x9c, 0x08, 0xf2, 0x01, 0x24, 0x00, 0x72, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2370cf32093d3203));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x381f006b198d4122));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x18935e4f322b5735));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa983de314a5b54ff));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2370cf32093d3203));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0040c00000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x18935e4f322b5735));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa983de314a5b54ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2370cf32093d3203));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2300cf0009003200));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x18935e4f322b5735));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa983de314a5b54ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2370cf32093d3203));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000203));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x18935e4f322b5735));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa983de314a5b54ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, TstImmediate) {
  std::vector<uint8_t> bytes = {
    0x1f, 0x28, 0x40, 0xf2, 0x1f, 0x24, 0x00, 0x72, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9f53ba2caa4f74a7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xef563d0e1463940f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5bd4db4db040d284));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdc188dc4923c827c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9f53ba2caa4f74a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xef563d0e1463940f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5bd4db4db040d284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc188dc4923c827c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9f53ba2caa4f74a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xef563d0e1463940f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5bd4db4db040d284));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc188dc4923c827c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Movn) {
  std::vector<uint8_t> bytes = {
    0xe0, 0xff, 0x9f, 0x92, 0xe0, 0xff, 0xdf, 0x92, 0xe0, 0x1f, 0xa0, 0x12, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xa6b2b69f44c86c13));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xde9442cc79c9a204));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9e480b12d0a34929));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdc99bdbfd9397308));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffffffffffff0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xde9442cc79c9a204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e480b12d0a34929));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc99bdbfd9397308));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffff0000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xde9442cc79c9a204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e480b12d0a34929));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc99bdbfd9397308));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000ff00ffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xde9442cc79c9a204));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e480b12d0a34929));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc99bdbfd9397308));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Movz) {
  std::vector<uint8_t> bytes = {
    0x80, 0x46, 0x82, 0xd2, 0xa0, 0x79, 0xd5, 0xd2, 0x40, 0x02, 0xa0, 0x52, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x23f37bcf9a08306c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8885bc656f33e00c));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x313431506562e25c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9ab9775fd9eaa631));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8885bc656f33e00c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x313431506562e25c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ab9775fd9eaa631));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000abcd00000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8885bc656f33e00c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x313431506562e25c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ab9775fd9eaa631));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000120000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8885bc656f33e00c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x313431506562e25c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9ab9775fd9eaa631));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Movk) {
  std::vector<uint8_t> bytes = {
    0x80, 0x46, 0xe2, 0xf2, 0xa0, 0x79, 0xd5, 0xf2, 0x40, 0x02, 0xa0, 0x72, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd14c94ddfb368f39));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x136cc41e1d8780e5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x51f100a4783bd4f6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe87995904de65dfd));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x123494ddfb368f39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x136cc41e1d8780e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x51f100a4783bd4f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe87995904de65dfd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1234abcdfb368f39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x136cc41e1d8780e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x51f100a4783bd4f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe87995904de65dfd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000128f39));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x136cc41e1d8780e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x51f100a4783bd4f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe87995904de65dfd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, AsrImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0xfc, 0x4b, 0x93, 0x01, 0x7c, 0x06, 0x13, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd035176970083d23));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8a535420b3ea6365));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd52080051d7dba25));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0ca7cda048308c8e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd035176970083d23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfffa06a2ed2e0107));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd52080051d7dba25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0ca7cda048308c8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd035176970083d23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000001c020f4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd52080051d7dba25));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0ca7cda048308c8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbfiz) {
  std::vector<uint8_t> bytes = {
    0x01, 0x18, 0x4a, 0x93, 0x01, 0x04, 0x13, 0x13, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7a3532a9cbaff5e4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8e7da4b05bbddc00));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7ffb5bf52f08c4fb));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1bc9b353642a0021));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7a3532a9cbaff5e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf900000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7ffb5bf52f08c4fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1bc9b353642a0021));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7a3532a9cbaff5e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7ffb5bf52f08c4fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1bc9b353642a0021));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbfx) {
  std::vector<uint8_t> bytes = {
    0x01, 0xb0, 0x4b, 0x93, 0x01, 0x08, 0x01, 0x13, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbf6bff10131dc1f7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x77a3a8964f9fe616));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x29f915a1532ab946));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x446df16fbae8ee02));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbf6bff10131dc1f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffffffffe20263b8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x29f915a1532ab946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x446df16fbae8ee02));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbf6bff10131dc1f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x29f915a1532ab946));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x446df16fbae8ee02));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sxtb) {
  std::vector<uint8_t> bytes = {
    0x01, 0x1c, 0x00, 0x13, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7d0d1e653f74afd4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa5fc178b9bebd7fa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd7bda37f11c1d8c5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb0c6cd6bbde6eee2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7d0d1e653f74afd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffffffd4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd7bda37f11c1d8c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb0c6cd6bbde6eee2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Sxth) {
  std::vector<uint8_t> bytes = {
    0x01, 0x3c, 0x00, 0x13, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x51bad0f2bf8334dc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x00e9914c0bf209a1));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4c1a48842b63c287));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4f80cc9d7a73d5e2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x51bad0f2bf8334dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000000034dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4c1a48842b63c287));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4f80cc9d7a73d5e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Bfi) {
  std::vector<uint8_t> bytes = {
    0x01, 0x40, 0x79, 0xb3, 0x01, 0x00, 0x42, 0xb3, 0x01, 0x24, 0x0c, 0x33, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8e9e43c1cdae6b2f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xfe86fdb1358200e4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc9e1967a1a679af3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xffcfc243a49b57d3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8e9e43c1cdae6b2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfe86fdb1353597e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc9e1967a1a679af3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xffcfc243a49b57d3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8e9e43c1cdae6b2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfe86fdb1353597e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc9e1967a1a679af3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xffcfc243a49b57d3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8e9e43c1cdae6b2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000032f597e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc9e1967a1a679af3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xffcfc243a49b57d3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Bfxil) {
  std::vector<uint8_t> bytes = {
    0x01, 0x5c, 0x47, 0xb3, 0x01, 0xf8, 0x7e, 0xb3, 0x01, 0x74, 0x14, 0x33, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0cd7087cae76c906));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x28996ce1473bc8ec));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf48d537a28050a38));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xffc9f76c2a57b761));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0cd7087cae76c906));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x28996ce1473aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf48d537a28050a38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xffc9f76c2a57b761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0cd7087cae76c906));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x28996ce1473aed92));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf48d537a28050a38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xffc9f76c2a57b761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0cd7087cae76c906));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000473aeee7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf48d537a28050a38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xffc9f76c2a57b761));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LslImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0xb8, 0x6f, 0xd3, 0x01, 0x70, 0x1d, 0x53, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xfbd7fe1dafad0de9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7535bb3e18614027));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x423ab865b3fce15b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6f6b2b68dfcd2dfc));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbd7fe1dafad0de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfc3b5f5a1bd20000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x423ab865b3fce15b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f6b2b68dfcd2dfc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xfbd7fe1dafad0de9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000007d686f48));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x423ab865b3fce15b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6f6b2b68dfcd2dfc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, LsrImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0xfc, 0x4b, 0xd3, 0x01, 0x7c, 0x06, 0x53, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9c6954b27cdf0a23));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7306c62562cea519));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x14fb5dd36d2b3147));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x84f0de5eca96f230));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c6954b27cdf0a23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00138d2a964f9be1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x14fb5dd36d2b3147));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x84f0de5eca96f230));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c6954b27cdf0a23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000001f37c28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x14fb5dd36d2b3147));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x84f0de5eca96f230));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Ubfiz) {
  std::vector<uint8_t> bytes = {
    0x01, 0x18, 0x4a, 0xd3, 0x01, 0x04, 0x13, 0x53, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x427baa48aa72f43d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd65b4e6e20b022fb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x888c419ce81f7212));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa7d38244ce042360));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x427baa48aa72f43d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0f40000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x888c419ce81f7212));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa7d38244ce042360));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x427baa48aa72f43d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000002000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x888c419ce81f7212));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa7d38244ce042360));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Ubfx) {
  std::vector<uint8_t> bytes = {
    0x01, 0xb0, 0x4b, 0xd3, 0x01, 0x08, 0x01, 0x53, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd4fa31cf671f2e8b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe2bc30971d4e73fc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7b94f826730b137b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe783d49dbf3deff6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd4fa31cf671f2e8b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000239ece3e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7b94f826730b137b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe783d49dbf3deff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd4fa31cf671f2e8b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7b94f826730b137b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe783d49dbf3deff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Uxtb) {
  std::vector<uint8_t> bytes = {
    0x01, 0x1c, 0x00, 0x53, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xff3eace324d03293));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdd90b2d32b7eb121));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb547e0868fc554f3));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0fc7405d01d660f9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xff3eace324d03293));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000093));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb547e0868fc554f3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0fc7405d01d660f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Uxth) {
  std::vector<uint8_t> bytes = {
    0x01, 0x3c, 0x00, 0x53, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1ff72c57adfea667));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6f5be1661b695849));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7797fc506304f60a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7cb6ab5994bfe1c9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1ff72c57adfea667));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000000000a667));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7797fc506304f60a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7cb6ab5994bfe1c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, RorImmediate) {
  std::vector<uint8_t> bytes = {
    0x01, 0x9c, 0xc0, 0x93, 0x01, 0x18, 0x80, 0x13, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1becb2d3448e3de4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x889309d98c094042));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe25fca3f15c5c684));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb1a55c556f3b757f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1becb2d3448e3de4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa6891c7bc837d965));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe25fca3f15c5c684));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb1a55c556f3b757f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1becb2d3448e3de4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000911238f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe25fca3f15c5c684));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb1a55c556f3b757f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Extract) {
  std::vector<uint8_t> bytes = {
    0x22, 0xf4, 0xc0, 0x93, 0x22, 0x44, 0x80, 0x13, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x360e8b4afa8b61c3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa28c46df786e8e8e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x537013c196516ec4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x44095b3467e64b9f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x360e8b4afa8b61c3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa28c46df786e8e8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x146236fbc3747471));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x44095b3467e64b9f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x360e8b4afa8b61c3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa28c46df786e8e8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000047477d45));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x44095b3467e64b9f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CompareAndBranch) {
  std::vector<uint8_t> bytes = {
    0x00, 0x00, 0x80, 0xd2, 0x81, 0x46, 0x82, 0xd2, 0xa0, 0x00, 0x00, 0xb5, 0x40, 0x00, 0x00, 0xb4, 0x1f, 0x20, 0x03, 0xd5, 0x41, 0x00, 0x00, 0x34, 0x41, 0x00, 0x00, 0x35, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf83243c62c2f7059));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3747984d85a6a797));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9f9e52b943445e55));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2272ec638d842937));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3747984d85a6a797));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9f9e52b943445e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2272ec638d842937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9f9e52b943445e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2272ec638d842937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9f9e52b943445e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2272ec638d842937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9f9e52b943445e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2272ec638d842937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9f9e52b943445e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2272ec638d842937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9f9e52b943445e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2272ec638d842937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000001234));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9f9e52b943445e55));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2272ec638d842937));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));
}

TEST(AArch64Translator, ConditionalBranch) {
  std::vector<uint8_t> bytes = {
    0x00, 0x00, 0x80, 0xd2, 0x1f, 0x00, 0x00, 0xf1, 0x40, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5, 0x81, 0x02, 0x00, 0x54, 0x42, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5, 0x23, 0x02, 0x00, 0x54, 0x45, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5, 0xc4, 0x01, 0x00, 0x54, 0x47, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5, 0x66, 0x01, 0x00, 0x54, 0x49, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5, 0x08, 0x01, 0x00, 0x54, 0x4a, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5, 0xab, 0x00, 0x00, 0x54, 0x4d, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5, 0x4e, 0x00, 0x00, 0x54, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0c718ee033e5ae67));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x442c59ec53481536));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x89ef6e0fac1ab19d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x944274fe759c425e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001044));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000104c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001050));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001058));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001060));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x442c59ec53481536));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89ef6e0fac1ab19d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x944274fe759c425e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001064));
}

TEST(AArch64Translator, TestAndBranchIfZero) {
  std::vector<uint8_t> bytes = {
    0x40, 0x00, 0x88, 0x36, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2c876a057fb10f23));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd40044377786fb57));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfdf9ff82d6817268));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x58c4ead577bae669));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c876a057fb10f23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd40044377786fb57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfdf9ff82d6817268));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x58c4ead577bae669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2c876a057fb10f23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd40044377786fb57));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfdf9ff82d6817268));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x58c4ead577bae669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, TestAndBranchIfNonzero) {
  std::vector<uint8_t> bytes = {
    0x40, 0x00, 0xf8, 0xb7, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x540183dcd988d35a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8095c23b6634dd38));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf0b8ebac6a096514));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf5551cc336a946c2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x540183dcd988d35a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8095c23b6634dd38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf0b8ebac6a096514));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5551cc336a946c2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x540183dcd988d35a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8095c23b6634dd38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf0b8ebac6a096514));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5551cc336a946c2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x540183dcd988d35a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8095c23b6634dd38));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf0b8ebac6a096514));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf5551cc336a946c2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, BranchRegister) {
  std::vector<uint8_t> bytes = {
    0xa0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x1f, 0xd6, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x84b39193de420666));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9e0e5bb47e776020));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x33ee0bfae4c722fd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x40ec3f8ebe894d8c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e0e5bb47e776020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x33ee0bfae4c722fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x40ec3f8ebe894d8c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e0e5bb47e776020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x33ee0bfae4c722fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x40ec3f8ebe894d8c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e0e5bb47e776020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x33ee0bfae4c722fd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x40ec3f8ebe894d8c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchAndLinkRegister) {
  std::vector<uint8_t> bytes = {
    0xa0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x3f, 0xd6, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4c92a14cb293a282));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc016f71518218516));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7e1142b001abc3b7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xeed15ca0cd99be9a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc016f71518218516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7e1142b001abc3b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xeed15ca0cd99be9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc016f71518218516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7e1142b001abc3b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xeed15ca0cd99be9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc016f71518218516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7e1142b001abc3b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xeed15ca0cd99be9a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchImmediateForward) {
  std::vector<uint8_t> bytes = {
    0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xbfbed06f95e57257));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd02a9d17d01c138a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6eaa4f0bfd0105ab));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xaaf36ae329ea4b98));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfbed06f95e57257));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd02a9d17d01c138a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6eaa4f0bfd0105ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaaf36ae329ea4b98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xbfbed06f95e57257));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd02a9d17d01c138a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6eaa4f0bfd0105ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaaf36ae329ea4b98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, BranchImmediateBackward) {
  std::vector<uint8_t> bytes = {
    0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x03, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0xfd, 0xff, 0xff, 0x17, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0be158069c113415));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x935d6a71b91e520d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x43651448c7e72202));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x69e2e9fc0bbf235a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0be158069c113415));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x935d6a71b91e520d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x43651448c7e72202));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69e2e9fc0bbf235a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0be158069c113415));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x935d6a71b91e520d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x43651448c7e72202));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69e2e9fc0bbf235a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0be158069c113415));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x935d6a71b91e520d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x43651448c7e72202));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69e2e9fc0bbf235a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0be158069c113415));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x935d6a71b91e520d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x43651448c7e72202));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69e2e9fc0bbf235a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0be158069c113415));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x935d6a71b91e520d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x43651448c7e72202));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x69e2e9fc0bbf235a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, BranchAndLinkImmediateForward) {
  std::vector<uint8_t> bytes = {
    0x04, 0x00, 0x00, 0x94, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0fd8ba61e265dd43));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbae777b91207ca61));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9f79d1a115a25640));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7400cccbb8d5d40d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0fd8ba61e265dd43));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbae777b91207ca61));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9f79d1a115a25640));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7400cccbb8d5d40d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0fd8ba61e265dd43));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbae777b91207ca61));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9f79d1a115a25640));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7400cccbb8d5d40d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, BranchAndLinkImmediateBackward) {
  std::vector<uint8_t> bytes = {
    0x04, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0x03, 0x00, 0x00, 0x14, 0x1f, 0x20, 0x03, 0xd5, 0xfd, 0xff, 0xff, 0x97, 0x1f, 0x20, 0x03, 0xd5, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0c6f9a88c0784aeb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6f88c1842c894974));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8e932ad62d35d68d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x33e98b267a0815a9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6f9a88c0784aeb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6f88c1842c894974));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e932ad62d35d68d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x33e98b267a0815a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6f9a88c0784aeb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6f88c1842c894974));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e932ad62d35d68d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x33e98b267a0815a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6f9a88c0784aeb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6f88c1842c894974));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e932ad62d35d68d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x33e98b267a0815a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6f9a88c0784aeb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6f88c1842c894974));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e932ad62d35d68d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x33e98b267a0815a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0c6f9a88c0784aeb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6f88c1842c894974));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e932ad62d35d68d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x33e98b267a0815a9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, Stxrb) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x08, 0x41, 0x7c, 0x00, 0x08, 0x40, 0x7c, 0x5f, 0x08, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x68b73d24842756c3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x012bd1744dda90aa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x08cb5b09ba3d1a0b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xefb5e96335f105d5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x68b73d24842756c3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x012bd1744dda90aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xefb5e96335f105d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x012bd1744dda90aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xefb5e96335f105d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x012bd1744dda90aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xefb5e96335f105d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000000aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x012bd1744dda90aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xefb5e96335f105d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000000aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x012bd1744dda90aa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xefb5e96335f105d5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrb) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x08, 0x41, 0xfc, 0x00, 0x08, 0x40, 0xfc, 0x5f, 0x08, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcb3826b2dd0c4bf4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb182b4c6139bc07e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9ee54911f829e3b7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x342f06118d6e23b6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcb3826b2dd0c4bf4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb182b4c6139bc07e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x342f06118d6e23b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb182b4c6139bc07e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x342f06118d6e23b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb182b4c6139bc07e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x342f06118d6e23b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000007e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb182b4c6139bc07e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x342f06118d6e23b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000007e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb182b4c6139bc07e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x342f06118d6e23b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrb) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x08, 0x41, 0xfc, 0x9f, 0x08, 0x40, 0xfc, 0xdf, 0x08, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0f8c8a2ae4560113));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x02b8e21a76d97c63));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc5427d60ab8a5d7a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbff19fbf070f7533));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0f8c8a2ae4560113));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x02b8e21a76d97c63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbff19fbf070f7533));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x02b8e21a76d97c63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbff19fbf070f7533));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x02b8e21a76d97c63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbff19fbf070f7533));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000063));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x02b8e21a76d97c63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbff19fbf070f7533));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000063));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x02b8e21a76d97c63));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbff19fbf070f7533));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrh) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x48, 0x41, 0x7c, 0x00, 0x48, 0x40, 0x7c, 0x5f, 0x48, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0b95d73f7ec23cb7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9b441a2158f6677a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7a492462dfe4f76d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5460ade8d428eb00));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0b95d73f7ec23cb7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9b441a2158f6677a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5460ade8d428eb00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9b441a2158f6677a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5460ade8d428eb00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9b441a2158f6677a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5460ade8d428eb00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000677a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9b441a2158f6677a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5460ade8d428eb00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000000000677a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9b441a2158f6677a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5460ade8d428eb00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrh) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x48, 0x41, 0xfc, 0x00, 0x48, 0x40, 0xfc, 0x5f, 0x48, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5fb36dd77b6cd6d8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9fe4d7c77e7550bb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8ae145e5e1c8b8df));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc66d7d56ac54f2d4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5fb36dd77b6cd6d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fe4d7c77e7550bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc66d7d56ac54f2d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fe4d7c77e7550bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc66d7d56ac54f2d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fe4d7c77e7550bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc66d7d56ac54f2d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000050bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fe4d7c77e7550bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc66d7d56ac54f2d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000000050bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fe4d7c77e7550bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc66d7d56ac54f2d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrh) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x48, 0x41, 0xfc, 0x9f, 0x48, 0x40, 0xfc, 0xdf, 0x48, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6530ff08ce692996));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x90d220b2d3ca5dd3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0292f24a21e0ee84));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7ae0689e85f2de01));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6530ff08ce692996));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90d220b2d3ca5dd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ae0689e85f2de01));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90d220b2d3ca5dd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ae0689e85f2de01));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000004141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90d220b2d3ca5dd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ae0689e85f2de01));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000005dd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90d220b2d3ca5dd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ae0689e85f2de01));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000005dd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90d220b2d3ca5dd3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7ae0689e85f2de01));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrw) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0x88, 0x41, 0x7c, 0x00, 0x88, 0x40, 0x7c, 0x5f, 0x88, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb2a132ef8efc857a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6d35e8f463833603));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x42fc20c938f9c783));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe026a823d8c765e7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb2a132ef8efc857a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6d35e8f463833603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe026a823d8c765e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6d35e8f463833603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe026a823d8c765e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6d35e8f463833603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe026a823d8c765e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000063833603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6d35e8f463833603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe026a823d8c765e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000063833603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6d35e8f463833603));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe026a823d8c765e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxpw) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0x00, 0x7f, 0x88, 0x41, 0x0c, 0x20, 0x88, 0x40, 0x04, 0x7f, 0x88, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x90cd389304e47ba8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdcb73d7c6525d7df));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfb266a30c3ac28b2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa4ad3f9c8bcca348));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x90cd389304e47ba8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdcb73d7c6525d7df));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa4ad3f9c8bcca348));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdcb73d7c6525d7df));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa4ad3f9c8bcca348));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdcb73d7c6525d7df));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa4ad3f9c8bcca348));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000006525d7df));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000008bcca348));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa4ad3f9c8bcca348));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000006525d7df));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000008bcca348));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa4ad3f9c8bcca348));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxpw) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0x80, 0x7f, 0x88, 0x41, 0x8c, 0x20, 0x88, 0x40, 0x84, 0x7f, 0x88, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6b38c1741c76104b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd24918d21f11586a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x54341afd37f5ea39));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4c5bc1a92f871626));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6b38c1741c76104b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd24918d21f11586a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c5bc1a92f871626));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd24918d21f11586a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c5bc1a92f871626));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd24918d21f11586a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c5bc1a92f871626));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000001f11586a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000002f871626));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c5bc1a92f871626));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000001f11586a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000002f871626));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4c5bc1a92f871626));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrw) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0x88, 0x41, 0xfc, 0x00, 0x88, 0x40, 0xfc, 0x5f, 0x88, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4b74370803dcba2d));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9cbd43a1968db7e9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe6f6aefe6f39e41b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7689b98b8f08aa28));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4b74370803dcba2d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9cbd43a1968db7e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7689b98b8f08aa28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9cbd43a1968db7e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7689b98b8f08aa28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9cbd43a1968db7e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7689b98b8f08aa28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000968db7e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9cbd43a1968db7e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7689b98b8f08aa28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000968db7e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9cbd43a1968db7e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7689b98b8f08aa28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrw) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0x88, 0x41, 0xfc, 0x9f, 0x88, 0x40, 0xfc, 0xdf, 0x88, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x04375456981b8407));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7c6adfca7a99c325));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1afd1faf6742f8b2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb548f143e5e8df56));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x04375456981b8407));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c6adfca7a99c325));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb548f143e5e8df56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c6adfca7a99c325));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb548f143e5e8df56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c6adfca7a99c325));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb548f143e5e8df56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000007a99c325));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c6adfca7a99c325));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb548f143e5e8df56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000007a99c325));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7c6adfca7a99c325));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb548f143e5e8df56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stxrx) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0x7c, 0x5f, 0xc8, 0x41, 0x7c, 0x00, 0xc8, 0x40, 0x7c, 0x5f, 0xc8, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7c9e25b7e66b1b05));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xce6770049db396a8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1a8ebfa6b4024741));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xac12a9cdaac792a6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7c9e25b7e66b1b05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce6770049db396a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac12a9cdaac792a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce6770049db396a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac12a9cdaac792a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce6770049db396a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac12a9cdaac792a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xce6770049db396a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce6770049db396a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac12a9cdaac792a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xce6770049db396a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xce6770049db396a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac12a9cdaac792a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlxrx) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0x5f, 0xc8, 0x41, 0xfc, 0x00, 0xc8, 0x40, 0xfc, 0x5f, 0xc8, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc51399615c4284e0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2df40dd345a4afd7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4a67bb7dbd91f570));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x0846d0e66173c430));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc51399615c4284e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2df40dd345a4afd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0846d0e66173c430));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2df40dd345a4afd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0846d0e66173c430));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2df40dd345a4afd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0846d0e66173c430));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2df40dd345a4afd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2df40dd345a4afd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0846d0e66173c430));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2df40dd345a4afd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2df40dd345a4afd7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x0846d0e66173c430));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, Stlrx) {
  std::vector<uint8_t> bytes = {
    0xa2, 0x00, 0x00, 0x10, 0x40, 0xfc, 0xdf, 0xc8, 0x41, 0xfc, 0x9f, 0xc8, 0x40, 0xfc, 0xdf, 0xc8, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x60609e96bb2f739b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x645fa4bf2b6dcccb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe44a5016852d3bc4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x63dcca4177dcbc5f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60609e96bb2f739b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x645fa4bf2b6dcccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x63dcca4177dcbc5f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x645fa4bf2b6dcccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x63dcca4177dcbc5f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x645fa4bf2b6dcccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x63dcca4177dcbc5f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x645fa4bf2b6dcccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x645fa4bf2b6dcccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x63dcca4177dcbc5f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x645fa4bf2b6dcccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x645fa4bf2b6dcccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001014));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x63dcca4177dcbc5f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));
}

TEST(AArch64Translator, LdrwLiteral) {
  std::vector<uint8_t> bytes = {
    0x40, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xfc38b2a15a0e5f09));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x809afade6aa1a4d8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2a987067d85116b7));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf0a8062b1d446e91));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x809afade6aa1a4d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a987067d85116b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf0a8062b1d446e91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x809afade6aa1a4d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a987067d85116b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf0a8062b1d446e91));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrxLiteral) {
  std::vector<uint8_t> bytes = {
    0x40, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6c2f99a910aab31a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x687589c61fb01e67));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x66797d6ac075aefd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbea6a0cad9dbdea0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x687589c61fb01e67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66797d6ac075aefd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbea6a0cad9dbdea0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4141414141414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x687589c61fb01e67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x66797d6ac075aefd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbea6a0cad9dbdea0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrswLiteralPositive) {
  std::vector<uint8_t> bytes = {
    0x40, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x429da2e29c41b27c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x361bc5dedd415a09));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfa51e9704904754c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd73e5bca470c6a56));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x361bc5dedd415a09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfa51e9704904754c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd73e5bca470c6a56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x361bc5dedd415a09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfa51e9704904754c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd73e5bca470c6a56));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdrswLiteralNegative) {
  std::vector<uint8_t> bytes = {
    0x40, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x843fbc0832099ede));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa799c7165e0c5cbc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x019972230a8190e4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x198982d24a50733a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa799c7165e0c5cbc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x019972230a8190e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x198982d24a50733a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000041414141));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa799c7165e0c5cbc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x019972230a8190e4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x198982d24a50733a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, Ldstnpw) {
  std::vector<uint8_t> bytes = {
    0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x02, 0x28, 0x41, 0x00, 0x42, 0x28, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x56cf49f6d4458d19));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb15b3af9f3bc78ff));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x664a7fefa55a4f89));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x16b5fc410812fff2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cf49f6d4458d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb15b3af9f3bc78ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x16b5fc410812fff2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x56cf49f6d4458d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb15b3af9f3bc78ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x16b5fc410812fff2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000f3bc78ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d4458d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x16b5fc410812fff2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Ldpsw) {
  std::vector<uint8_t> bytes = {
    0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x02, 0x29, 0x41, 0x00, 0x42, 0x69, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4d7360e7e27306e7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd13e3489a60ec360));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x064ef4daf03c25b2));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x35a6e4dc16f86f12));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4d7360e7e27306e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd13e3489a60ec360));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x35a6e4dc16f86f12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4d7360e7e27306e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd13e3489a60ec360));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x35a6e4dc16f86f12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xffffffffa60ec360));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffffffffe27306e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x35a6e4dc16f86f12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, Ldstnpx) {
  std::vector<uint8_t> bytes = {
    0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x01, 0xa8, 0x41, 0x00, 0x41, 0xa8, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9e58a48c615917f5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd34f394382526bc3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x3daba402a2d1ea2f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9bb99ff0d39e4fa3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9e58a48c615917f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd34f394382526bc3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9bb99ff0d39e4fa3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9e58a48c615917f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd34f394382526bc3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9bb99ff0d39e4fa3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd34f394382526bc3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e58a48c615917f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9bb99ff0d39e4fa3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LdstpwPreindex) {
  std::vector<uint8_t> bytes = {
    0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x81, 0x29, 0x42, 0x00, 0x00, 0x10, 0x41, 0x00, 0xc1, 0x29, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf851e52998996302));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe8e423599777ebf7));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1137e75e3d233b25));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x208058943e64edc0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf851e52998996302));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe8e423599777ebf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x208058943e64edc0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf851e52998996302));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe8e423599777ebf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x208058943e64edc0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf851e52998996302));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe8e423599777ebf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x208058943e64edc0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000009777ebf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000098996302));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x208058943e64edc0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdstpwOffset) {
  std::vector<uint8_t> bytes = {
    0x62, 0x00, 0x00, 0x10, 0x40, 0x04, 0x00, 0x29, 0x41, 0x80, 0x7f, 0x29, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6131502e3f99f92e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x8d40d66ffa92380b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xdbaaa8a0a217114b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x54fb093429ba35a3));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6131502e3f99f92e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8d40d66ffa92380b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54fb093429ba35a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6131502e3f99f92e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x8d40d66ffa92380b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54fb093429ba35a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x000000003f99f92e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000297f8041));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x54fb093429ba35a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LdstpwPostindex) {
  std::vector<uint8_t> bytes = {
    0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x82, 0x28, 0x42, 0x00, 0x00, 0x10, 0x41, 0x00, 0xc2, 0x28, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6a059429e33b3a0e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3be87af4d6c83b16));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0bf2db6a1d93c4ba));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3693c3964d60eced));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6a059429e33b3a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3be87af4d6c83b16));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3693c3964d60eced));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6a059429e33b3a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3be87af4d6c83b16));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3693c3964d60eced));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6a059429e33b3a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3be87af4d6c83b16));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3693c3964d60eced));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x00000000d6c83b16));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000e33b3a0e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3693c3964d60eced));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdstpxPreindex) {
  std::vector<uint8_t> bytes = {
    0x82, 0x00, 0x00, 0x10, 0x40, 0x04, 0x81, 0xa9, 0x42, 0x00, 0x00, 0x10, 0x41, 0x00, 0xc1, 0xa9, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc3957fd83b097d66));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x46535e6f8a63cb2a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xecc6560162191319));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd4a460a660ee7a74));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc3957fd83b097d66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x46535e6f8a63cb2a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4a460a660ee7a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc3957fd83b097d66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x46535e6f8a63cb2a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4a460a660ee7a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc3957fd83b097d66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x46535e6f8a63cb2a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4a460a660ee7a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x46535e6f8a63cb2a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc3957fd83b097d66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd4a460a660ee7a74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, LdstpxOffset) {
  std::vector<uint8_t> bytes = {
    0x62, 0x00, 0x00, 0x10, 0x40, 0x84, 0x00, 0xa9, 0x41, 0x00, 0x41, 0xa9, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xef04f4d00aece8a3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4e32f22394ebdeb4));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xdca46d34db9bc867));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7f88c9d29c36c335));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xef04f4d00aece8a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e32f22394ebdeb4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7f88c9d29c36c335));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xef04f4d00aece8a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e32f22394ebdeb4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7f88c9d29c36c335));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4e32f22394ebdeb4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000100c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7f88c9d29c36c335));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));
}

TEST(AArch64Translator, LdstpxPostindex) {
  std::vector<uint8_t> bytes = {
    0x82, 0x00, 0x00, 0x10, 0x40, 0x84, 0x80, 0xa8, 0x42, 0x00, 0x00, 0x10, 0x41, 0x80, 0xc0, 0xa8, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x821aeaed369da1c0));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb037f13ccf9c83ea));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcbfb1e9f5ed2e3a5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd9ad15fec087ae36));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x821aeaed369da1c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb037f13ccf9c83ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd9ad15fec087ae36));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x821aeaed369da1c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb037f13ccf9c83ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd9ad15fec087ae36));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x821aeaed369da1c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb037f13ccf9c83ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001010));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd9ad15fec087ae36));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb037f13ccf9c83ea));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x821aeaed369da1c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000001018));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd9ad15fec087ae36));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));
}

TEST(AArch64Translator, Adc) {
  std::vector<uint8_t> bytes = {
    0x22, 0x00, 0x00, 0x9a, 0x22, 0x00, 0x00, 0x1a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x941ba054e23a2766));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3038d726dada803f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8e4f494a30e7c44f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x216772a9af25600f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x941ba054e23a2766));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3038d726dada803f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc454777bbd14a7a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x216772a9af25600f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x941ba054e23a2766));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3038d726dada803f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000bd14a7a6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x216772a9af25600f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Adcs) {
  std::vector<uint8_t> bytes = {
    0x22, 0x00, 0x00, 0xba, 0x22, 0x00, 0x00, 0x3a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcdfb589f8f43c5f6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xaed74d3b5612db98));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcf5e1773cdbb26a9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5401a066fc814dbb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcdfb589f8f43c5f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaed74d3b5612db98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7cd2a5dae556a18f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5401a066fc814dbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcdfb589f8f43c5f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xaed74d3b5612db98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e556a18f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5401a066fc814dbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbc) {
  std::vector<uint8_t> bytes = {
    0x22, 0x00, 0x00, 0xda, 0x22, 0x00, 0x00, 0x5a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x95bbf4a7d2c87c23));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc360d2fd8bf478e9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x39e9b68b33ff9f26));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe1236eeebd7d489d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x95bbf4a7d2c87c23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc360d2fd8bf478e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2da4de55b92bfcc5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe1236eeebd7d489d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x95bbf4a7d2c87c23));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc360d2fd8bf478e9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b92bfcc5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe1236eeebd7d489d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Sbcs) {
  std::vector<uint8_t> bytes = {
    0x22, 0x00, 0x00, 0xfa, 0x22, 0x00, 0x00, 0x7a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcb2fca8cc248e2c9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5e887c78734a1a9b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2d16dc364b9a1d32));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6a37adb156fc770a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcb2fca8cc248e2c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e887c78734a1a9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9358b1ebb10137d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6a37adb156fc770a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcb2fca8cc248e2c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e887c78734a1a9b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b10137d1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x6a37adb156fc770a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, CcmpRegister) {
  std::vector<uint8_t> bytes = {
    0x69, 0x00, 0x42, 0xfa, 0x68, 0x10, 0x42, 0x7a, 0x6b, 0x20, 0x42, 0xfa, 0x6a, 0x30, 0x42, 0x7a, 0x6f, 0x40, 0x42, 0xfa, 0x6e, 0x50, 0x42, 0x7a, 0x66, 0x60, 0x42, 0xfa, 0x6d, 0x70, 0x42, 0x7a, 0x6c, 0x80, 0x42, 0xfa, 0x65, 0x90, 0x42, 0x7a, 0x60, 0xa0, 0x42, 0xfa, 0x61, 0xb0, 0x42, 0x7a, 0x63, 0xc0, 0x42, 0xfa, 0x67, 0xd0, 0x42, 0x7a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x60dc5068d2b42ba3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd6bec313fd4a966f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0d5be29a30397daf));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x47ff402f424766ac));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x60dc5068d2b42ba3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xd6bec313fd4a966f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0d5be29a30397daf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x47ff402f424766ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmnRegister) {
  std::vector<uint8_t> bytes = {
    0x69, 0x00, 0x42, 0xba, 0x68, 0x10, 0x42, 0x3a, 0x6b, 0x20, 0x42, 0xba, 0x6a, 0x30, 0x42, 0x3a, 0x6f, 0x40, 0x42, 0xba, 0x6e, 0x50, 0x42, 0x3a, 0x66, 0x60, 0x42, 0xba, 0x6d, 0x70, 0x42, 0x3a, 0x6c, 0x80, 0x42, 0xba, 0x65, 0x90, 0x42, 0x3a, 0x60, 0xa0, 0x42, 0xba, 0x61, 0xb0, 0x42, 0x3a, 0x63, 0xc0, 0x42, 0xba, 0x67, 0xd0, 0x42, 0x3a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x3c423e5d85251575));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa3a2a8f6ba389858));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x111d080023a086af));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x62352085198b2602));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xb >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xb >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xb >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xb >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xc >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xc >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xc >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xc >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x3c423e5d85251575));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa3a2a8f6ba389858));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x111d080023a086af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x62352085198b2602));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmpImmediate) {
  std::vector<uint8_t> bytes = {
    0x09, 0x08, 0x5f, 0xfa, 0x08, 0x18, 0x5e, 0x7a, 0x0b, 0x28, 0x5d, 0xfa, 0x0a, 0x38, 0x5c, 0x7a, 0x0f, 0x48, 0x5b, 0xfa, 0x0e, 0x58, 0x5a, 0x7a, 0x06, 0x68, 0x59, 0xfa, 0x0d, 0x78, 0x57, 0x7a, 0x0c, 0x88, 0x55, 0xfa, 0x05, 0x98, 0x54, 0x7a, 0x00, 0xa8, 0x53, 0xfa, 0x01, 0xb8, 0x52, 0x7a, 0x03, 0xc8, 0x41, 0xfa, 0x07, 0xd8, 0x40, 0x7a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xac0274c3c6bb409b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa681494b84a98fa5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xbf6c193c103a1d08));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xf9e7e6bd9144d6b2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xe >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xe >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xe >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xe >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xac0274c3c6bb409b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa681494b84a98fa5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbf6c193c103a1d08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xf9e7e6bd9144d6b2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, CcmnImmediate) {
  std::vector<uint8_t> bytes = {
    0x09, 0x08, 0x5f, 0xba, 0x08, 0x18, 0x5e, 0x3a, 0x0b, 0x28, 0x5d, 0xba, 0x0a, 0x38, 0x5c, 0x3a, 0x0f, 0x48, 0x5b, 0xba, 0x0e, 0x58, 0x5a, 0x3a, 0x06, 0x68, 0x59, 0xba, 0x0d, 0x78, 0x57, 0x3a, 0x0c, 0x88, 0x55, 0xba, 0x05, 0x98, 0x54, 0x3a, 0x00, 0xa8, 0x53, 0xba, 0x01, 0xb8, 0x52, 0x3a, 0x03, 0xc8, 0x41, 0xba, 0x07, 0xd8, 0x40, 0x3a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x48a06a349e45ed1a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x155f8db1cccefa13));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x86390af3155da0ad));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdffe4df7b056b032));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xb >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xb >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xb >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xb >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xc >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xc >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xc >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xc >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x48a06a349e45ed1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x155f8db1cccefa13));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x86390af3155da0ad));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdffe4df7b056b032));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Csel) {
  std::vector<uint8_t> bytes = {
    0x22, 0x00, 0x80, 0x9a, 0x22, 0x10, 0x80, 0x1a, 0x22, 0x20, 0x80, 0x9a, 0x22, 0x30, 0x80, 0x1a, 0x22, 0x40, 0x80, 0x9a, 0x22, 0x50, 0x80, 0x1a, 0x22, 0x60, 0x80, 0x9a, 0x22, 0x70, 0x80, 0x1a, 0x22, 0x80, 0x80, 0x9a, 0x22, 0x90, 0x80, 0x1a, 0x22, 0xa0, 0x80, 0x9a, 0x22, 0xb0, 0x80, 0x1a, 0x22, 0xc0, 0x80, 0x9a, 0x22, 0xd0, 0x80, 0x1a, 0x22, 0xe0, 0x80, 0x9a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x672609e55a21896e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5e142d8aadc5b4e8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4da68432e6d22df6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd07b110ffcbe7077));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000adc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000adc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000adc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000adc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000adc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x672609e55a21896e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5e142d8aadc5b4e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd07b110ffcbe7077));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csinc) {
  std::vector<uint8_t> bytes = {
    0x22, 0x04, 0x80, 0x9a, 0x22, 0x14, 0x80, 0x1a, 0x22, 0x24, 0x80, 0x9a, 0x22, 0x34, 0x80, 0x1a, 0x22, 0x44, 0x80, 0x9a, 0x22, 0x54, 0x80, 0x1a, 0x22, 0x64, 0x80, 0x9a, 0x22, 0x74, 0x80, 0x1a, 0x22, 0x84, 0x80, 0x9a, 0x22, 0x94, 0x80, 0x1a, 0x22, 0xa4, 0x80, 0x9a, 0x22, 0xb4, 0x80, 0x1a, 0x22, 0xc4, 0x80, 0x9a, 0x22, 0xd4, 0x80, 0x1a, 0x22, 0xe4, 0x80, 0x9a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x965a66ae2c4acfcd));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x086dac3cfe2af991));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4caf969af7e83f8a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4aac431b2dcebb50));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002c4acfce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x965a66ae2c4acfce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x965a66ae2c4acfce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x965a66ae2c4acfce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x965a66ae2c4acfce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002c4acfce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x965a66ae2c4acfce));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000fe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x965a66ae2c4acfcd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x086dac3cfe2af991));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4aac431b2dcebb50));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csinv) {
  std::vector<uint8_t> bytes = {
    0x22, 0x00, 0x80, 0xda, 0x22, 0x10, 0x80, 0x5a, 0x22, 0x20, 0x80, 0xda, 0x22, 0x30, 0x80, 0x5a, 0x22, 0x40, 0x80, 0xda, 0x22, 0x50, 0x80, 0x5a, 0x22, 0x60, 0x80, 0xda, 0x22, 0x70, 0x80, 0x5a, 0x22, 0x80, 0x80, 0xda, 0x22, 0x90, 0x80, 0x5a, 0x22, 0xa0, 0x80, 0xda, 0x22, 0xb0, 0x80, 0x5a, 0x22, 0xc0, 0x80, 0xda, 0x22, 0xd0, 0x80, 0x5a, 0x22, 0xe0, 0x80, 0xda, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc02618ec6f053b78));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0b43f356ffed05d0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa6ede3709694d9bb));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x21251515dad0d190));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x3fd9e71390fac487));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000090fac487));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x3fd9e71390fac487));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x3fd9e71390fac487));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000090fac487));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000090fac487));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000090fac487));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc02618ec6f053b78));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0b43f356ffed05d0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x21251515dad0d190));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Csneg) {
  std::vector<uint8_t> bytes = {
    0x22, 0x04, 0x80, 0xda, 0x22, 0x14, 0x80, 0x5a, 0x22, 0x24, 0x80, 0xda, 0x22, 0x34, 0x80, 0x5a, 0x22, 0x44, 0x80, 0xda, 0x22, 0x54, 0x80, 0x5a, 0x22, 0x64, 0x80, 0xda, 0x22, 0x74, 0x80, 0x5a, 0x22, 0x84, 0x80, 0xda, 0x22, 0x94, 0x80, 0x5a, 0x22, 0xa4, 0x80, 0xda, 0x22, 0xb4, 0x80, 0x5a, 0x22, 0xc4, 0x80, 0xda, 0x22, 0xd4, 0x80, 0x5a, 0x22, 0xe4, 0x80, 0xda, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x81345b227d529535));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe85805ccf76076be));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6902358b7b474fbd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3010e3b61afe7ce2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000082ad6acb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000082ad6acb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7ecba4dd82ad6acb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7ecba4dd82ad6acb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7ecba4dd82ad6acb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000082ad6acb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x7ecba4dd82ad6acb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x81345b227d529535));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe85805ccf76076be));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3010e3b61afe7ce2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));
}

TEST(AArch64Translator, Cset) {
  std::vector<uint8_t> bytes = {
    0xe2, 0x17, 0x9f, 0x9a, 0xe2, 0x07, 0x9f, 0x1a, 0xe2, 0x37, 0x9f, 0x9a, 0xe2, 0x27, 0x9f, 0x1a, 0xe2, 0x57, 0x9f, 0x9a, 0xe2, 0x47, 0x9f, 0x1a, 0xe2, 0x77, 0x9f, 0x9a, 0xe2, 0x67, 0x9f, 0x1a, 0xe2, 0x97, 0x9f, 0x9a, 0xe2, 0x87, 0x9f, 0x1a, 0xe2, 0xb7, 0x9f, 0x9a, 0xe2, 0xa7, 0x9f, 0x1a, 0xe2, 0xd7, 0x9f, 0x9a, 0xe2, 0xc7, 0x9f, 0x1a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8862390ce1eff8ca));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x97c352c5cef500e0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x91b69bf9106c08eb));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x46d343a9ef42e618));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8862390ce1eff8ca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x97c352c5cef500e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x46d343a9ef42e618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Csetm) {
  std::vector<uint8_t> bytes = {
    0xe2, 0x13, 0x9f, 0xda, 0xe2, 0x03, 0x9f, 0x5a, 0xe2, 0x33, 0x9f, 0xda, 0xe2, 0x23, 0x9f, 0x5a, 0xe2, 0x53, 0x9f, 0xda, 0xe2, 0x43, 0x9f, 0x5a, 0xe2, 0x73, 0x9f, 0xda, 0xe2, 0x63, 0x9f, 0x5a, 0xe2, 0x93, 0x9f, 0xda, 0xe2, 0x83, 0x9f, 0x5a, 0xe2, 0xb3, 0x9f, 0xda, 0xe2, 0xa3, 0x9f, 0x5a, 0xe2, 0xd3, 0x9f, 0xda, 0xe2, 0xc3, 0x9f, 0x5a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x5e42871721be29f6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x0d29f445ca5cf917));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb7ef599ee825c88d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x974771c457b0c1e5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xffffffffffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x5e42871721be29f6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0d29f445ca5cf917));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffffffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x974771c457b0c1e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cinc) {
  std::vector<uint8_t> bytes = {
    0x01, 0x14, 0x80, 0x9a, 0x01, 0x04, 0x80, 0x1a, 0x01, 0x34, 0x80, 0x9a, 0x01, 0x24, 0x80, 0x1a, 0x01, 0x54, 0x80, 0x9a, 0x01, 0x44, 0x80, 0x1a, 0x01, 0x74, 0x80, 0x9a, 0x01, 0x64, 0x80, 0x1a, 0x01, 0x94, 0x80, 0x9a, 0x01, 0x84, 0x80, 0x1a, 0x01, 0xb4, 0x80, 0x9a, 0x01, 0xa4, 0x80, 0x1a, 0x01, 0xd4, 0x80, 0x9a, 0x01, 0xc4, 0x80, 0x1a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6da12a28f5f0b6a3));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7d5b1d4539f8b03f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa7e8a423f240335b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x14478cf6d6a11775));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6da12a28f5f0b6a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6da12a28f5f0b6a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f5f0b6a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6da12a28f5f0b6a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f5f0b6a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f5f0b6a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6da12a28f5f0b6a3));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f5f0b6a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa7e8a423f240335b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x14478cf6d6a11775));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cinv) {
  std::vector<uint8_t> bytes = {
    0x01, 0x10, 0x80, 0xda, 0x01, 0x00, 0x80, 0x5a, 0x01, 0x30, 0x80, 0xda, 0x01, 0x20, 0x80, 0x5a, 0x01, 0x50, 0x80, 0xda, 0x01, 0x40, 0x80, 0x5a, 0x01, 0x70, 0x80, 0xda, 0x01, 0x60, 0x80, 0x5a, 0x01, 0x90, 0x80, 0xda, 0x01, 0x80, 0x80, 0x5a, 0x01, 0xb0, 0x80, 0xda, 0x01, 0xa0, 0x80, 0x5a, 0x01, 0xd0, 0x80, 0xda, 0x01, 0xc0, 0x80, 0x5a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x4da0f635dbc2a155));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x4811bbd1ebbb6da8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x670e840f72793066));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa5a64bc387adf787));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000243d5eaa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb25f09ca243d5eaa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000243d5eaa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb25f09ca243d5eaa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb25f09ca243d5eaa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000243d5eaa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x4da0f635dbc2a155));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000243d5eaa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x670e840f72793066));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa5a64bc387adf787));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Cneg) {
  std::vector<uint8_t> bytes = {
    0x01, 0x14, 0x80, 0xda, 0x01, 0x04, 0x80, 0x5a, 0x01, 0x34, 0x80, 0xda, 0x01, 0x24, 0x80, 0x5a, 0x01, 0x54, 0x80, 0xda, 0x01, 0x44, 0x80, 0x5a, 0x01, 0x74, 0x80, 0xda, 0x01, 0x64, 0x80, 0x5a, 0x01, 0x94, 0x80, 0xda, 0x01, 0x84, 0x80, 0x5a, 0x01, 0xb4, 0x80, 0xda, 0x01, 0xa4, 0x80, 0x5a, 0x01, 0xd4, 0x80, 0xda, 0x01, 0xc4, 0x80, 0x5a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x66782e9eb2a5c800));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xefac3817a9c96a9b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xb0aba7178a8dbd3b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb2a5e16baf12c592));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9987d1614d5a3800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000b2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004d5a3800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004d5a3800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004d5a3800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004d5a3800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9987d1614d5a3800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000b2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x66782e9eb2a5c800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004d5a3800));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb0aba7178a8dbd3b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb2a5e16baf12c592));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));
}

TEST(AArch64Translator, Sdiv) {
  std::vector<uint8_t> bytes = {
    0x22, 0x0c, 0xc0, 0x9a, 0x22, 0x0c, 0xc0, 0x1a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7149ab2c1f2d19a2));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9bff2bf267625f6a));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc95fc7197fb2520f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1c5dcf8aaa7bdc1a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7149ab2c1f2d19a2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9bff2bf267625f6a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c5dcf8aaa7bdc1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7149ab2c1f2d19a2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9bff2bf267625f6a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000003));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1c5dcf8aaa7bdc1a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Udiv) {
  std::vector<uint8_t> bytes = {
    0x22, 0x08, 0xc0, 0x9a, 0x22, 0x08, 0xc0, 0x1a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x29d499d6303a5745));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x268fd4648b7cea07));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9b20ffe92d137bce));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4b80e3eee40b29b7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x29d499d6303a5745));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x268fd4648b7cea07));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4b80e3eee40b29b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x29d499d6303a5745));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x268fd4648b7cea07));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000002));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4b80e3eee40b29b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Lslv) {
  std::vector<uint8_t> bytes = {
    0x22, 0x20, 0xc0, 0x9a, 0x22, 0x20, 0xc0, 0x1a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xb0801aafee7cf518));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdfdfdd09d340fe37));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xed7ebc72357b9b64));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4179cb895df61407));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0801aafee7cf518));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfdfdd09d340fe37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x09d340fe37000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4179cb895df61407));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xb0801aafee7cf518));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdfdfdd09d340fe37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000037000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4179cb895df61407));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Lsrv) {
  std::vector<uint8_t> bytes = {
    0x22, 0x24, 0xc0, 0x9a, 0x22, 0x24, 0xc0, 0x1a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x1f87bfb48df9e5f4));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x5170676ac2fca799));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2d87f8d2e0110040));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x51823e3bf75284ba));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1f87bfb48df9e5f4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5170676ac2fca799));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000517));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x51823e3bf75284ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x1f87bfb48df9e5f4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x5170676ac2fca799));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000000c2f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x51823e3bf75284ba));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Asrv) {
  std::vector<uint8_t> bytes = {
    0x22, 0x28, 0xc0, 0x9a, 0x22, 0x28, 0xc0, 0x1a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x65709059e83e213b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xdddedb055dfe1b8f));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc1ef8d831c40e7c9));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xe91cb6e977bcdf0d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65709059e83e213b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdddedb055dfe1b8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfffffffffffffffb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91cb6e977bcdf0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x65709059e83e213b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xdddedb055dfe1b8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000000000b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xe91cb6e977bcdf0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rorv) {
  std::vector<uint8_t> bytes = {
    0x22, 0x2c, 0xc0, 0x9a, 0x22, 0x2c, 0xc0, 0x1a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0334c2e55fde6a2a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6fd584f32cb176cf));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0241158a4d5e9f9e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x3f56aad45dec83e6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0334c2e55fde6a2a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6fd584f32cb176cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x3ccb2c5db3dbf561));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3f56aad45dec83e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0334c2e55fde6a2a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6fd584f32cb176cf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b3cb2c5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x3f56aad45dec83e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rbit) {
  std::vector<uint8_t> bytes = {
    0x01, 0x00, 0xc0, 0xda, 0x01, 0x00, 0xc0, 0x5a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x55f4c44ba340574f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x667df62765fe3112));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x313b793747d9d78e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x9bd78273f2d886dd));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x55f4c44ba340574f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xf2ea02c5d2232faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x313b793747d9d78e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9bd78273f2d886dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x55f4c44ba340574f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000f2ea02c5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x313b793747d9d78e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9bd78273f2d886dd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rev16) {
  std::vector<uint8_t> bytes = {
    0x01, 0x04, 0xc0, 0xda, 0x01, 0x04, 0xc0, 0x5a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9311a84fce143081));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7106930bc83726c8));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xaca2919e269d617e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xbf59e6487a0071d2));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9311a84fce143081));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x11934fa814ce8130));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xaca2919e269d617e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbf59e6487a0071d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9311a84fce143081));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000014ce8130));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xaca2919e269d617e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbf59e6487a0071d2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Rev32) {
  std::vector<uint8_t> bytes = {
    0x01, 0x08, 0xc0, 0xda, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd4989931e8c58a61));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd666fabec59585d5));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe47e0774854f626a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8dab10e6f1d01499));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd4989931e8c58a61));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x319998d4618ac5e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe47e0774854f626a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8dab10e6f1d01499));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Rev) {
  std::vector<uint8_t> bytes = {
    0x01, 0x0c, 0xc0, 0xda, 0x01, 0x08, 0xc0, 0x5a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9609537d17f0c950));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd22caa33c6b5008d));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x89a406f6792ba846));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xac683f6593ad0fbb));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9609537d17f0c950));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x50c9f0177d530996));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89a406f6792ba846));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac683f6593ad0fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9609537d17f0c950));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000050c9f017));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x89a406f6792ba846));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xac683f6593ad0fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Clz) {
  std::vector<uint8_t> bytes = {
    0x01, 0x10, 0xc0, 0xda, 0x01, 0x10, 0xc0, 0x5a, 0xe0, 0x03, 0x1f, 0xaa, 0x01, 0x10, 0xc0, 0xda, 0x01, 0x10, 0xc0, 0x5a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x33cd98e7d964b4ed));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9d468d7cd4672959));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x47bd239c8eec2d27));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xc0ee5021b45d7766));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x33cd98e7d964b4ed));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000002));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x47bd239c8eec2d27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc0ee5021b45d7766));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x33cd98e7d964b4ed));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x47bd239c8eec2d27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc0ee5021b45d7766));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x47bd239c8eec2d27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc0ee5021b45d7766));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000040));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x47bd239c8eec2d27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc0ee5021b45d7766));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x47bd239c8eec2d27));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xc0ee5021b45d7766));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));
}

TEST(AArch64Translator, Cls) {
  std::vector<uint8_t> bytes = {
    0x01, 0x14, 0xc0, 0xda, 0x01, 0x14, 0xc0, 0x5a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6564044330d6ce21));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x94f2c64e2e6623b3));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xda353f114d4a8a7f));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x38bad7db5e3bed67));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6564044330d6ce21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda353f114d4a8a7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x38bad7db5e3bed67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6564044330d6ce21));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000000000001));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda353f114d4a8a7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x38bad7db5e3bed67));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Madd) {
  std::vector<uint8_t> bytes = {
    0x43, 0x00, 0x01, 0x9b, 0x43, 0x00, 0x01, 0x1b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd8e8a8a01eb480bb));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x7d49c962a5a9b5fc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x26df19e10bb6d1b5));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x066fa18ed5c722a0));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd8e8a8a01eb480bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7d49c962a5a9b5fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x26df19e10bb6d1b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x30303494026ce7e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd8e8a8a01eb480bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x7d49c962a5a9b5fc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x26df19e10bb6d1b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x00000000026ce7e7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Mul) {
  std::vector<uint8_t> bytes = {
    0x22, 0x7c, 0x00, 0x9b, 0x22, 0x7c, 0x00, 0x1b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf005413ba964719b));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x16fb59a0d8f77639));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xcb13a31cefddb565));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x26dcf9fae9928f9d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf005413ba964719b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x16fb59a0d8f77639));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa3f91a016847bd83));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x26dcf9fae9928f9d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf005413ba964719b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x16fb59a0d8f77639));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000006847bd83));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x26dcf9fae9928f9d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Msub) {
  std::vector<uint8_t> bytes = {
    0x43, 0x80, 0x01, 0x9b, 0x43, 0x80, 0x01, 0x1b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x05c1b2af8ede8f28));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x511c01143e608eca));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x4e79497f46298c51));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5f86a1dfc1c1b47c));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x05c1b2af8ede8f28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x511c01143e608eca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4e79497f46298c51));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1e97472e9e0e93e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x05c1b2af8ede8f28));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x511c01143e608eca));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4e79497f46298c51));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x00000000e9e0e93e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Mneg) {
  std::vector<uint8_t> bytes = {
    0x22, 0xfc, 0x00, 0x9b, 0x22, 0xfc, 0x00, 0x1b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0933b09de194cd32));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3c4a7ad256f0be31));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x45063651e85b3ce4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4196d322b6c9cb0d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0933b09de194cd32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3c4a7ad256f0be31));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x43ec64e837599d6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4196d322b6c9cb0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0933b09de194cd32));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3c4a7ad256f0be31));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000037599d6e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4196d322b6c9cb0d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, Smaddl) {
  std::vector<uint8_t> bytes = {
    0x43, 0x00, 0x21, 0x9b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9c7747cab1990c72));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xa397cb45a6163f71));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9ac70fefa46162e6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x529e7f9c3a7cbd76));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9c7747cab1990c72));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xa397cb45a6163f71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9ac70fefa46162e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xbca514afdbb04df8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smull) {
  std::vector<uint8_t> bytes = {
    0x22, 0x7c, 0x20, 0x9b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0d027d5dcf4b74ae));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x639f096c7635c5c0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6bb5839475b17189));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x049d1043f33d6852));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0d027d5dcf4b74ae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x639f096c7635c5c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe9828cc7e5676880));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x049d1043f33d6852));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x1 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x1 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x1 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x1 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smsubl) {
  std::vector<uint8_t> bytes = {
    0x43, 0x80, 0x21, 0x9b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x8710a14ea46be5e2));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x10fe6a064f8cebf1));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xd69ab848bb2cd63e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa5532bf26b20ff23));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x8710a14ea46be5e2));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x10fe6a064f8cebf1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd69ab848bb2cd63e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x9c73ae1afaa34b84));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smnegl) {
  std::vector<uint8_t> bytes = {
    0x22, 0xfc, 0x20, 0x9b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2a9185b2921042ec));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x1821d539d7a4d479));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xfab8cb657212e9bc));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb47ebc9168b84f98));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2a9185b2921042ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x1821d539d7a4d479));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xeeab638b6bb4ee74));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb47ebc9168b84f98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Smulh) {
  std::vector<uint8_t> bytes = {
    0x22, 0x7c, 0x40, 0x9b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xc48db6825866db14));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2f793e51f0332a69));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x41a2fcd61cca7c8c));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x240d9f5d8789f706));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xc48db6825866db14));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2f793e51f0332a69));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf4f9dd047d19f4f9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x240d9f5d8789f706));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umaddl) {
  std::vector<uint8_t> bytes = {
    0x43, 0x00, 0xa1, 0x9b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0b7a83efa42cbdf8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x594f9962818982a0));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x2c2179ed307bc4ec));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4acfc3f6290f6e89));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0b7a83efa42cbdf8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x594f9962818982a0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2c2179ed307bc4ec));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2402ed2419d3a978));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umull) {
  std::vector<uint8_t> bytes = {
    0x22, 0x7c, 0xa0, 0x9b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x30ca0929080c3939));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb331ae87a7ef9efa));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x585edbfb906d255e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x8fb7449d6d40ae20));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x30ca0929080c3939));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb331ae87a7ef9efa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x054781bd02780faa));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x8fb7449d6d40ae20));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umsubl) {
  std::vector<uint8_t> bytes = {
    0x43, 0x80, 0xa1, 0x9b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x7b27202ea2434e68));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x3453b016e6edfe76));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1526b81e9faad7a8));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x6b1ed5eb15db9f42));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x7b27202ea2434e68));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x3453b016e6edfe76));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1526b81e9faad7a8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xeb1f328ef10336f8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, Umnegl) {
  std::vector<uint8_t> bytes = {
    0x22, 0xfc, 0xa0, 0x9b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xd5363e95ee883cac));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xe5f88be2cd13a650));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1cfb8c95a84176e4));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7efe22edf767de8e));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xd5363e95ee883cac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xe5f88be2cd13a650));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x40ea9856e1518240));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7efe22edf767de8e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));
}

TEST(AArch64Translator, AndShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x00, 0x0a, 0x22, 0x24, 0x40, 0x0a, 0x22, 0x04, 0x80, 0x0a, 0x22, 0x30, 0xc0, 0x0a, 0x22, 0x44, 0x00, 0x8a, 0x22, 0x24, 0x40, 0x8a, 0x22, 0x94, 0x80, 0x8a, 0x22, 0xd4, 0xc0, 0x8a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf1f774274f71efa9));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x36af0c32840529c9));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x284b22ceed49605a));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x399c19bf648ddd8f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1f774274f71efa9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36af0c32840529c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000084000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x399c19bf648ddd8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1f774274f71efa9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36af0c32840529c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000000528c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x399c19bf648ddd8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1f774274f71efa9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36af0c32840529c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000040021c0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x399c19bf648ddd8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1f774274f71efa9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36af0c32840529c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000080042108));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x399c19bf648ddd8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1f774274f71efa9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36af0c32840529c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x200e0c2284000000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x399c19bf648ddd8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1f774274f71efa9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36af0c32840529c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00280832000528c1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x399c19bf648ddd8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1f774274f71efa9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36af0c32840529c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x36af0c3284052981));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x399c19bf648ddd8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf1f774274f71efa9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36af0c32840529c9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x32a1083284050989));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x399c19bf648ddd8f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, BicShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x20, 0x0a, 0x22, 0x24, 0x60, 0x0a, 0x22, 0x04, 0xa0, 0x0a, 0x22, 0x30, 0xe0, 0x0a, 0x22, 0x44, 0x20, 0x8a, 0x22, 0x24, 0x60, 0x8a, 0x22, 0x94, 0xa0, 0x8a, 0x22, 0xd4, 0xe0, 0x8a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xcd2a21f1fa6a2f19));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2b29c30575c6d9e6));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x7fd9c57adb73f776));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x43a827ac11d059d4));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcd2a21f1fa6a2f19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2b29c30575c6d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000021c4d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43a827ac11d059d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcd2a21f1fa6a2f19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2b29c30575c6d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000007582c8e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43a827ac11d059d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcd2a21f1fa6a2f19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2b29c30575c6d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000c2c862));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43a827ac11d059d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcd2a21f1fa6a2f19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2b29c30575c6d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000004405944));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43a827ac11d059d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcd2a21f1fa6a2f19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2b29c30575c6d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2808030121c4d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43a827ac11d059d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcd2a21f1fa6a2f19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2b29c30575c6d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2b0942050502c8e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43a827ac11d059d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcd2a21f1fa6a2f19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2b29c30575c6d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000018688e0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43a827ac11d059d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xcd2a21f1fa6a2f19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2b29c30575c6d9e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2a20400424861186));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x43a827ac11d059d4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, OrrShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x00, 0x2a, 0x22, 0x24, 0x40, 0x2a, 0x22, 0x04, 0x80, 0x2a, 0x22, 0x30, 0xc0, 0x2a, 0x22, 0x44, 0x00, 0xaa, 0x22, 0x24, 0x40, 0xaa, 0x22, 0x94, 0x80, 0xaa, 0x22, 0xd4, 0xc0, 0xaa, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x54bc949fea8c0fb6));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb5c98bb785c4b720));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x8aed3233e485086d));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xcc33fab88465f617));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54bc949fea8c0fb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb5c98bb785c4b720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000009fecb720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcc33fab88465f617));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54bc949fea8c0fb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb5c98bb785c4b720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000085f5f727));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcc33fab88465f617));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54bc949fea8c0fb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb5c98bb785c4b720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f5c6b7fb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcc33fab88465f617));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54bc949fea8c0fb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb5c98bb785c4b720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffeebfe0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcc33fab88465f617));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54bc949fea8c0fb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb5c98bb785c4b720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbdffdfbf9fecb720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcc33fab88465f617));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54bc949fea8c0fb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb5c98bb785c4b720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb5ebdfffcff5f727));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcc33fab88465f617));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54bc949fea8c0fb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb5c98bb785c4b720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb5c98bb787e5f7a4));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcc33fab88465f617));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54bc949fea8c0fb6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xb5c98bb785c4b720));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf5edfff7e5fdb7a5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xcc33fab88465f617));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, MovShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0xe1, 0x03, 0x00, 0xaa, 0xe1, 0x03, 0x00, 0x2a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x512355614be3616e));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x16b7cba6fa254026));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x25c59d2a75d028d6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x42d0aa264146922f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x512355614be3616e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x512355614be3616e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x25c59d2a75d028d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x42d0aa264146922f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x512355614be3616e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000004be3616e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x25c59d2a75d028d6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x42d0aa264146922f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, OrnShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x20, 0x2a, 0x22, 0x24, 0x60, 0x2a, 0x22, 0x04, 0xa0, 0x2a, 0x22, 0x30, 0xe0, 0x2a, 0x22, 0x44, 0x20, 0xaa, 0x22, 0x24, 0x60, 0xaa, 0x22, 0x94, 0xa0, 0xaa, 0x22, 0xd4, 0xe0, 0xaa, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x62158f26985c9f30));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc639c218a58207ab));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xde21707f4b80fe35));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x398c34e160484885));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x62158f26985c9f30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc639c218a58207ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e59fffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x398c34e160484885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x62158f26985c9f30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc639c218a58207ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ffb3d7bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x398c34e160484885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x62158f26985c9f30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc639c218a58207ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b7d3b7ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x398c34e160484885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x62158f26985c9f30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc639c218a58207ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000adf67fbf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x398c34e160484885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x62158f26985c9f30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc639c218a58207ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe7bbcf5ee59fffff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x398c34e160484885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x62158f26985c9f30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc639c218a58207ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfffff738edb3d7bb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x398c34e160484885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x62158f26985c9f30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc639c218a58207ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfffffffffdef57af));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x398c34e160484885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x62158f26985c9f30));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc639c218a58207ab));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xd7bfcb3dbf867fef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x398c34e160484885));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, MvnShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0xe1, 0x03, 0x20, 0xaa, 0xe1, 0x03, 0x20, 0x2a, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x6f35442a894ce66a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xebacf3a4af905a42));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x81532ae8540fd052));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x7794db59b0f3a2de));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f35442a894ce66a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x90cabbd576b31995));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x81532ae8540fd052));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7794db59b0f3a2de));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x6f35442a894ce66a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000076b31995));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x81532ae8540fd052));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x7794db59b0f3a2de));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));
}

TEST(AArch64Translator, EorShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x00, 0x4a, 0x22, 0x24, 0x40, 0x4a, 0x22, 0x04, 0x80, 0x4a, 0x22, 0x30, 0xc0, 0x4a, 0x22, 0x44, 0x00, 0xca, 0x22, 0x24, 0x40, 0xca, 0x22, 0x94, 0x80, 0xca, 0x22, 0xd4, 0xc0, 0xca, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2ccd71da3b47730a));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6db48f484f5baa00));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xbc0b012a5a551fa0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x2097216627f904b9));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2ccd71da3b47730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6db48f484f5baa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a94faa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2097216627f904b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2ccd71da3b47730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6db48f484f5baa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000004f4609b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2097216627f904b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2ccd71da3b47730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6db48f484f5baa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000052f81385));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2097216627f904b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2ccd71da3b47730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6db48f484f5baa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000007ff81e77));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2097216627f904b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2ccd71da3b47730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6db48f484f5baa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x8e00f9c6a94faa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2097216627f904b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2ccd71da3b47730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6db48f484f5baa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6da2e9f0a24609b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2097216627f904b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2ccd71da3b47730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6db48f484f5baa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6db48f484e3dc18e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2097216627f904b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2ccd71da3b47730a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6db48f484f5baa00));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x063a5e9274c3fb66));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x2097216627f904b9));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x7 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x7 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x7 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x7 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, EonShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x20, 0x4a, 0x22, 0x24, 0x60, 0x4a, 0x22, 0x04, 0xa0, 0x4a, 0x22, 0x30, 0xe0, 0x4a, 0x22, 0x44, 0x20, 0xca, 0x22, 0x24, 0x60, 0xca, 0x22, 0x94, 0xa0, 0xca, 0x22, 0xd4, 0xe0, 0xca, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x428ba324e2f1308c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x43af0ac3aaa8dfd1));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xab18c119646eb66b));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1288353ec5b00fae));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x428ba324e2f1308c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43af0ac3aaa8dfd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000344f202e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1288353ec5b00fae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x428ba324e2f1308c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43af0ac3aaa8dfd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000552658b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1288353ec5b00fae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x428ba324e2f1308c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43af0ac3aaa8dfd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000a42fb868));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1288353ec5b00fae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x428ba324e2f1308c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43af0ac3aaa8dfd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000005d990f3d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1288353ec5b00fae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x428ba324e2f1308c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43af0ac3aaa8dfd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xfa1930de344f202e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1288353ec5b00fae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x428ba324e2f1308c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43af0ac3aaa8dfd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbc71b0edc72658b6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1288353ec5b00fae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x428ba324e2f1308c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43af0ac3aaa8dfd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xbc50f53c57437d37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1288353ec5b00fae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x428ba324e2f1308c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x43af0ac3aaa8dfd1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xe149d22bdcd3423a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1288353ec5b00fae));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, AndsShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x00, 0x6a, 0x22, 0x24, 0x40, 0x6a, 0x22, 0x04, 0x80, 0x6a, 0x22, 0x30, 0xc0, 0x6a, 0x22, 0x44, 0x00, 0xea, 0x22, 0x24, 0x40, 0xea, 0x22, 0x94, 0x80, 0xea, 0x22, 0xd4, 0xc0, 0xea, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x16fc714427b87365));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xbc81fe2d11df8669));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x6c214d80949f1423));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x1f6679ee24bc06da));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x0 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x0 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x0 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x0 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16fc714427b87365));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc81fe2d11df8669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000ca0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1f6679ee24bc06da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16fc714427b87365));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc81fe2d11df8669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000138429));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1f6679ee24bc06da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16fc714427b87365));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc81fe2d11df8669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000011dc0020));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1f6679ee24bc06da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16fc714427b87365));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc81fe2d11df8669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000010520201));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1f6679ee24bc06da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16fc714427b87365));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc81fe2d11df8669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa0804e2000ca0000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1f6679ee24bc06da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16fc714427b87365));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc81fe2d11df8669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00017e2800138429));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1f6679ee24bc06da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16fc714427b87365));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc81fe2d11df8669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000000978208));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1f6679ee24bc06da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16fc714427b87365));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xbc81fe2d11df8669));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xa080202d019b0021));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x1f6679ee24bc06da));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, BicsShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x20, 0x6a, 0x22, 0x24, 0x60, 0x6a, 0x22, 0x04, 0xa0, 0x6a, 0x22, 0x30, 0xe0, 0x6a, 0x22, 0x44, 0x20, 0xea, 0x22, 0x24, 0x60, 0xea, 0x22, 0x94, 0xa0, 0xea, 0x22, 0xd4, 0xe0, 0xea, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9a4c0dee8b966c09));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x2546ac6ec77f44dc));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x0354eb5e6ca85cb6));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x50b112720c4f1a98));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a4c0dee8b966c09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2546ac6ec77f44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000076d44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x50b112720c4f1a98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a4c0dee8b966c09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2546ac6ec77f44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c73a04c8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x50b112720c4f1a98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a4c0dee8b966c09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2546ac6ec77f44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000023440d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x50b112720c4f1a98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a4c0dee8b966c09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2546ac6ec77f44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000007674498));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x50b112720c4f1a98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a4c0dee8b966c09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2546ac6ec77f44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x2402a842076d44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x50b112720c4f1a98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a4c0dee8b966c09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2546ac6ec77f44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x25028868003a04c8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x50b112720c4f1a98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a4c0dee8b966c09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2546ac6ec77f44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000032d0490));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x50b112720c4f1a98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9a4c0dee8b966c09));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x2546ac6ec77f44dc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x05008822441f000c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x50b112720c4f1a98));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));
}

TEST(AArch64Translator, AddShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x00, 0x0b, 0x22, 0x24, 0x40, 0x0b, 0x22, 0x04, 0x80, 0x0b, 0x22, 0x44, 0x00, 0x8b, 0x22, 0x24, 0x40, 0x8b, 0x22, 0x94, 0x80, 0x8b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x9fc8780b9f6137e8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x82cade0b773641ac));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x743221474298b878));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x79b5c3821a6554d8));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9fc8780b9f6137e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x82cade0b773641ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e70641ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x79b5c3821a6554d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9fc8780b9f6137e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x82cade0b773641ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000007785f247));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x79b5c3821a6554d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9fc8780b9f6137e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x82cade0b773641ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000046e6dda0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x79b5c3821a6554d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9fc8780b9f6137e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x82cade0b773641ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x72e21ccde70641ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x79b5c3821a6554d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9fc8780b9f6137e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x82cade0b773641ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x831ac2477d05f247));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x79b5c3821a6554d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x9fc8780b9f6137e8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x82cade0b773641ac));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x82cade0b7434856c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x79b5c3821a6554d8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, AddsShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x00, 0x2b, 0x22, 0x24, 0x40, 0x2b, 0x22, 0x04, 0x80, 0x2b, 0x22, 0x44, 0x00, 0xab, 0x22, 0x24, 0x40, 0xab, 0x22, 0x94, 0x80, 0xab, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xdba4cd57afd1d920));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9a8e267b16661fbb));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xe8c5df054c2affab));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x5c8cdffa1f49d37a));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x1 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x1 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x1 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x1 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdba4cd57afd1d920));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9a8e267b16661fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000c8a61fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5c8cdffa1f49d37a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdba4cd57afd1d920));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9a8e267b16661fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000016be08a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5c8cdffa1f49d37a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdba4cd57afd1d920));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9a8e267b16661fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000ee4f0c4b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5c8cdffa1f49d37a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdba4cd57afd1d920));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9a8e267b16661fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x353d861ec8a61fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5c8cdffa1f49d37a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdba4cd57afd1d920));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9a8e267b16661fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9afbf8e1c23e08a7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5c8cdffa1f49d37a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xdba4cd57afd1d920));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9a8e267b16661fbb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9a8e267b15434625));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x5c8cdffa1f49d37a));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, CmnShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x3f, 0x44, 0x00, 0x2b, 0x3f, 0x24, 0x40, 0x2b, 0x3f, 0x04, 0x80, 0x2b, 0x3f, 0x44, 0x00, 0xab, 0x3f, 0x24, 0x40, 0xab, 0x3f, 0x94, 0x80, 0xab, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x160c31df482b7516));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x73a3992c098e6832));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x1ec4000cda0bbbdd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xa8d96554348c4b12));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x160c31df482b7516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x73a3992c098e6832));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1ec4000cda0bbbdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa8d96554348c4b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x160c31df482b7516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x73a3992c098e6832));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1ec4000cda0bbbdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa8d96554348c4b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x160c31df482b7516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x73a3992c098e6832));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1ec4000cda0bbbdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa8d96554348c4b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x160c31df482b7516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x73a3992c098e6832));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1ec4000cda0bbbdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa8d96554348c4b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x160c31df482b7516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x73a3992c098e6832));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1ec4000cda0bbbdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa8d96554348c4b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x160c31df482b7516));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x73a3992c098e6832));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1ec4000cda0bbbdd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xa8d96554348c4b12));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, SubShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x00, 0x4b, 0x22, 0x24, 0x40, 0x4b, 0x22, 0x04, 0x80, 0x4b, 0x22, 0x44, 0x00, 0xcb, 0x22, 0x24, 0x40, 0xcb, 0x22, 0x94, 0x80, 0xcb, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x16cec0b8591ca605));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9e9976902fb13d5b));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x30e1df63c92fd658));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x4bd46a1aff4036e6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16cec0b8591ca605));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e9976902fb13d5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000e3a73d5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bd46a1aff4036e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16cec0b8591ca605));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e9976902fb13d5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000002f84af08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bd46a1aff4036e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16cec0b8591ca605));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e9976902fb13d5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000322ea59));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bd46a1aff4036e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16cec0b8591ca605));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e9976902fb13d5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x1d28c456e3a73d5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bd46a1aff4036e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16cec0b8591ca605));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e9976902fb13d5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e8e0f2fd384af08));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bd46a1aff4036e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x16cec0b8591ca605));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9e9976902fb13d5b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9e9976902efac756));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x4bd46a1aff4036e6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, NegShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0xe1, 0x47, 0x00, 0x4b, 0xe1, 0x27, 0x40, 0x4b, 0xe1, 0x07, 0x80, 0x4b, 0xe1, 0x47, 0x00, 0xcb, 0xe1, 0x27, 0x40, 0xcb, 0xe1, 0x97, 0x80, 0xcb, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x54f70870263816f7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xb0f1121012c61150));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x9800c00f4f770054));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xdc61afa8cde0402f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54f70870263816f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000d2120000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9800c00f4f770054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc61afa8cde0402f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54f70870263816f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffece3f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9800c00f4f770054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc61afa8cde0402f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54f70870263816f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ece3f485));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9800c00f4f770054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc61afa8cde0402f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54f70870263816f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xef1fb38fd2120000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9800c00f4f770054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc61afa8cde0402f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54f70870263816f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffd5847bc7ece3f5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9800c00f4f770054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc61afa8cde0402f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x54f70870263816f7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfffffffffd5847bd));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x9800c00f4f770054));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xdc61afa8cde0402f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x6 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x6 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x6 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x6 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, SubsShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x44, 0x00, 0x6b, 0x22, 0x24, 0x40, 0x6b, 0x22, 0x04, 0x80, 0x6b, 0x22, 0x44, 0x00, 0xeb, 0x22, 0x24, 0x40, 0xeb, 0x22, 0x94, 0x80, 0xeb, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x306f3c479cd4b7e5));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xc589049cf5171440));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x55f94b657b466edd));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x012e8a179be9eca7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x2 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x2 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x2 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x2 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x306f3c479cd4b7e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc589049cf5171440));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000854d1440));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x012e8a179be9eca7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x306f3c479cd4b7e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc589049cf5171440));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000f4c8a9e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x012e8a179be9eca7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x306f3c479cd4b7e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc589049cf5171440));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000026acb84e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x012e8a179be9eca7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x306f3c479cd4b7e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc589049cf5171440));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x4cf9caf3854d1440));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x012e8a179be9eca7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x306f3c479cd4b7e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc589049cf5171440));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc570ccfed148a9e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x012e8a179be9eca7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x306f3c479cd4b7e5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc589049cf5171440));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc589049cf3939a5e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x012e8a179be9eca7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, CmpShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0x3f, 0x44, 0x00, 0x6b, 0x3f, 0x24, 0x40, 0x6b, 0x3f, 0x04, 0x80, 0x6b, 0x3f, 0x44, 0x00, 0xeb, 0x3f, 0x24, 0x40, 0xeb, 0x3f, 0x94, 0x80, 0xeb, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x369efd54f3780b7c));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x487a9b8ef9d68589));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xf2472de32ba061b0));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x72aa713773febe64));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x8 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x8 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x8 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x8 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x369efd54f3780b7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x487a9b8ef9d68589));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2472de32ba061b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x72aa713773febe64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x369efd54f3780b7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x487a9b8ef9d68589));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2472de32ba061b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x72aa713773febe64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x369efd54f3780b7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x487a9b8ef9d68589));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2472de32ba061b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x72aa713773febe64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x369efd54f3780b7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x487a9b8ef9d68589));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2472de32ba061b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x72aa713773febe64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x369efd54f3780b7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x487a9b8ef9d68589));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2472de32ba061b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x72aa713773febe64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x369efd54f3780b7c));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x487a9b8ef9d68589));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf2472de32ba061b0));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x72aa713773febe64));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, NegsShiftedRegister) {
  std::vector<uint8_t> bytes = {
    0xe1, 0x47, 0x00, 0x6b, 0xe1, 0x27, 0x40, 0x6b, 0xe1, 0x07, 0x80, 0x6b, 0xe1, 0x47, 0x00, 0xeb, 0xe1, 0x27, 0x40, 0xeb, 0xe1, 0x97, 0x80, 0xeb, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x49329f6caa16fdf7));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xd9f3e7ac4cd55e15));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x53744beba2661ccb));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xb5db9665d203ac37));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49329f6caa16fdf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x0000000004120000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53744beba2661ccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5db9665d203ac37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49329f6caa16fdf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x00000000ffaaf482));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53744beba2661ccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5db9665d203ac37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49329f6caa16fdf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x000000002af48105));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53744beba2661ccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5db9665d203ac37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49329f6caa16fdf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xc126abd204120000));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53744beba2661ccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5db9665d203ac37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49329f6caa16fdf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xffdb66b049aaf482));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53744beba2661ccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5db9665d203ac37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x49329f6caa16fdf7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xfffffffffdb66b05));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x53744beba2661ccb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xb5db9665d203ac37));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));
}

TEST(AArch64Translator, AddExtendedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x04, 0x20, 0x0b, 0x22, 0x28, 0x20, 0x0b, 0x22, 0x4c, 0x20, 0x0b, 0x22, 0x70, 0x20, 0x0b, 0x22, 0x84, 0x20, 0x0b, 0x22, 0xa8, 0x20, 0x0b, 0x22, 0xcc, 0x20, 0x0b, 0x22, 0xec, 0x20, 0x0b, 0x22, 0x04, 0x20, 0x8b, 0x22, 0x28, 0x20, 0x8b, 0x22, 0x4c, 0x20, 0x8b, 0x22, 0x70, 0x20, 0x8b, 0x22, 0x84, 0x20, 0x8b, 0x22, 0xa8, 0x20, 0x8b, 0x22, 0xcc, 0x20, 0x8b, 0x22, 0xec, 0x20, 0x8b, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x129da70c68a0106f));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x36a9bfc7048689a1));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xa9e8682837126276));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x65286643481120b5));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000004868a7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000486cb5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000049870d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000008e879091));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000004868a7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000486cb5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000049870d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000049870d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x36a9bfc704868a7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x36a9bfc70486cb5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x36a9bfca49870d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6084308d8e879091));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x36a9bfc704868a7f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x36a9bfc70486cb5d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x36a9bfca49870d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x129da70c68a0106f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x36a9bfc7048689a1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcb96f82a49870d19));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x65286643481120b5));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x4 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x4 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x4 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x4 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, AddsExtendedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x04, 0x20, 0x2b, 0x22, 0x28, 0x20, 0x2b, 0x22, 0x4c, 0x20, 0x2b, 0x22, 0x70, 0x20, 0x2b, 0x22, 0x84, 0x20, 0x2b, 0x22, 0xa8, 0x20, 0x2b, 0x22, 0xcc, 0x20, 0x2b, 0x22, 0xec, 0x20, 0x2b, 0x22, 0x04, 0x20, 0xab, 0x22, 0x28, 0x20, 0xab, 0x22, 0x4c, 0x20, 0xab, 0x22, 0x70, 0x20, 0xab, 0x22, 0x84, 0x20, 0xab, 0x22, 0xa8, 0x20, 0xab, 0x22, 0xcc, 0x20, 0xab, 0x22, 0xec, 0x20, 0xab, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x687be8fdece4d043));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x6c134d78cdd373bf));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x931c658a0cd63add));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xaa33fbffcb101ff6));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x3 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x3 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x3 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x3 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000cdd37445));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000cdd6b4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000034f9f5d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000009c2077ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000cdd37445));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000cdd2b4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000034f9f5d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000034f9f5d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6c134d78cdd37445));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6c134d78cdd6b4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6c134d8034f9f5d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xf3d1dd579c2077ef));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6c134d78cdd37445));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6c134d78cdd2b4cb));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x6c134d7834f9f5d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x687be8fdece4d043));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x6c134d78cdd373bf));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xaff2956834f9f5d7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xaa33fbffcb101ff6));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, CmnExtendedRegister) {
  std::vector<uint8_t> bytes = {
    0x3f, 0x04, 0x20, 0x2b, 0x3f, 0x28, 0x20, 0x2b, 0x3f, 0x4c, 0x20, 0x2b, 0x3f, 0x70, 0x20, 0x2b, 0x3f, 0x84, 0x20, 0x2b, 0x3f, 0xa8, 0x20, 0x2b, 0x3f, 0xcc, 0x20, 0x2b, 0x3f, 0xec, 0x20, 0x2b, 0x3f, 0x04, 0x20, 0xab, 0x3f, 0x28, 0x20, 0xab, 0x3f, 0x4c, 0x20, 0xab, 0x3f, 0x70, 0x20, 0xab, 0x3f, 0x84, 0x20, 0xab, 0x3f, 0xa8, 0x20, 0xab, 0x3f, 0xcc, 0x20, 0xab, 0x3f, 0xec, 0x20, 0xab, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x2b445c58a778bacc));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x9fa07b6dd04a6529));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x319b86b94c362297));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x45e99ef10f5e669f));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x6 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x6 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x6 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x6 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x2b445c58a778bacc));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x9fa07b6dd04a6529));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x319b86b94c362297));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x45e99ef10f5e669f));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, SubExtendedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x04, 0x20, 0x4b, 0x22, 0x28, 0x20, 0x4b, 0x22, 0x4c, 0x20, 0x4b, 0x22, 0x70, 0x20, 0x4b, 0x22, 0x84, 0x20, 0x4b, 0x22, 0xa8, 0x20, 0x4b, 0x22, 0xcc, 0x20, 0x4b, 0x22, 0xec, 0x20, 0x4b, 0x22, 0x04, 0x20, 0xcb, 0x22, 0x28, 0x20, 0xcb, 0x22, 0x4c, 0x20, 0xcb, 0x22, 0x70, 0x20, 0xcb, 0x22, 0x84, 0x20, 0xcb, 0x22, 0xa8, 0x20, 0xcb, 0x22, 0xcc, 0x20, 0xcb, 0x22, 0xec, 0x20, 0xcb, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x0350688d256144ff));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xcbbd29c861d44569));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x40ad8ed1ff31427e));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x110bca507abe20b7));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x5 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x5 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x5 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x5 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000061d4436b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000061d3316d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000036ca1d71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x000000000bbff579));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000061d4456b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000061d3316d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000036ca1d71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000036ca1d71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcbbd29c861d4436b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcbbd29c861d3316d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcbbd29c736ca1d71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x96b6a0f60bbff579));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcbbd29c861d4456b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcbbd29c861d3316d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xcbbd29c736ca1d71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x0350688d256144ff));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xcbbd29c861d44569));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xb139e55f36ca1d71));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x110bca507abe20b7));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x5 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x5 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x5 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x5 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, SubsExtendedRegister) {
  std::vector<uint8_t> bytes = {
    0x22, 0x04, 0x20, 0x6b, 0x22, 0x28, 0x20, 0x6b, 0x22, 0x4c, 0x20, 0x6b, 0x22, 0x70, 0x20, 0x6b, 0x22, 0x84, 0x20, 0x6b, 0x22, 0xa8, 0x20, 0x6b, 0x22, 0xcc, 0x20, 0x6b, 0x22, 0xec, 0x20, 0x6b, 0x22, 0x04, 0x20, 0xeb, 0x22, 0x28, 0x20, 0xeb, 0x22, 0x4c, 0x20, 0xeb, 0x22, 0x70, 0x20, 0xeb, 0x22, 0x84, 0x20, 0xeb, 0x22, 0xa8, 0x20, 0xeb, 0x22, 0xcc, 0x20, 0xeb, 0x22, 0xec, 0x20, 0xeb, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0x71332381b9a66ff8));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0xda587a7851225912));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0xc748ff32a6866ef8));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0xd1d591d3f410134d));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x7 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x7 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x7 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x7 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000051225722));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000051209932));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000083eed952));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x00000000b6bb5992));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000051225922));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000051209932));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000083eed952));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x0000000083eed952));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda587a7851225722));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda587a7851209932));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda587a7283eed952));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xc726425cb6bb5992));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda587a7851225922));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda587a7851209932));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0xda587a7a83eed952));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0x71332381b9a66ff8));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0xda587a7851225912));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x50bf5e6a83eed952));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0xd1d591d3f410134d));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

TEST(AArch64Translator, CmpExtendedRegister) {
  std::vector<uint8_t> bytes = {
    0x3f, 0x04, 0x20, 0x6b, 0x3f, 0x28, 0x20, 0x6b, 0x3f, 0x4c, 0x20, 0x6b, 0x3f, 0x70, 0x20, 0x6b, 0x3f, 0x84, 0x20, 0x6b, 0x3f, 0xa8, 0x20, 0x6b, 0x3f, 0xcc, 0x20, 0x6b, 0x3f, 0xec, 0x20, 0x6b, 0x3f, 0x04, 0x20, 0xeb, 0x3f, 0x28, 0x20, 0xeb, 0x3f, 0x4c, 0x20, 0xeb, 0x3f, 0x70, 0x20, 0xeb, 0x3f, 0x84, 0x20, 0xeb, 0x3f, 0xa8, 0x20, 0xeb, 0x3f, 0xcc, 0x20, 0xeb, 0x3f, 0xec, 0x20, 0xeb, 
  };

  aarch64::Emulator reil_emu;
  reil_emu.SetMemory(0x1000, bytes);
  reil_emu.SetRegister(aarch64::kX0, Imm64(0xf97eaac74fd26618));
  reil_emu.SetRegister(aarch64::kX1, Imm64(0x207dc516a092b39e));
  reil_emu.SetRegister(aarch64::kX2, Imm64(0x5d0ff8b790a39064));
  reil_emu.SetRegister(aarch64::kX3, Imm64(0x57f5fbf265e9833b));
  reil_emu.SetRegister(aarch64::kN, Imm8((0x4 >> 3) & 0b1));
  reil_emu.SetRegister(aarch64::kZ, Imm8((0x4 >> 2) & 0b1));
  reil_emu.SetRegister(aarch64::kC, Imm8((0x4 >> 1) & 0b1));
  reil_emu.SetRegister(aarch64::kV, Imm8((0x4 >> 0) & 0b1));
  reil_emu.SetRegister(aarch64::kPc, Imm64(0x1000));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001004));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001008));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000100c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x8 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x8 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x8 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x8 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001010));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001014));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0xa >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0xa >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0xa >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0xa >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001018));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000101c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x3 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x3 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x3 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x3 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001020));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001024));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001028));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000102c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x9 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x9 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x9 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x9 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001030));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001034));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001038));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x2 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x2 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x2 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x2 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x000000000000103c));

  ASSERT_TRUE(reil_emu.SingleStep());
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX0), Imm64(0xf97eaac74fd26618));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX1), Imm64(0x207dc516a092b39e));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX2), Imm64(0x5d0ff8b790a39064));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kX3), Imm64(0x57f5fbf265e9833b));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kN), Imm8((0x0 >> 3) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kZ), Imm8((0x0 >> 2) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kC), Imm8((0x0 >> 1) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kV), Imm8((0x0 >> 0) & 0b1));
  ASSERT_EQ(reil_emu.GetRegister(aarch64::kPc), Imm64(0x0000000000001040));
}

}  // namespace test
}  // namespace reil

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
